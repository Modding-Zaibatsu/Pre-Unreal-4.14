// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	MeshTexCoordSizeAccuracyPixelShader.usf: Outputs the accucary of the texel factor.
=============================================================================*/

#include "Common.usf"

#include "DebugViewModeCommon.usf"

float4 AccuracyColors[5];
float CPUTexelFactor; // In world space units.
float PrimitiveAlpha;

// Needed because UAV accesses disable early depth test otherwises.
EARLYDEPTHSTENCIL
void Main(
	in FDebugPSIn DebugInputs,
	out float4 OutColor : SV_Target0
	)
{
#if INSTANCED_STEREO
	ResolvedView = ResolveView(GetEyeIndex(DebugInputs.PackedEyeIndex));
#else
	ResolvedView = ResolveView();
#endif

	float3 Result = float3(UNDEFINED_ACCURACY, UNDEFINED_ACCURACY, UNDEFINED_ACCURACY);

	if (CPUTexelFactor >= 0)
	{
		float3 WorldPosition = SvPositionToResolvedTranslatedWorld(DebugInputs.SvPosition);

		float2 CoordDDX = ddx(DebugInputs.TexCoord01.xy);
		float2 CoordDDY = ddy(DebugInputs.TexCoord01.xy);
		float3 WorldPosDDX = ddx(WorldPosition);
		float3 WorldPosDDY = ddy(WorldPosition);

		float GPUTexelFactor = max(length(WorldPosDDX) / length(CoordDDX), length(WorldPosDDY) / length(CoordDDY));

		float Accuracy = clamp(log2(CPUTexelFactor) - log2(GPUTexelFactor), -1.99, 1.99);
		int ColorIndex = floor(Accuracy) + 2;

		Result = lerp(AccuracyColors[ColorIndex].rgb, AccuracyColors[ColorIndex + 1].rgb, frac(Accuracy));
	}

	OutColor = RETURN_COLOR(float4(Result, PrimitiveAlpha));
}
