// ---------------------------------------------------------------------------
//
// Copyright (c) 2016 Neoglyphic Entertainment, Inc. All rights reserved.
//
// This is part of the NeoFur fur and hair rendering and simulation
// plugin for Unreal Engine.
//
// Do not redistribute NeoFur without the express permission of
// Neoglyphic Entertainment. See your license for specific details.
//
// -------------------------- END HEADER -------------------------------------

// ----------------------------------------------------------------------
// Uniform inputs.
// ----------------------------------------------------------------------

int ShellCount;
int ActiveShellCount;
int VertsPerShell;
float Bendiness;
float ShellFade;
float VisibleLengthScale;
float ShellDistance;
float NormalDirectionBlend;

// ----------------------------------------------------------------------
// Horrible hack to get most of the functionality of the stock local
// vertex factory.
// ----------------------------------------------------------------------

// FIXME: Instead of relying on LocalVertexFactory as a crutch to fill
// in gaps in our own vertex factory, we should just finish off the
// implementation of a completely independent one. This is a fragile
// hack that will probably break if Epic alters the
// LocalVertexFactory in any way.

#define FVertexFactoryInput FVertexFactoryInput_Original
#define VertexFactoryGetWorldPosition VertexFactoryGetWorldPosition_Original
#define VertexFactoryGetPreviousWorldPosition VertexFactoryGetPreviousWorldPosition_Original
#define GetVertexFactoryIntermediates GetVertexFactoryIntermediates_Original
#define VertexFactoryGetTangentToLocal VertexFactoryGetTangentToLocal_Original
#define VertexFactoryGetWorldPosition VertexFactoryGetWorldPosition_Original
#define VertexFactoryGetRasterizedWorldPosition VertexFactoryGetRasterizedWorldPosition_Original
#define GetMaterialVertexParameters GetMaterialVertexParameters_Original
#define VertexFactoryGetInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS_Original
#define VertexFactoryGetInterpolantsVSToDS VertexFactoryGetInterpolantsVSToDS_Original
#define GetMaterialPixelParameters GetMaterialPixelParameters_Original
#include "LocalVertexFactory.usf"
#undef FVertexFactoryInput
#undef VertexFactoryGetWorldPosition
#undef VertexFactoryGetPreviousWorldPosition
#undef GetVertexFactoryIntermediates
#undef VertexFactoryGetTangentToLocal
#undef VertexFactoryGetWorldPosition
#undef VertexFactoryGetRasterizedWorldPosition
#undef GetMaterialVertexParameters
#undef VertexFactoryGetInterpolantsVSToPS
#undef VertexFactoryGetInterpolantsVSToDS
#undef GetMaterialPixelParameters

// ----------------------------------------------------------------------
// Vertex type.
// ----------------------------------------------------------------------

struct FVertexFactoryInput
{
	// We're still going to use most of the LocalVertexFactory's input
	// structure, and a lot of the LocalVertexFactory's functionality.
	FVertexFactoryInput_Original OriginalData;
	
	// FIXME: We wanted to use SV_VertexID here, but mobile platforms
	// have a pretty hard time with it.
	//uint VertexId : SV_VertexID;
	float VertexId : ATTRIBUTE13;

	// Note: We don't do instancing with the fur, so we can probably
	// hijack attributes 8-12 for our own purposes. But if Epic ever
	// changes the LocalVertexFactory vertex type, we're going to be
	// in trouble.
	float3 ControlPointPosition       : ATTRIBUTE8;
	float3 Old_Position               : ATTRIBUTE9;
	float3 Old_ControlPointPosition   : ATTRIBUTE10;
	float3 SkinnedSplineDirection     : ATTRIBUTE11;
	float3 Old_SkinnedSplineDirection : ATTRIBUTE12;

	// Some feature enabled when using the Metal RHI still needs this.
	uint InstanceId	: SV_InstanceID;
};

// OBFUSCATE_START

// ----------------------------------------------------------------------
// Factory entry points follow.
// ----------------------------------------------------------------------

float3 GetPositionForShell(
	float ShellAlpha, float3 SkinnedFinalPosition,
	float3 SkinnedFinalSplineDir, float3 ControlPointPosition)
{
	float BlendedPointAlpha = 1.0 - pow(clamp(1.0 - ShellAlpha, 0.0, 1.0), Bendiness);
	float3 BlendedPoint =
		(1.0 - BlendedPointAlpha) * (SkinnedFinalPosition + SkinnedFinalSplineDir * ShellDistance) +
		BlendedPointAlpha * ControlPointPosition;

	float positionAlpha = ShellAlpha * ShellFade * VisibleLengthScale;
	float3 NewPoint_Position =
		(1.0 - positionAlpha) * SkinnedFinalPosition +
		positionAlpha * BlendedPoint;

	return NewPoint_Position;
}

FMaterialVertexParameters GetMaterialVertexParameters(
	FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates,
	float3 WorldPosition, half3x3 TangentToLocal)
{
	return GetMaterialVertexParameters_Original(Input.OriginalData, Intermediates, WorldPosition, TangentToLocal);
}

half3x3 VertexFactoryGetTangentToLocal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return VertexFactoryGetTangentToLocal_Original(Input.OriginalData, Intermediates);
}

// FIXME: Implement this?
float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return VertexFactoryGetRasterizedWorldPosition_Original(Input.OriginalData, Intermediates, InWorldPosition);
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	float3 SkinnedNormal = Input.OriginalData.TangentZ.xyz;

    int ShellId = int(Input.VertexId) / VertsPerShell;
	float ShellAlpha = float(ShellId) / float(ActiveShellCount - 1);
	float ShellAlpha_Last = float(ShellId - 1) / float(ActiveShellCount - 1);
	
	float3 LastPoint_Position = GetPositionForShell(
		ShellAlpha_Last,
		Input.OriginalData.Position.xyz,
		Input.SkinnedSplineDirection,
		Input.ControlPointPosition);

	float3 NewPoint_Position = GetPositionForShell(
		ShellAlpha,
		Input.OriginalData.Position.xyz,
		Input.SkinnedSplineDirection,
		Input.ControlPointPosition);
		
	float3 EndPointTanZ = NewPoint_Position - LastPoint_Position;

	if(length(EndPointTanZ) < 0.001) {

		// The control point and the base vertex are so close
		// that we can't actually construct a normal out of
		// it. Just use the skinned position.
		EndPointTanZ = SkinnedNormal;

	} else {

		// Normal value is pointing along the length of the
		// fur. This works best with the 4.11+ hair shading
		// model.
		EndPointTanZ = normalize(EndPointTanZ);

		// Handle skinned normal influence.
		EndPointTanZ = lerp(
			SkinnedNormal,
			EndPointTanZ,
			NormalDirectionBlend);
	}
	
	// UE4 wants stuff in this stage to be in the 0.0 to 1.0 range for
	// some reason, but we're doing all the math in the -1.0 to 1.0
	// range.
	FVertexFactoryInput_Original FakeInput = Input.OriginalData;
	FakeInput.TangentZ = float4((EndPointTanZ.xyz + float3(1.0, 1.0, 1.0)) / 2.0f, 1.0);

	// Now that we've calculated our local normal, just feed it into
	// the local vertex factory's default vertex processing and let it
	// handle the world transform and whatever. FIXME: This is an ugly
	// hack.
	FVertexFactoryIntermediates ret = GetVertexFactoryIntermediates_Original(FakeInput);
	
	return ret;
}

float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
    int ShellId = int(Input.VertexId) / VertsPerShell;
	float ShellAlpha = float(ShellId) / float(ActiveShellCount - 1);
	
	float3 LocalPos = GetPositionForShell(
		ShellAlpha,
		Input.OriginalData.Position.xyz,
		Input.SkinnedSplineDirection,
		Input.ControlPointPosition);

	float4 ret = CalcWorldPosition(float4(LocalPos, 1.0));

	return ret;
}

// FIXME: Not sure if we need to implement this.
float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	float4 ret = VertexFactoryGetWorldPosition_Original(Input);
	return ret;
}

// This is for motion blur.
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldMaybeWithTranslation = PreviousLocalToWorld;

#if NEOFUR_UE4_ENGINE_MINOR_VERSION > 12
	// In 4.13 there are some motion blur changes.
	PreviousLocalToWorldMaybeWithTranslation[3][0] += ResolvedView.PrevPreViewTranslation.x;
	PreviousLocalToWorldMaybeWithTranslation[3][1] += ResolvedView.PrevPreViewTranslation.y;
	PreviousLocalToWorldMaybeWithTranslation[3][2] += ResolvedView.PrevPreViewTranslation.z;
#endif

	int ShellId = int(Input.VertexId) / VertsPerShell;
	float ShellAlpha = float(ShellId) / float(ActiveShellCount - 1);

	float3 LocalPos = GetPositionForShell(
		ShellAlpha,
		Input.Old_Position.xyz,
		Input.Old_SkinnedSplineDirection,
		Input.Old_ControlPointPosition);
		
	float4 ret = mul(
		float4(LocalPos, 1.0),
		PreviousLocalToWorldMaybeWithTranslation);

	return ret;
}

FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	FMaterialPixelParameters ret = GetMaterialPixelParameters_Original(Interpolants, SvPosition);
	return ret;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(
	FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates,
	FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS ret;
	ret = VertexFactoryGetInterpolantsVSToPS_Original(Input.OriginalData, Intermediates, VertexParameters);
	
  #if NUM_MATERIAL_TEXCOORDS >= 3
  
    int ShellId = int(Input.VertexId) / VertsPerShell;
	float ShellAlpha = float(ShellId) / float(ActiveShellCount - 1);
	
	// TODO: Move ThickenAmount out of the vertex factory, and make it
	// a uniform.
	float ThickenAmount = 1.0f - (float(ActiveShellCount) / float(ShellCount));
	ThickenAmount = clamp(ThickenAmount, 0.0f, 1.0f);
	ThickenAmount = 1.0f + ThickenAmount * 5.0f;

	float2 DynamicUVs;
	DynamicUVs.x = pow(clamp(ShellAlpha, 0.0, 1.0), ThickenAmount);
	DynamicUVs.y = ShellAlpha;
	
	SetUV(ret, 2, DynamicUVs);
	
  #endif
  
	return ret;
}

#if USING_TESSELLATION
FVertexFactoryInterpolantsVSToDS VertexFactoryGetInterpolantsVSToDS(
	FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates,
	FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToDS Interpolants;
	Interpolants.InterpolantsVSToPS = VertexFactoryGetInterpolantsVSToPS(Input, Intermediates, VertexParameters);
	return Interpolants;
}
#endif