// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
 MediaShaders.usf: Shaders to convert various media decoder outputs to RGBA
 =============================================================================*/

#include "Common.usf"
#include "GammaCorrectionCommon.usf"


/* Constants
=============================================================================*/

static const float3x3 YUV_TO_RGB_BT601 =
{
	1.000000, 0.000000, 1.139830,
	1.000000,-0.394650,-0.580600,
	1.000000, 2.032110, 0.000000,
};

static const float3x3 YUV_TO_RGB_BT709 =
{
	1.000000, 0.000000, 1.280330,
	1.000000,-0.214820,-0.380590,
	1.000000, 2.127980, 0.000000,
};

static const float3x3 YUV_TO_RGB_JPEG =
{
	1.000000, 0.000000, 1.402000,
	1.000000,-0.344140,-0.714140,
	1.000000, 1.772000, 0.000000,
};

static const float3x3 YUV_TO_RGB_MSDN =
{
	1.164383, 0.000000, 1.596027,
	1.164383,-0.391762,-0.812968,
	1.164383, 2.017232, 0.000000,
};

static const float3x3 YUV_TO_RGB_PS4 =
{
	1.164400, 0.000000, 1.792700,
	1.164400,-0.213300,-0.532900,
	1.164400, 2.112400, 0.000000,
};


/* Helpers
=============================================================================*/

float3 YuvToRgb(float3 YUV, float3x3 Coeff)
{
	YUV -= float3(0.0625, 0.5, 0.5);
	float3 RGB = mul(Coeff, YUV);
	return sRGBToLinear(RGB);
}


/* Vertex shader
=============================================================================*/

void MainVertexShader(
	in float4 InPosition : ATTRIBUTE0,
	in float2 InUV : ATTRIBUTE1,
	out float4 OutPosition : SV_POSITION,
	out float2 OutUV : TEXCOORD0)
{
	OutPosition = InPosition;
	OutUV = InUV;
}


/* Pixel shaders
=============================================================================*/

// shader to convert a AYUV texture to RGBA
void AYUVConvertPS(
	float4 InPosition : SV_POSITION,
	float2 InUV : TEXCOORD0,
	out float4 OutColor : SV_Target0)
{
	float4 AYUV = AYUVConvertUB.AYUVTexture.Sample(AYUVConvertUB.AYUVSampler, InUV.xy);
	
	OutColor.xyz = YuvToRgb(AYUV.zyx, YUV_TO_RGB_MSDN);
	OutColor.w = AYUV.w;
}


// shader to convert a NV12 texture to RGBA
void NV12ConvertPS(
	float4 InPosition : SV_POSITION,
	float2 InUV : TEXCOORD0,
	out float4 OutColor : SV_Target0)
{
	float3 YUV;
	YUV.x = NV12ConvertUB.NV12Texture.Sample(NV12ConvertUB.NV12Sampler, float2(InUV.x, InUV.y / 3.0f * 2.0f)).x;

	uint UVOffs = uint(InUV.x * NV12ConvertUB.Width / 2.0f) * 2;
	float UPos = (float(UVOffs) + 0.5f) / NV12ConvertUB.Width;
	float VPos = (float(UVOffs) + 1.5f) / NV12ConvertUB.Width;

	YUV.y = NV12ConvertUB.NV12Texture.Sample(NV12ConvertUB.NV12Sampler, float2(UPos, (InUV.y + 2.0f) / 3.0f)).x;
	YUV.z = NV12ConvertUB.NV12Texture.Sample(NV12ConvertUB.NV12Sampler, float2(VPos, (InUV.y + 2.0f) / 3.0f)).x;

	OutColor.xyz = YuvToRgb(YUV, YUV_TO_RGB_MSDN);
	OutColor.w = 1.0f;
}


// shader to convert a NV21 texture to RGBA
void NV21ConvertPS(
	float4 InPosition : SV_POSITION,
	float2 InUV : TEXCOORD0,
	out float4 OutColor : SV_Target0)
{
	float3 YUV;
	YUV.x = NV12ConvertUB.NV12Texture.Sample(NV12ConvertUB.NV12Sampler, float2(InUV.x, InUV.y / 3.0f * 2.0f)).x;

	uint VUPos = uint(InUV.x * NV12ConvertUB.Width / 2.0f) * 2;
	float UPos = (float(VUPos) + 1.5f) / NV12ConvertUB.Width;
	float VPos = (float(VUPos) + 0.5f) / NV12ConvertUB.Width;

	YUV.y = NV12ConvertUB.NV12Texture.Sample(NV12ConvertUB.NV12Sampler, float2(UPos, (InUV.y + 2.0f) / 3.0f)).x;
	YUV.z = NV12ConvertUB.NV12Texture.Sample(NV12ConvertUB.NV12Sampler, float2(VPos, (InUV.y + 2.0f) / 3.0f)).x;

	OutColor.xyz = YuvToRgb(YUV, YUV_TO_RGB_MSDN);
	OutColor.w = 1.0f;
}


// shader to convert a luma (Y) and chroma (CbCr) texture to RGBA
void YCbCrConvertPS(
	float4 InPosition : SV_POSITION,
	float2 InUV : TEXCOORD0,
	out float4 OutColor : SV_Target0)
{
	float3 YUV;
	YUV.x = YCbCrConvertUB.LumaTexture.Sample(YCbCrConvertUB.LumaSampler, InUV.xy).x;
	YUV.yz = YCbCrConvertUB.CbCrTexture.Sample(YCbCrConvertUB.CbCrSampler, InUV.xy).xy;
	
	OutColor.xyz = YuvToRgb(YUV, YUV_TO_RGB_PS4);
	OutColor.w = 1.0f;
}


// shader to convert a UYVY texture to RGBA
void UYVYConvertPS(
	float4 InPosition : SV_POSITION,
	float2 InUV : TEXCOORD0,
	out float4 OutColor : SV_Target0)
{
	float4 UYVYB = UYVYConvertUB.UYVYTexture.Sample(UYVYConvertUB.UYVYSamplerB, float2(InUV.x, InUV.y));
	float4 UYVYP = UYVYConvertUB.UYVYTexture.Sample(UYVYConvertUB.UYVYSamplerP, float2(InUV.x, InUV.y));

	float Pos = 2.0f * InUV.x * UYVYConvertUB.Width;
	float3 YUV;

	YUV.x = (floor(Pos % 2.0f) == 0) ? UYVYP.y : UYVYP.w;
	YUV.yz = UYVYB.zx;

	OutColor.xyz = YuvToRgb(YUV, YUV_TO_RGB_MSDN);
	OutColor.w = 1.0f;
}


// shader to convert three Y, U, and V textures to RGBA
void YUVConvertPS(
	float4 InPosition : SV_POSITION,
	float2 InUV : TEXCOORD0,
	out float4 OutColor : SV_Target0)
{
	float3 YUV;
	YUV.x = YUVConvertUB.YTexture.Sample(YUVConvertUB.YSampler, InUV.xy).x;
	YUV.y = YUVConvertUB.UTexture.Sample(YUVConvertUB.USampler, InUV.xy).x;
	YUV.z = YUVConvertUB.VTexture.Sample(YUVConvertUB.VSampler, InUV.xy).x;
	
	OutColor.xyz = YuvToRgb(YUV, YUV_TO_RGB_MSDN);
	OutColor.w = 1.0f;
}


// shader to convert a YUY2 texture to RGBA
void YUY2ConvertPS(
	float4 InPosition : SV_POSITION,
	float2 InUV : TEXCOORD0,
	out float4 OutColor : SV_Target0)
{
	float4 YUY2B = YUY2ConvertUB.YUY2Texture.Sample(YUY2ConvertUB.YUY2SamplerB, float2(InUV.x, InUV.y));
	float4 YUY2P = YUY2ConvertUB.YUY2Texture.Sample(YUY2ConvertUB.YUY2SamplerP, float2(InUV.x, InUV.y));

	float Pos = 2.0f * InUV.x * YUY2ConvertUB.Width;
	float3 YUV;

	YUV.x = (floor(Pos % 2.0f) == 0) ? YUY2P.z : YUY2P.x;
	YUV.yz = YUY2B.yw;

	OutColor.xyz = YuvToRgb(YUV, YUV_TO_RGB_MSDN);
	OutColor.w = 1.0f;
}


// shader to convert a YVYU texture to RGBA
void YVYUConvertPS(
	float4 InPosition : SV_POSITION,
	float2 InUV : TEXCOORD0,
	out float4 OutColor : SV_Target0)
{
	float4 YVYUB = YVYUConvertUB.YVYUTexture.Sample(YVYUConvertUB.YVYUSamplerB, float2(InUV.x, InUV.y));
	float4 YVYUP = YVYUConvertUB.YVYUTexture.Sample(YVYUConvertUB.YVYUSamplerP, float2(InUV.x, InUV.y));

	float Pos = 2.0f * InUV.x * YVYUConvertUB.Width;
	float3 YUV;

	YUV.x = (floor(Pos % 2.0f) == 0) ? YVYUP.z : YVYUP.x;
	YUV.yz = YVYUB.wy;

	OutColor.xyz = YuvToRgb(YUV, YUV_TO_RGB_MSDN);
	OutColor.w = 1.0f;
}
