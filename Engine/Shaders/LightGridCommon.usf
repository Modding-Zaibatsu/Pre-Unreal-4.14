/*=============================================================================
	LightGridCommon.usf
=============================================================================*/

Buffer<uint> NumCulledLightsGrid;
Buffer<uint> CulledLightDataGrid;
Buffer<float4> ForwardLocalLightBuffer;

// ISR copies
Buffer<uint> InstancedNumCulledLightsGrid;
Buffer<uint> InstancedCulledLightDataGrid;
Buffer<float4> InstancedForwardLocalLightBuffer;

struct LightGridData
{
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	int3 CulledGridSize;
};

LightGridData GetLightGridData(uint EyeIndex)
{
	LightGridData Result;

	BRANCH
	if (EyeIndex == 0)
	{
		Result.LightGridPixelSizeShift = ForwardGlobalLightData.LightGridPixelSizeShift;
		Result.LightGridZParams = ForwardGlobalLightData.LightGridZParams;
		Result.CulledGridSize = ForwardGlobalLightData.CulledGridSize;
	}
	else
	{
		Result.LightGridPixelSizeShift = InstancedForwardGlobalLightData.LightGridPixelSizeShift;
		Result.LightGridZParams = InstancedForwardGlobalLightData.LightGridZParams;
		Result.CulledGridSize = InstancedForwardGlobalLightData.CulledGridSize;
	}

	return Result;
}

uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth, uint EyeIndex)
{
	const LightGridData GridData = GetLightGridData(EyeIndex);
	uint ZSlice = (uint)(max(0, log2(SceneDepth * GridData.LightGridZParams.x + GridData.LightGridZParams.y) * GridData.LightGridZParams.z));
	ZSlice = min(ZSlice, (uint)(GridData.CulledGridSize.z - 1));
	uint3 GridCoordinate = uint3(PixelPos >> GridData.LightGridPixelSizeShift, ZSlice);
	uint GridIndex = (GridCoordinate.z * GridData.CulledGridSize.y + GridCoordinate.y) * GridData.CulledGridSize.x + GridCoordinate.x;
	return GridIndex;
}

uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth)
{
	return ComputeLightGridCellIndex(PixelPos, SceneDepth, 0);
}