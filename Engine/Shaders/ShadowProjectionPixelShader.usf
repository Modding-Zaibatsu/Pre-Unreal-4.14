// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	ShadowProjectionPixelShader.usf: Pixel shader for projecting a shadow depth buffer onto the scene.
=============================================================================*/
#ifndef FORCE_FLOATS
// TODO: remove this requirement: Iphone6/Metal needs full float for the depth comparison.
#define FORCE_FLOATS (COMPILER_METAL)
#endif

#include "Common.usf"

#ifndef USE_FADE_PLANE
	#define USE_FADE_PLANE 0
#endif

#ifndef SHADOW_QUALITY
	#define SHADOW_QUALITY 6
#endif

#if FEATURE_LEVEL >= FEATURE_LEVEL_SM5
	// Gather() is supported
	#define FEATURE_GATHER4 1
#else
	// Gather() is not supported
	#define FEATURE_GATHER4 0
#endif

#include "ShadowProjectionCommon.usf"
#include "ShadowFilteringCommon.usf"
#include "DeferredShadingCommon.usf"
#include "DynamicLightingCommon.usf"

float ShadowFadeFraction;
float ShadowSharpen;
float4x4 ScreenToShadowMatrix;
// .x:DepthBias, y: MaxSubjectZ - MinSubjectZ
float2 ProjectionDepthBiasParameters;

#if USE_FADE_PLANE
	float FadePlaneOffset;
	float InvFadePlaneLength;
#endif

float4 ModulatedShadowColor;
float4 ShadowTileOffsetAndSize;

float3 ModulatedShadowBlendOp(float3 Source)
{
#if (COMPILER_GLSL_ES2)
	half4 Dest = FramebufferFetchES2();
	Dest.rgb = Decode32BPPHDR(Dest).rgb;
#else
	half4 Dest = half4(0, 0, 0, 0);
#endif
	return Source.rgb*Dest.rgb;
}

#if FORWARD_SHADING

float GetLightInfluenceMask(float2 ScreenPosition, float SceneDepth)
{
	float4 HomogeneousWorldPosition = mul(float4(ScreenPosition.xy * SceneDepth, SceneDepth, 1), View.ScreenToWorld);
	float3 WorldPosition = HomogeneousWorldPosition.xyz / HomogeneousWorldPosition.w;

	float LightRadiusMask = 1;
	float SpotFalloff = 1;

	if (DeferredLightUniforms.LightInvRadius > 0)
	{
		float3 ToLight = DeferredLightUniforms.LightPosition - WorldPosition;
		float DistanceSqr = dot(ToLight, ToLight);
		float3 L = ToLight * rsqrt(DistanceSqr);

		if (DeferredLightUniforms.LightFalloffExponent == 0)
		{
			LightRadiusMask = Square(saturate( 1 - Square(DistanceSqr * Square(DeferredLightUniforms.LightInvRadius))));
		}
		else
		{
			LightRadiusMask = RadialAttenuation(ToLight * DeferredLightUniforms.LightInvRadius, DeferredLightUniforms.LightFalloffExponent);
		}

		if (DeferredLightUniforms.SpotAngles.x > -2.0f)
		{
			SpotFalloff = SpotAttenuation(L, -DeferredLightUniforms.NormalizedLightDirection, DeferredLightUniforms.SpotAngles);
		}
	}

	return LightRadiusMask * SpotFalloff > 0.0f ? 1.0f : 0.0f;
}

#endif

/**
* Entry point for uniform manual PCF that supports lights using normal shadows.
*/
EARLYDEPTHSTENCIL
void Main(
	in float4 SVPos : SV_POSITION,
	out float4 OutColor : SV_Target0
	)
{
	float2 ScreenUV = float2( SVPos.xy * View.BufferSizeAndInvSize.zw );
	float SceneW = CalcSceneDepth( ScreenUV );
	float2 ScreenPosition = ( ScreenUV.xy - View.ScreenPositionScaleBias.wz ) / View.ScreenPositionScaleBias.xy;
	float4 ShadowPosition = mul(float4(ScreenPosition.xy * SceneW,SceneW,1), ScreenToShadowMatrix);

	ShadowPosition.xy /= ShadowPosition.w;

#if MODULATED_SHADOWS
	// UE-29083 : work around precision issues with ScreenToShadowMatrix on low end devices.
	ShadowPosition.xy *= ShadowTileOffsetAndSize.zw;
	ShadowPosition.xy += ShadowTileOffsetAndSize.xy;
#endif

	// Clamp pixel depth in light space for shadowing opaque, because areas of the shadow depth buffer that weren't rendered to will have been cleared to 1
	// We want to force the shadow comparison to result in 'unshadowed' in that case, regardless of whether the pixel being shaded is in front or behind that plane
	float LightSpacePixelDepthForOpaque = min(ShadowPosition.z, 0.99999f);
	// Must not clamp for SSS shadowing, the subsurface gradient must continue past the far plane
	float LightSpacePixelDepthForSSS = ShadowPosition.z;


	float Shadow = 1;
	float SSSTransmission = 1;
	
	float BlendFactor = 1;

#if APPLY_TRANSLUCENCY_SHADOWS
	
	Shadow = CalculateTranslucencyShadowing(ShadowPosition.xy, ShadowPosition.z);

#else

	// For debugging
	#define UNFILTERED_SHADOW_PROJECTION 0
	#if UNFILTERED_SHADOW_PROJECTION

		Shadow = LightSpacePixelDepthForOpaque < Texture2DSampleLevel(ShadowDepthTexture, ShadowDepthTextureSampler, ShadowPosition.xy, 0).r;

	#else

		FPCFSamplerSettings Settings;

		Settings.ShadowDepthTexture = ShadowDepthTexture;
		Settings.ShadowDepthTextureSampler = ShadowDepthTextureSampler;
		Settings.ShadowBufferSize = ShadowBufferSize;
		Settings.TransitionScale = SoftTransitionScale.z;
		Settings.SceneDepth = LightSpacePixelDepthForOpaque;
		Settings.bSubsurface = false;
		Settings.DensityMulConstant = 0;
		Settings.ProjectionDepthBiasParameters = 0;

		Shadow = ManualPCF(ShadowPosition.xy, Settings);

	#endif
		
	#if USE_FADE_PLANE
		// Create a blend factor which is one before and at the fade plane, and lerps to zero at the far plane.
		BlendFactor = 1.0f - saturate((SceneW - FadePlaneOffset) * InvFadePlaneLength);
	#endif

	#if FEATURE_LEVEL >= FEATURE_LEVEL_SM4 && !FORWARD_SHADING

		FGBufferData GBufferData = GetGBufferData(ScreenUV);

		BRANCH
		if (IsSubsurfaceModel(GBufferData.ShadingModelID))
		{
			float Opacity = GBufferData.CustomData.a;
			// Derive density from a heuristic using opacity, tweaked for useful falloff ranges and to give a linear depth falloff with opacity
			float Density = -.05f * log(1 - min(Opacity, .999f));
			if( GBufferData.ShadingModelID == SHADINGMODELID_HAIR || GBufferData.ShadingModelID == SHADINGMODELID_EYE )
			{
				Opacity = 1;
				Density = 1;
			}
			//@todo - Use a larger kernel filter based on material opacity
			// This is not being done currently because a varying opacity causes discontinuities in the shadow result
			// Note: Snapping based on the largest size kernel is done in FProjectedShadowInfo::FProjectedShadowInfo, MaxDownsampleFactor is set to 4
			// Only factors of MaxDownsampleFactor will be stable
			float SquareRootFilterScale = lerp(1.999f, 0, Opacity);
			int SquareRootFilterScaleInt = SquareRootFilterScale + 1;

			#if UNFILTERED_SHADOW_PROJECTION
				float ShadowMapDepth = Texture2DSampleLevel(ShadowDepthTexture, ShadowDepthTextureSampler, ShadowPosition.xy, 0).x;
				SSSTransmission = CalculateSubsurfaceOcclusion(Density, LightSpacePixelDepthForSSS, ShadowMapDepth.xxx).x;
			#else
		
				// default code path
				FPCFSamplerSettings Settings;
				
				Settings.ShadowDepthTexture = ShadowDepthTexture;
				Settings.ShadowDepthTextureSampler = ShadowDepthTextureSampler;
				Settings.ShadowBufferSize = ShadowBufferSize;
				Settings.TransitionScale = SoftTransitionScale.z;
				Settings.SceneDepth = LightSpacePixelDepthForSSS + ProjectionDepthBiasParameters.x;
				Settings.bSubsurface = true;
				Settings.DensityMulConstant = Density * ProjectionDepthBiasParameters.y;
				Settings.ProjectionDepthBiasParameters = ProjectionDepthBiasParameters;
				
				// ideally we use a larger filter kernel for SSSbut as Gather4 makes that harder
				SSSTransmission = ManualPCF(ShadowPosition.xy, Settings); 
			#endif
		}

	#endif
	
#endif
		
	Shadow = saturate( (Shadow - 0.5) * ShadowSharpen + 0.5 );

	// 0 is shadowed, 1 is unshadowed
	// RETURN_COLOR not needed unless writing to SceneColor;
	float FadedShadow = lerp(1.0f, Square(Shadow), ShadowFadeFraction);

#if FORWARD_SHADING
	float LightInfluenceMask = GetLightInfluenceMask(ScreenPosition, SceneW);
	// Constrain shadowing from this light to pixels inside the light's influence, since other non-overlapping lights are packed into the same channel
	FadedShadow = lerp(1, FadedShadow, LightInfluenceMask);
	// Write into all channels, the write mask will constrain to the correct one
	OutColor = EncodeLightAttenuation(FadedShadow);
#else
	float FadedSSSShadow = lerp(1.0f, Square(SSSTransmission), ShadowFadeFraction);

	// the channel assignment is documented in ShadowRendering.cpp (look for Light Attenuation channel assignment)
	OutColor = EncodeLightAttenuation(half4(FadedShadow, FadedSSSShadow, FadedShadow, FadedSSSShadow));
#endif

	#if USE_FADE_PLANE
		// When the fade plane is in use for CSMs, we output the fade value in the alpha channel for blending.
		OutColor.a = BlendFactor;
	#endif

#if MODULATED_SHADOWS
		OutColor.rgb = lerp(ModulatedShadowColor.rgb, float3(1, 1, 1), FadedShadow);
		OutColor.a = 0;
#if (ES2_PROFILE || ES3_1_PROFILE) && ( (COMPILER_GLSL_ES2) || (MOBILE_EMULATION) )
		// Do decal blending if encoding requires it.
		if (GetHDR32bppEncodeMode() == HDR_ENCODE_RGBA)
		{
			OutColor.rgb = ModulatedShadowBlendOp(OutColor.rgb);
			// do 32bpp hdr encoding for mobile if required.
			// Do not mosaic encode result as this will break during hw modulated blend op.
			OutColor = Encode32BPPHDR(OutColor, SVPos.xy);
		}
#endif
#endif
}

#if FEATURE_LEVEL >= FEATURE_LEVEL_SM4

float4 LightPositionAndInvRadius;
// .x:DepthBias, y: unused
float2 PointLightDepthBiasParameters;

/** Pixel shader for projecting a one pass point light shadow from a cube map. */
void MainOnePassPointLightPS(
	in float4 SVPos : SV_POSITION,
	out float4 OutColor : SV_Target0
	)
{
	float2 ScreenUV = float2( SVPos.xy * View.BufferSizeAndInvSize.zw );
	float SceneW = CalcSceneDepth( ScreenUV );
	float2 ScreenPosition = ( ScreenUV.xy - View.ScreenPositionScaleBias.wz ) / View.ScreenPositionScaleBias.xy;
	float4 HomogeneousWorldPosition = mul(float4(ScreenPosition.xy * SceneW, SceneW, 1), View.ScreenToWorld);
 	float3 WorldPosition = HomogeneousWorldPosition.xyz / HomogeneousWorldPosition.w;

	// For debugging
#define OUTPUT_CUBE_SHADOW_DEPTH_NO_FILTERING 0
#if OUTPUT_CUBE_SHADOW_DEPTH_NO_FILTERING
	float3 LightVector = LightPositionAndInvRadius.xyz - WorldPosition.xyz;
	// Note: point light shadow depth is Z / W, not linear
	float Shadow = TextureCubeSampleLevel(ShadowDepthCubeTexture, ShadowDepthTextureSampler, LightVector, 0);
#else
 	float Shadow = CubemapHardwarePCF(WorldPosition, LightPositionAndInvRadius.xyz, LightPositionAndInvRadius.w, PointLightDepthBiasParameters.x);

	Shadow = saturate( (Shadow - 0.5) * ShadowSharpen + 0.5 );
#endif

	float FadedShadow = lerp(1.0f, Square(Shadow), ShadowFadeFraction);

#if FORWARD_SHADING
	float LightInfluenceMask = GetLightInfluenceMask(ScreenPosition, SceneW);
	FadedShadow = lerp(1, FadedShadow, LightInfluenceMask);
	OutColor = EncodeLightAttenuation(FadedShadow);
#else
	// Light attenuation buffer has been remapped. 
	// Point light shadows now write to the blue channel.
	OutColor.b = EncodeLightAttenuation(FadedShadow);
	OutColor.rga = 1;
	// SSS is not correctly handled but at least it should be shadowed
	OutColor.a = OutColor.b;
#endif
}
 
#endif
