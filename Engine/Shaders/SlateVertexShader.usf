// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.


#include "Common.usf"
#include "GammaCorrectionCommon.usf"
#include "SlateShaderCommon.usf"

float4x4 ViewProjection;

float SwitchVerticalAxisMultiplier;

VertexToPixelInterpolants Main(
	in float4 InTextureCoordinates : ATTRIBUTE0,
	in float2 InMaterialTextureCoordinates : ATTRIBUTE1,
	in float2 InPosition : ATTRIBUTE2,
	in float2 InClipOrigin : ATTRIBUTE3,
	in float4 InClipExtents : ATTRIBUTE4,
	in float4 InColor : ATTRIBUTE5
#if USE_SLATE_INSTANCING
	, in float4 InstanceParam : ATTRIBUTE6
#endif
	)
{
	VertexToPixelInterpolants VOut = (VertexToPixelInterpolants)0;

	float4 WorldPosition = float4(InPosition.xy,0,1);
	// save off the original input position value, Line AA will require this
	VOut.OriginalPosition = WorldPosition;

#if (!(ES2_PROFILE || ES3_1_PROFILE)) || USE_MATERIALS
	InColor.rgb = sRGBToLinear(InColor.rgb);
#endif

	float4 FinalVertexColor = InColor FCOLOR_COMPONENT_SWIZZLE;

	VOut.MaterialTexCoords = InMaterialTextureCoordinates;
	VOut.ClipOriginAndPos = float4(InClipOrigin, InPosition.xy);
	VOut.ClipExtents = InClipExtents;
	VOut.Color = FinalVertexColor;
	VOut.TextureCoordinates[0] = InTextureCoordinates;

#if USE_MATERIALS
	FMaterialVertexParameters VertexParameters = (FMaterialVertexParameters)0;
	VertexParameters.WorldPosition = WorldPosition.xyz;

	VertexParameters.VertexColor = FinalVertexColor;

	#if NUM_MATERIAL_TEXCOORDS_VERTEX

#if !USE_SLATE_INSTANCING
		float4 InstanceParam = float4(0, 0, 0, 0);
#endif
		float2 UVArrays[8] =
		{
			InTextureCoordinates.xy,
			InTextureCoordinates.zw,
			InstanceParam.xy,
			InstanceParam.zw,
			InMaterialTextureCoordinates,
			InClipOrigin,
			InClipExtents.xy,
			InClipExtents.zw
		};

		UNROLL
		for( int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++ )
		{
			VertexParameters.TexCoords[CoordinateIndex] = UVArrays[CoordinateIndex];
		}

		#if HAS_MATERIAL_TEXCOORDS

			float2 CustomizedUVs[NUM_SLATE_TEXCOORDS];
			GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);

			#if ES2_PROFILE
				#if NUM_SLATE_TEXCOORDS == 1
					VOut.TextureCoordinates[0].xy = CustomizedUVs[0];
				#elif NUM_SLATE_TEXCOORDS >= 2
					VOut.TextureCoordinates[0].xy = CustomizedUVs[0];
					VOut.TextureCoordinates[0].zw = CustomizedUVs[1];
				#endif
			#else
				UNROLL
				for( int CoordinateIndex = 0; CoordinateIndex < NUM_SLATE_TEXCOORDS; CoordinateIndex++ )
				{
					FLATTEN
					if (CoordinateIndex % 2)
					{
						VOut.TextureCoordinates[CoordinateIndex / 2].zw = CustomizedUVs[CoordinateIndex];
					}
					else
					{
						VOut.TextureCoordinates[CoordinateIndex / 2].xy = CustomizedUVs[CoordinateIndex];
					}
				}
			#endif
		#endif // HAS_MATERIAL_TEXCOORDS
	#endif // NUM_MATERIAL_TEXCOORDS_VERTEX

	#if HAS_SCREEN_POSITION
		WorldPosition.xyz = GetMaterialWorldPositionOffset(VertexParameters);
	#endif

#endif // USE_MATERIALS

	VOut.Position = mul(WorldPosition, ViewProjection);

#if (ES2_PROFILE && COMPILER_GLSL_ES2) || (ES3_1_PROFILE && COMPILER_GLSL_ES3_1)
	// @todo-mobile: Fix this in the projection matrix
	VOut.Position.y *= SwitchVerticalAxisMultiplier;
#endif //(ES2_PROFILE && COMPILER_GLSL_ES2) || (ES3_1_PROFILE && COMPILER_GLSL_ES3_1)

	return VOut;
}
