INTSourceChangelist:2714483
Availability: Public
Title:3. 쏠 수 있는 바위 스폰하기
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/HowTo
Description:이번 단계에서는 플레이어가 버튼을 누르면 스폰 위치 중 하나에서 쏠 수 있는 바위를 스폰시키도록 하겠습니다.
version: 4.9


[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[예전 단계](Engine\Blueprints\HowTo\BPHT_2 "%Engine\Blueprints\HowTo\BPHT_2:title%") 
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[비법 홈](Engine\Blueprints\HowTo "%Engine\Blueprints\HowTo:Title%")
	[/PARAM]
	[PARAM:next]
	[다음 단계](Engine\Blueprints\HowTo\BPHT_4 "%Engine\Blueprints\HowTo\BPHT_4:title%") 
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

이번 단계에서는, 플레이어가 버튼을 누르면 (다른 조건은 충족되었다 가정하고) 쏠 수 있는 바위를 스폰시킬 수 있도록 하는 로직을 구성하겠습니다. 우리 레벨에서, 스폰 지점을 몇 개 정의하고, 그 중 하나의 위치를 구하여 캐릭터 블루프린트로 전송시키는 (다음 단계에서 만들) **레벨 블루프린트** 의 이벤트를 발동시키는 **이벤트 디스패처** 를 사용할 것입니다. 


먼저, 플레이어가 키를 눌러 쏠 수 있는 바위를 스폰시킬 수 있도록 합시다.

1.	**FirstPersonCharacter** 블루프린트 안에서 그래프의 빈 공간 아무데나 **우클릭** 한 다음 **F** Key Event 를 추가합니다.

	![](FKeyEvent.png)

1.	**B** 키를 누르고 그래프에 **좌클릭** 하여 **Branch** (분기) 노드를 추가합니다.

1.	**IsActive** 변수를 **Alt** 드래그한 다음 체크박스를 체크하고 아래와 같이 연결합니다.

	![](BranchAdded.png)

1.	**Control** 키를 누르고 **IsActive** 와 **Pulls** 변수를 끌어놓습니다.

1.	**IsActive** 를 **NOT Boolean** (true 아님) 노드에, **Pulls** 를 (0 으로 설정된) **>** 노드에 연결합니다.

	![](TwoNodesAdded.png)
	[REGION:note]
	**NOT Boolean** 노드는 엔진 예전 버전의 **!=** 노드를 가리킵니다.
	[/REGION]

1.	두 출력 모두 **And** 노드에 연결한 다음 **Branch** 의 **Condision** 에 물려줍니다.

	![](AndAdded.png)

	여기서 **IsActive** 라는 변수가 True 가 아닌지 & 플레이어의 **Pulls** 카운트가 0 보다 큰지 검사하여 플레이어가 바위를 스폰시킬 수 있는지 결정하는 로직을 구성합니다. 이 두 조건 모두 True 인 경우, **Branch** (분기) 노드의 **True** 쪽을 타고 내려가 바위를 스폰시킵니다 (스크립트 그 쪽 부분은 이제 곧 구성해 줄 것입니다).

1.	**Pulls** 변수를 **Alt** 드래그한 다음 **Set IsActive** 노드 뒤에 연결해 줍니다.

1.	**Pulls** 변수를 **Control** 드래그한 다음 (1 로 설정된) **Int - Int** 노드에 연결한 뒤 **Set Pulls** 에 연결합니다. 

	![](PullsSet.png)

1.	**컴파일** 을 클릭한 다음 **Set Pulls** 노드를 끌어놓고 **ResetShots** Custom Event 를 추가합니다.

	![](CallCustomEvent.png)

	구성 상태가 아래와 비슷할 것입니다.

	![](ScriptBeforeEventDispatcher.png)

	언제 플레이어가 바위를 스폰시킬 수 있는지에 대한 로직이 구성되었으니, 이제 레벨과 통신하여 스폰 위치를 구해와야 합니다. 그 작업은 **F** 키가 눌리면 호출되는 **이벤트 디스패처** 를 사용해서 해 주겠습니다. **레벨 블루프린트** 는 이벤트 디스패처를 기다리다가 호출되면 자체 이벤트를 발동시켜 스폰 지점 중 하나의 위치를 구하여 캐릭터 블루프린트로 반환시킵니다.

1.	**내 블루프린트** 창에서 **+ 이벤트 디스패처** 버튼을 클릭합니다.

	![](AddEventDispatcher.png)

1.	새로운 이벤트 디스패처를 클릭하여 선택한 채로 **F2** 키를 눌러 이름을 **GetSpawnLocation** 으로 변경해 줍니다. 

	![](RenameEventDispatcher.png)

1.	그래프에서 **Reset Shots** 함수 다음 **Call GetSpawnLocation** 노드를 추가합니다.

	![](CallEventDispatcher.png)

	이벤트 디스패처가 추가되며, 노드 우상단에 봉투 모양 아이콘이 표시되어 있습니다.

	![](NewNodeAdded.png)

1.	**GetSpawnLocation** 를 끌어놓고 **Spawn Actor from Class** 노드를 추가합니다.

 	![](SpawnActorNode.png)

1.	**Spawn Actor** 노드에서 **Class** 를 **BP_Rock** 로 설정합니다. 

1.	또한 **Spawn Actor** 노드에서 **SpawnLocation** 변수를 끌어 **SpawnTransform** 핀 위에 놓습니다.

	![](SpawnActorComplete.png)

	쏠 수 있는 바위를 스폰시키고, 그 바위를 스폰시킬 **트랜스폼** 위치를 받아오도록 하는 캐릭터 블루프린트 구성이 완료되었습니다.

다음 단계에서는 **레벨 블루프린트** 를 사용하여 캐릭터 블루프린트의 이벤트 디스패처가 호출되면 스폰 지점 중 하나의 위치를 구한 다음 그 정보를 캐릭터 블루프린트에 전달하도록 하겠습니다 (즉 캐릭터 블루프린트에서 레벨 블루프린트로, 그리고 다시 캐릭터 블루프린트로 정보를 전달하게 됩니다).





<!--
예전 페이지에서 **이벤트 디스패처** 를 사용하여 **레벨 블루프린트** 의 **Begin Play** 에 바인딩된 **이벤트** 를 호출했습니다. 다음으로, 액터가 스폰되면 **이벤트** 를 **바인딩** 하는 법에 대해 알아보겠습니다.
	
[OBJECT:TopicList]
	[PARAM:title]
		스폰시 이벤트 바인딩하기
	[/PARAM]
	[PARAM:description]
	액터 스폰시 바인딩할 수 있는 **이벤트** 가 여럿 있기는 하지만, 여기서는 플레이어가 바위에 붙은 트리거에 겹칠 때 무언가 다른 작업을 할 수 있도록, **On Actor Begin Overlap Event** 를 사용하도록 하겠습니다.

	[/PARAM]
[/OBJECT]

1.	**콘텐츠 브라우저** 에서 **Game/Blueprints** 아래 **MyCharacter** 블루프린트를 **더블클릭** 하여 엽니다.

1.	**SpawnActor BP_Rock_C** 노드의 **Return Value** 를 끌어 놓은 다음 **Assign On Actor Begin Overlap** 이벤트 디스패처 노드를 검색하여 추가합니다.

	![](BPHT3_1.png)

1.	**이벤트** 에 **OverlapRock** 과 같은 이름을 짓습니다.

1.	**SpawnActor BP_Rock_C** 노드의 **Return Value** 를 끌어 놓은 다음 **Get Destructible 1** 노드를 검색해 추가합니다.

	![](BPHT3_2.png)

	_그러면 **BP_Rock** 블루프린트에서 디스트럭터블 메시를 구해오고, 날려버린다든가 하는 작업을 할 수가 있습니다._

1.	**Destructible 1** 핀을 끌어 놓은 다음 **Apply Radius Damage** 노드를 검색하여 추가합니다.

	![](BPHT3_3.png)

	_**Radius Damage** 노드는 폭발물 기반, **Apply Damage** 노드는 탄환 기반 대미지에 좋습니다._

1.	**OverlapRock** 이벤트를 **Apply Radius Damage** 노드에 연결한 다음 **Base Damage** 와 **Impulse Strength** 를 **10000** 으로 설정합니다. 

	![](BPHT3_4.png)

1.	**Destructible 1** 노드를 다시 끌어 놓은 다음 **Get World Location** 노드를 검색해 추가합니다.

	![](BPHT3_5.png)

1.	**Get World Location** 노드를 **Apply Radius Damage** 노드의 **Hurt Origin** 핀에 연결합니다.

	![](BPHT3_6.png)(w:740)

	_이제부터 바위에 접근하면 폭발하게 됩니다. 이제 파티클 이펙트를 추가하면 됩니다._

1.	**Apply Radius Damage** 출력 핀을 끌어 놓은 다음 **Delay** 노드를 검색하여 추가하고 **0.4** 로 설정합니다. 

	![](BPHT3_7.png)

1.	(**Class** 가 **Blueprint_Effect_Fire** 로 설정된) **SpawnActor from Class** 노드를 추가한 다음 **Spawn Location** 변수를 추가하고 **Spawn Transform** 에 연결합니다. 

	![](BPHT3_8.png)(w:740)

	_이렇게 하면 바위 폭발 0.4 초 후 바위 스폰 지점과 같은 곳에 화염 이펙트가 스폰됩니다._

1.	**내 블루프린트** 창에서 **변수 추가** 버튼을 눌러 **불리언** 변수를 추가하고 이름을 **isSpawnActive** 이라 변경합니다. 

	![](BPHT3_9.png)

1.	**Alt** 키를 누른 채 **isSpawnActive** 변수를 끌어놓은 뒤, **Bind Event** 노드에 연결하고서, 체크박스를 클릭하여 **True** 로 설정합니다.

	![](BPHT3_10.png)

	_**Bind Event** 이후 **블루프린트** 코드 실행을 계속해도 됩니다. 여기서는 변수를 True 로 설정해주고 있습니다._

	_바위가 스폰되었는지 검사한 다음, 그렇다면 먼저 것이 파괴될 때까지 다시 스폰되지 않도록 합니다._

1.	**Set Is Spawn Active** 노드를 복사하여 **SpawnActor Blueprint_Effect_Fire_C** 노드 뒤에 붙여넣은 다음, 체크박스가 **False** 가 되도록 체크를 해제합니다.

	![](BPHT3_11.png)

1.	**F** 키 노드를 끌어 놓은 다음 **분기** 노드를 검색하여 추가합니다.

	![](BPHT3_12.png)

	_이렇게 하면 **True** 또는 **False** 검사를 한 뒤, 그 결과에 따라 이쪽 또는 저쪽을 실행합니다._

1.	**Ctrl** 키를 누른 채 **isSpawnActive** 변수를 끌어 놓고, 거기서 다시 끌어 놓은 다음 **==** (***Equal Boolean**) 노드를 검색하여 추가합니다.

	![](BPHT3_13.png)

1.	**==** 노드의 출력을 **분기** 의 **Condition** 에 연결합니다 (**==** 노드는 체크해제 상태로 놔둡니다).

	[REGION:lightbox]
	[![](BPHT3_14.png)(w:740)](BPHT3_14.png)
	[/REGION]

	_완성된 시퀀스 모습은 이와 비슷할 것입니다. 클릭하면 원래 크기로 보입니다._

1.	블루프린트를 **컴파일** 및 **저장** 한 뒤 **에디터에서 플레이** 합니다.

	![](GIF3.gif)(convert:false)

	_이제 **F** 키를 막 눌러도 바위가 한 번에 하나만 스폰되는 것을, 바위에 접근하면 터지면서 화염 이펙트를 남기는 것을 볼 수 있습니다.

다음 글에서는, 캐릭터에서 (생명력 표시와 같은] HUD 에 정보를 전달하는 법을 알아보겠습니다.

-->


%Steps%










