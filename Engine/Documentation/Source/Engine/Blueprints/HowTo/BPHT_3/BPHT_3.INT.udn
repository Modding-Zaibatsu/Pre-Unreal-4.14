Availability: Public
Title:3. Spawning the Shootable Rock
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/HowTo
Description:In this step we will allow the player to press a button to spawn our shootable rock at one of our spawn locations. 
version: 4.9


[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[Previous Step](Engine\Blueprints\HowTo\BPHT_2 "%Engine\Blueprints\HowTo\BPHT_2:title%") 
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[How To Home](Engine\Blueprints\HowTo "%Engine\Blueprints\HowTo:Title%")
	[/PARAM]
	[PARAM:next]
	[Next Step](Engine\Blueprints\HowTo\BPHT_4 "%Engine\Blueprints\HowTo\BPHT_4:title%") 
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

In this step, we will set up the logic for allowing the player to press a button to spawn a shootable rock (providing other conditions are met). In our level, we have defined some spawn points and in order to get the location of one of those, we will use an **Event Dispatcher** which will fire off an event in our **Level Blueprint** (which we will create in the next step) to get one of those locations and send it to our Character Blueprint. 


First, let us allow the player to spawn the shootable rock by key press. 

1.	Inside the **FirstPersonCharacter** Blueprint, **Right-click** somewhere in an empty space in the graph and add an **F** Key Event. 

	![](FKeyEvent.png)

1.	Hold **B** and **Left-click** in the graph to create a **Branch** node. 

1.	**Alt** drag in the **IsActive** variable and check the checkbox then connect as shown below. 

	![](BranchAdded.png)

1.	Hold **Control** and drag in the **IsActive** and **Pulls** variables. 

1.	Connect the **IsActive** to a **NOT Boolean** node (Not true) and the **Pulls** to a **>** node (set to 0). 

	![](TwoNodesAdded.png)
	[REGION:note]
	In older versions of the engine, the **NOT Boolean** node is referred to as the **!=** node
	[/REGION]

1.	Connect both outputs to an **And** node and feed it into the **Condition** of the **Branch**. 

	![](AndAdded.png)

	Here, we set up the logic to determine if the player can spawn a rock by checking if a variable called **IsActive** is not true and if the player's **Pulls** count is greater than 0. If both those statements are true, we will proceed down the **True** side of the **Branch** node and spawn the rock (well, that part of the script still needs to be set up which we will do below). 

1.	**Alt** drag in the **Pulls** variable and connect it following the **Set IsActive** node.

1.	**Control** drag in the **Pulls** variable and connect it to a **Int - Int** node (set to 1) and connect to **Set Pulls**. 

	![](PullsSet.png)

1.	Click **Compile**, then off the **Set Pulls** node add the **ResetShots** Custom Event. 

	![](CallCustomEvent.png)

	Your setup should look similar to below. 

	![](ScriptBeforeEventDispatcher.png)

	Our logic for when the player can spawn a rock is set, now we need to communicate with the level to get a spawn location. We will do this by using an **Event Dispatcher** that is called when **F** is pressed. The **Level Blueprint** will listen for the Event Dispatcher and when it is called, will fire its own event that will get the location of one of our spawn points and pass that back to our Character Blueprint. 

1.	Click the **+ Event Dispatcher** button in the **My Blueprint** window. 

	![](AddEventDispatcher.png)

1.	Click the new Event Dispatcher and press **F2** with it selected to rename it and call it **GetSpawnLocation**. 

	![](RenameEventDispatcher.png)

1.	In the graph following the **Reset Shots** function, add the **Call GetSpawnLocation** node. 

	![](CallEventDispatcher.png)

	The Event Dispatcher will be added which is denoted by the envelope icon in the upper-right corner of the node. 

	![](NewNodeAdded.png)

1.	Off the **GetSpawnLocation** node, add a **Spawn Actor from Class** node. 

 	![](SpawnActorNode.png)

1.	On the **Spawn Actor** node, set the **Class** to **BP_Rock**. 

1.	Also on the **Spawn Actor** node, drag-and-drop the **SpawnLocation** variable onto the **SpawnTransform** pin. 

	![](SpawnActorComplete.png)

	Our Character Blueprint is now set up to spawn a shootable rock and receive a **Transform** location to spawn the rock at. 

In the next step, we will use the **Level Blueprint** to get the location of one of our spawn points and pass that information to our Character Blueprint when our Character Blueprint's Event Dispatcher is called (so we are going from Character Blueprint to Level Blueprint and back to Character Blueprint, passing information between them). 





<!--
On the previous page, we used an **Event Dispatcher** to call an **Event** that was binded on **Begin Play** in the **Level Blueprint**. Next, we will learn how you can **Bind** an **Event** when an Actor is spawned. 
	
[OBJECT:TopicList]
	[PARAM:title]
		Binding Events On Spawn
	[/PARAM]
	[PARAM:description]
	While there are different **Events** that you can bind when the Actor spawns, for our purposes we are going to bind an **On Actor Begin Overlap Event** to our rock that is spawned so that we may do something when the player overlaps the trigger attached to the rock.

	[/PARAM]
[/OBJECT]

1.	In the **Content Browser** under **Game/Blueprints**, **Double-click** on and open the **MyCharacter** Blueprint. 

1.	Drag off the **Return Value** of the **SpawnActor BP_Rock_C** node and search for and add the **Assign On Actor Begin Overlap** Event Dispatcher node.  

	![](BPHT3_1.png)

1.	Give the **Event** that is added a name, such as **OverlapRock**. 

1.	Drag off the **Return Value** of the **SpawnActor BP_Rock_C** node and search for and add the **Get Destructible 1** node. 

	![](BPHT3_2.png)

	_This will get the destructible mesh component from the **BP_Rock** Blueprint so that we may do something with it, in this case, blow it up._

1.	Drag off the **Destructible 1** pin and search for and add the **Apply Radius Damage** node. 

	![](BPHT3_3.png)

	_The **Radius Damage** node is good for triggering exploding objects while the **Apply Damage** node is good for projectile based damage._

1.	Connect the **OverlapRock** Event to the **Apply Radius Damage** node and set **Base Damage** and **Impulse Strength** to **10000**. 

	![](BPHT3_4.png)

1.	Drag off the **Destructible 1** node again and search for and add the **Get World Location** node. 

	![](BPHT3_5.png)

1.	Plug the **Get World Location** node into the **Apply Radius Damage** node's **Hurt Origin** pin. 

	![](BPHT3_6.png)(w:740)

	_At this point, the rock will explode when you approach it. Now we can add a particle effect._

1.	Drag off the **Apply Radius Damage** out pin and search for and add the **Delay** node set to **0.4**. 

	![](BPHT3_7.png)

1.	Add a **SpawnActor from Class** node (**Class** set to **Blueprint_Effect_Fire**) then add/connect the **Spawn Location** variable to the **Spawn Transform**. 

	![](BPHT3_8.png)(w:740)

	_This will tell the fire effect to spawn 0.4 seconds after the rock explodes at the same location the rock spawned at._

1.	In the **MyBlueprint** window, click the **Add Variable** button to add a **bool** variable and rename it **isSpawnActive**. 

	![](BPHT3_9.png)

1.	While holding down the **Alt** key, drag in the **isSpawnActive** variable and connect it to the **Bind Event** node, then click the checkbox to set it to **True**.

	![](BPHT3_10.png)

	_You can continue to execute **Blueprint** code following a **Bind Event**, in this case we are flagging a variable as true._

	_We are going to check if a rock is spawned and if it is, then do not let the player spawn another until the first is destroyed._

1.	Copy the **Set Is Spawn Active** node and paste it after the **SpawnActor Blueprint_Effect_Fire_C** node and uncheck the checkbox so that it is **False**.

	![](BPHT3_11.png)

1.	Drag off the **F** key node and search for and add a **Branch** node. 

	![](BPHT3_12.png)

	_This will create a **True** or **False** check, where if **True** do one thing and if **False** do another._

1.	While holding down the **Control** key, drag in the **isSpawnActive** variable then drag off it and search for and add the **==** (***Equal Boolean**) node. 

	![](BPHT3_13.png)

1.	Connect the out of the **==** node to the **Condition** on the **Branch** (leaving the **==** node unchecked). 

	[REGION:lightbox]
	[![](BPHT3_14.png)(w:740)](BPHT3_14.png)
	[/REGION]

	_Your completed sequence should look similar to above, click the image for a full view._

1.	**Compile** and **Save** the Blueprint, close it then click the **Play** in editor button. 

	![](GIF3.gif)(convert:false)

	_You should now see that when you press **F** you can only spawn one rock at a time and when you approach it, it should blow up leaving a fire effect behind._

On the next page, we will learn how to pass information from the character to a HUD (such as conveying Health). 

-->


%Steps%











