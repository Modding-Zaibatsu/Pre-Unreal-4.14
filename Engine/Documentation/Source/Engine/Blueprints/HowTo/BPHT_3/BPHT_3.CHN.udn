INTSourceChangelist:2468103
Availability: Public
Title:3. 生成可射击的岩石
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/HowTo
Description:在这个步骤中，我们会让玩家通过一个按钮在生成位置之一来生成可射击的岩石。 


[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[Previous Step](Engine\Blueprints\HowTo\BPHT_2 "%Engine\Blueprints\HowTo\BPHT_2:title%") 
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[How-To Home](Engine\Blueprints\HowTo "%Engine\Blueprints\HowTo:Title%")
	[/PARAM]
	[PARAM:next]
	[Next Step](Engine\Blueprints\HowTo\BPHT_4 "%Engine\Blueprints\HowTo\BPHT_4:title%") 
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

在这个步骤中，我们会设置让玩家通过按钮来生成可射击岩石的逻辑（假设其它条件都已满足）。 在关卡中，我们定义了一些生成点，并且为了获得这些位置之一，我们将会使用 **Event Dispatcher** （事件调度器），它会在我们的 **Level Blueprint** （关卡蓝图）中触发事件（我们会在下一步创建该事件），从而获得这些位置之一，并将其发送到我们的角色蓝图。 


首先，让我们使角色可以通过按键来生成可射击的岩石。 

1.	在 **FirstPersonCharacter** 蓝图中， **右键点击** 图表中的空白空间，然后添加一个 **F** 关键事件。 

	![](FKeyEvent.png)

1.	按住 **B** 不放，然后在图表中 **左键点击** ，从而创建 **Branch** （分支）节点。 

1.	在 **isActive** 变量中按住 **Alt** 键并拖曳，然后勾选框，并按下方显示内容进行连接。 

	![](BranchAdded.png)

1.	按住 **Control** 不放，并拖入 **isActive** 和 **Pulls** 变量。 

1.	连接 **isActive** 到 **!=** 节点（已勾选），并连接 **Pulls** 到 **>** 节点（设置为0）。 

	![](TwoNodesAdded.png)

1.	将两个输出都连接到 **And** 节点，并将其连接到 **Branch** （分支）的 **Condition** （条件）中。 

	![](AndAdded.png)

	在这里，我们设置了通过查看名称为 **isActive** 的变量是否为真，以及玩家的 **Pulls** 数量是否大于0来判断玩家是否可以生成岩石的逻辑。如果两者都为真，则我们会减少 **Branch** （分支）节点运算结果为真的数量并生成岩石（当然，这部分的脚本仍需要进行设置，请阅下文）。 

1.	按住 **Alt** 并拖入 **Pulls** 变量，然后在 **Set IsActive** 节点连接后进行连接。

1.	在按住 **Control** 不放的情况下，再次拉入 **Pulls** 变量，并将其连接到 **Int - Int** 节点（设置为 **1** ）并连接到 **Set Pulls** 。 

	![](PullsSet.png)

1.	点击 **Compile** （编译），然后关闭 **Set Pulls** 节点，添加 **ResetShots** 自定义事件。 

	![](CallCustomEvent.png)

	您的设置应该看起来类似于以下内容。 

	![](ScriptBeforeEventDispatcher.png)

	我们这样就设置完成了在玩家生成岩石时的逻辑，现在我们需要与关卡进行通信，从而获得生成位置。 我们会使用 **Event Dispatcher** （事件调度器）来执行此操作，它会在按下 **F** 时进行调用。 **Level Blueprint** （关卡蓝图）会监听事件调度器，而且当它被调用时，会触发其事件，从而获得生成点之一的位置，并将其传回角色蓝图。 

1.	点击 **MyBlueprint** 窗口中的 **Add Event Dispatchers** （添加事件调度器）按钮。 

	![](AddEventDispatcher.png)

1.	点击新事件调度器并在选择后按下 **F2** ，然后重命名为 **GetSpawnLocation** 。 

	![](RenameEventDispatcher.png)

1.	在 **Reset Shots** （重设射击次数）函数后的图表中，添加 **Call GetSpawnLocation** （调用GetSpawnLocation）节点。 

	![](CallEventDispatcher.png)

	此时将会添加事件调度器，这是由节点右上角处的信封图标来表示的。 

	![](NewNodeAdded.png)

1.	在 **GetSpawnLocation** 节点下，添加 **Spawn Actor from Class** （从类中生成Actor）节点。 

 	![](SpawnActorNode.png)

1.	在 **Spawn Actor** （生成Actor）节点上，设置 **Class** （类）为 **BP_Rock** 。 

1.	另外在 **Spawn Actor** 节点上，拖放 **SpawnLocation** 变量到 **SpawnTransform** 引脚。 

	![](SpawnActorComplete.png)

	现在我们的角色蓝图已经设置完成，可以生成可射击的岩石并获得生成岩石的 **Transform** （变换）位置。 

在下一步中，我们会使用 **Level Blueprint** （关卡蓝图）来获得生成点之一的位置，并在调用角色蓝图的事件调度器时传入该信息到角色蓝图（这样我们就可以在角色蓝图和关卡蓝图间传递信息了）。 





<!--
On the previous page, we used an **Event Dispatcher** to call an **Event** that was binded on **Begin Play** in the **Level Blueprint**. Next, we will learn how you can **Bind** an **Event** when an Actor is spawned. 
	
[OBJECT:TopicList]
	[PARAM:title]
		Binding Events On Spawn
	[/PARAM]
	[PARAM:description]
	While there are different **Events** that you can bind when the Actor spawns, for our purposes we are going to bind an **On Actor Begin Overlap Event** to our rock that is spawned so that we may do something when the player overlaps the trigger attached to the rock.

	[/PARAM]
[/OBJECT]

1.	In the **Content Browser** under **Game/Blueprints**, **Double-click** on and open the **MyCharacter** Blueprint. 

1.	Drag off the **Return Value** of the **SpawnActor BP_Rock_C** node and search for and add the **Assign On Actor Begin Overlap** Event Dispatcher node.  

	![](BPHT3_1.png)

1.	Give the **Event** that is added a name, such as **OverlapRock**. 

1.	Drag off the **Return Value** of the **SpawnActor BP_Rock_C** node and search for and add the **Get Destructible 1** node. 

	![](BPHT3_2.png)

	_This will get the destructible mesh component from the **BP_Rock** Blueprint so that we may do something with it, in this case, blow it up._

1.	Drag off the **Destructible 1** pin and search for and add the **Apply Radius Damage** node. 

	![](BPHT3_3.png)

	_The **Radius Damage** node is good for triggering exploding objects while the **Apply Damage** node is good for projectile based damage._

1.	Connect the **OverlapRock** Event to the **Apply Radius Damage** node and set **Base Damage** and **Impulse Strength** to **10000**. 

	![](BPHT3_4.png)

1.	Drag off the **Destructible 1** node again and search for and add the **Get World Location** node. 

	![](BPHT3_5.png)

1.	Plug the **Get World Location** node into the **Apply Radius Damage** node's **Hurt Origin** pin. 

	![](BPHT3_6.png)(w:740)

	_At this point, the rock will explode when you approach it. Now we can add a particle effect._

1.	Drag off the **Apply Radius Damage** out pin and search for and add the **Delay** node set to **0.4**. 

	![](BPHT3_7.png)

1.	Add a **SpawnActor from Class** node (**Class** set to **Blueprint_Effect_Fire**) then add/connect the **Spawn Location** variable to the **Spawn Transform**. 

	![](BPHT3_8.png)(w:740)

	_This will tell the fire effect to spawn 0.4 seconds after the rock explodes at the same location the rock spawned at._

1.	In the **MyBlueprint** window, click the **Add Variable** button to add a **bool** variable and rename it **isSpawnActive**. 

	![](BPHT3_9.png)

1.	While holding down the **Alt** key, drag in the **isSpawnActive** variable and connect it to the **Bind Event** node, then click the checkbox to set it to **True**.

	![](BPHT3_10.png)

	_You can continue to execute **Blueprint** code following a **Bind Event**, in this case we are flagging a variable as true._

	_We are going to check if a rock is spawned and if it is, then do not let the player spawn another until the first is destroyed._

1.	Copy the **Set Is Spawn Active** node and paste it after the **SpawnActor Blueprint_Effect_Fire_C** node and uncheck the checkbox so that it is **False**.

	![](BPHT3_11.png)

1.	Drag off the **F** key node and search for and add a **Branch** node. 

	![](BPHT3_12.png)

	_This will create a **True** or **False** check, where if **True** do one thing and if **False** do another._

1.	While holding down the **Control** key, drag in the **isSpawnActive** variable then drag off it and search for and add the **==** (***Equal Boolean**) node. 

	![](BPHT3_13.png)

1.	Connect the out of the **==** node to the **Condition** on the **Branch** (leaving the **==** node unchecked). 

	[REGION:lightbox]
	[![](BPHT3_14.png)(w:740)](BPHT3_14.png)
	[/REGION]

	_Your completed sequence should look similar to above, click the image for a full view._

1.	**Compile** and **Save** the Blueprint, close it then click the **Play** in editor button. 

	![](GIF3.gif)(convert:false)

	_You should now see that when you press **F** you can only spawn one rock at a time and when you approach it, it should blow up leaving a fire effect behind._

On the next page, we will learn how to pass information from the character to a HUD (such as conveying Health). 

-->


%Steps%










