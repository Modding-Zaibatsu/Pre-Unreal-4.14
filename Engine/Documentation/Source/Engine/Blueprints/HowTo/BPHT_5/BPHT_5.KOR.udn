INTSourceChangelist:2714483
Availability: Public
Title:5. 바위 파괴하기
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/HowTo
Description:이번 섹션에서는 Bind Event 를 사용하여 OnHit 에 바인딩, 바위가 총에 맞으면 파괴되도록 하겠습니다.
version: 4.9


[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[예전 단계](Engine\Blueprints\HowTo\BPHT_4 "%Engine\Blueprints\HowTo\BPHT_4:title%") 
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[비법 홈](Engine\Blueprints\HowTo "%Engine\Blueprints\HowTo:Title%")
	[/PARAM]
	[PARAM:next]
	[다음 단계](Engine\Blueprints\HowTo\BPHT_6 "%Engine\Blueprints\HowTo\BPHT_6:title%") 
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

이번 단계에서는, 플레이어가 발사하는 발사체에 바위가 맞으면 파괴될 수 있도록 만들겠습니다. 그러기 위해 또다른 **Bind Event** 를 사용하되, 이벤트 디스패처에는 바인딩하지 않도록 하겠습니다. 대신 바위의 콜리전이 무언가에 맞으면 발동되는, 상황에 완벽히 들어맞는 **OnHit** 라는 콜리전 이벤트를 사용하겠습니다.

그러면 폭파시켜 봅시다!

1.	**FirstPersonCharacter** 블루프린트 안으로 돌아와서, 바위를 스폰시킨 **Spawn Actor** 노드를 찾습니다.

1.	**Spawn Actor** 노드의 **Return Value** 를 끌어놓은 다음 **Assign On Actor Hit** 를 선택합니다. 

	![](OnActorHit.png)

1.	**Spawn Actor** 와 **Bind Event** 를 연결합니다. 

1.	**Spawn Actor** 의 **Return Value** 를 끌어놓고, **Apply Radius Damage (Destructible)** 을 선택합니다. 

	![](ApplyDamage.png)

	**Apply Damage** 를 사용할 수도 있지만, 추가로 입력할 파라미터가 있을 수 있습니다. 단순함을 위해 Radius Damage 를 사용하도록 하겠습니다.

1.	**Apply Radius Damage** 노드에서 아래 보이는 각 칸에 **50000** 을 입력하고 **Get Actor Location** 노드를 연결합니다.

	![](EnterDamage.png)

	바위를 산산조각내기에 충분한 대미지를 입힐 수 있을 것입니다.

1.	**Apply Radius Damage** 노드 뒤에 **Set Score** 노드를 추가합니다.

1.	**Control** 키를 누른 채 **Score** 변수를 끌어놓은 다음 (1 로 설정된) **Int + Int** 노드에 연결하고, 다음과 같이 연결합니다.

	![](IncreaseScore.png)

	이렇게 하면 현재 점수를 구해온 다음 바위에 맞을 때마다 1 씩 더해줍니다.

1.	**Bind Event** 와 **Set Score** 노드를 **3** 초로 설정된 **Delay** 노드에 연결합니다.

	![](DelayNode.png)

	바위가 (맞았든 안맞았든) 스폰된 지 3 초가 지나면, 파괴시키도록 합니다.

1. **Delay** 뒤에 **Destroy Actor** 노드를 추가합니다.

	![](DestroyActor.png)

	**Spawn Actor** 노드의 **Return Value** 를 끌어 **Destroy Actor** 노드의 **Target** 에 물려줍니다.

1. **Destroy Actor** 뒤에 **Set IsActive** 변수 노드를 추가하고 체크해제 상태로 놔둡니다.

	![](SetIsActive.png)

	여기서는 스폰된 바위가 더이상 활성 상태이지 않아 (pulls 횟수가 남아있다면) 플레이어가 또 하나 스폰시킬 수 있는 상태임을 말합니다.

핵심 게임플레이 구성이 완료되었으니, 이제 에디터에서 플레이해 보면 레벨 임의 스폰 지점에서 바위가 스폰되어 총으로 쏴서 파괴시킬 수 있는 것을 볼 수 있습니다. 다음 단계에서는 HUD 와 통신하여 캐릭터 블루프린트의 값에 따라 표시되는 값을 업데이트하도록 하겠습니다.


<!-- Old

지금까지 해 왔던 블루프린트 사이 통신 대부분은 한 블루프린트에서 다른 블루프린트로 정보를 전달하는 것이었습니다. 하지만 종류도 다르면서 갯수도 더 많은 블루프린트 사이에 정보를 전달하고 싶을 때도 있습니다.

여기서는 **Get All Actors of Class** 노드, 그 노드를 사용해서 같은 클래스의 블루프린트 다수에 한꺼번에 정보를 전달하는 법을 알아보겠습니다. 블루프린트 사이의 중개자 역할을 하는 특수 유형 블루프린트인 **블루프린트 인터페이스** 의 경우, 같은 인터페이스를 사용하는 블루프린트라면 그 안에 저장된 데이터에 접근할 수 있게 됩니다.

[OBJECT:TopicList]
	[PARAM:title]
		같은 클래스의 모든 액터 구하기
	[/PARAM]
	[PARAM:description]
	여기서는 **Get All Actors of Class** 노드를 사용하여 플레이어가 불에 붙으면 레벨에 배치된 다수의 파티클 이펙트를 한꺼번에 전부 켜도록 하겠습니다.
	[/PARAM]
[/OBJECT]

1. **콘텐츠 브라우저** 에서 **Game/Blueprints** 아래, **Blueprint_Effect_Sparks** 를 연 다음 **컴포넌트** 탭으로 갑니다.

1. 스파크에 대한 **디테일** 패널에서, **Activation** (활성화) 섹션 아래 **Auto Activate** (자동 활성화) 옵션을 끕니다.

	![](BPHT5_1.png)

1. 블루프린트를 **컴파일**, **저장** 후 닫습니다.

1. **Blueprint_Effect_Sparks** 를 끌어 **레벨 뷰포트** 에 놓습니다.

	![](BPHT5_2.png)(w:720)
		
1. 이펙트를 선택한 채, **Ctrl+W** 를 눌러 복제한 뒤 레벨 내 여러 곳에 배치합니다.

	![](BPHT5_3.png)(w:720)

	_뒷벽을 따라 배치하여 어디에 배치하든 잘 표시되도록 했습니다._

1. **Game/Blueprints** 폴더에서 **MyCharacter** 블루프린트를 열고 **isOnFire** 가 _True_ 로 설정된 코드 부분을 찾습니다.

1. **Set Is on Fire** 노드를 끌어 놓은 다음 **Get All Actors Of Class** 를 추가하고 **ActorClass** 는 **Blueprint_Effect_Sparks** 로 설정합니다. 

1. **Out Actors** 핀을 끌어 놓은 다음 **ForEachLoop** 노드를 추가하고 노드를 연결합니다.

	![](BPHT5_4.png)(w:720)

	_이렇게 하면 **Blueprint_Effect_Sparks** 액터를 전부 찾은 다음 각각에 대해 무언가를 하라는 뜻입니다._

1. **Array Element** 핀을 끌어 놓은 다음 **Cast To Blueprint_Effect_Fire** 를 추가하고 노드를 연결합니다.

1. **As Blueprint Effect Sparks C** 핀을 끌어 놓은 다음 **Get Sparks** 를 추가하고, **Sparks** 를 끌어놓은 다음 **Activate** 시키고, 노드를 연결합니다.

	[REGION:lightbox]
	[![](BPHT5_5.png)(w:720)](BPHT5_5.png)
	[/REGION]

	_여기서는 각각에서 **Sparks** 컴포넌트를 구한 다음 **Activate** 시키는 작업을 한다는 뜻입니다. 이미지를 클릭하면 원래 크기로 보입니다._

1. 블루프린트를 **컴파일**, **저장** 후 닫습니다.

1. 이제 에디터에서 플레이해 보면, 불이 붙을 때 배치한 모든 스파크 이펙트가 켜질 것입니다.

1. (옵션) 불이 붙으면 활성화시켰으니, 같은 코드를 추가하여 불이 꺼지면 비활성화되도록 하겠습니다.

**블루프린트** 사이의 이러한 통신 유형은 레벨에 있는 여러 **블루프린트** 를 대규모로 변경하고자 할 때 좋습니다 (예를 들면 여러 개의 라이트를 켜거나 색을 바꾼다거나, 여러 아이템 스폰을 해제하거나 어떤 식으로든 변경한다거나 등입니다). 여기서 한 가지 주의점은, 같은 **클래스** 의 **액터** 에만 적용된다는 점입니다. 그런데 다수의 라이트를 켜고, 파티클을 추가한 다음 HUD 를 업데이트하고 등의 작업을 하려면 어떻게 해야 할까요? 다음 섹션에서는 **블루프린트 인터페이스** 를 사용하여 이뤄내는 법에 대해 알려드리겠습니다. 

[OBJECT:TopicList]
	[PARAM:title]
		블루프린트 인터페이스
	[/PARAM]
	[PARAM:description]
	이제 플레이어가 불이 붙었냐 안붙었냐에 따라 다르게 반응하는 세 가지 유형의 **블루프린트** 가 있습니다. 그들 각각 그 시점이 언제인지 알아야 하므로, **블루프린트 인터페이스** 를 통해 알려주도록 하겠습니다. 
	[/PARAM]
[/OBJECT]

1. **콘텐츠 브라우저** 에서 **생성** 버튼을 누른 다음 **블루프린트** 아래 **블루프린트 인터페이스** 를 선택합니다.

	![](BPHT5_6.png)

1. 생성된 **블루프린트 인터페이스** 에 **BP_Interface** 같은 이름을 짓고 애셋을 엽니다.

1. **BP_Interface** 안에서 **함수 추가** 버튼을 클릭한 다음 **PlayerCondition** 과 같은 이름을 짓습니다. 

	![](BPHT5_7.png)

1. **디테일** 패널에서 **Outputs** 아래 **추가** 버튼을 누른 다음 생성된 **불리언** 에 **getIsOnFire** 같은 이름을 짓습니다.

	![](BPHT5_8.png)

	_여기에 잠시 후 설정될 **MyCharacter** 블루프린트 내 **isOnFire** 변수 값이 저장됩니다._

1. 블루프린트를 **컴파일**, **저장** 후 닫습니다.

1. **Game/Blueprints** 폴더에서 **MyCharacter** 블루프린트를 엽니다.

1. 툴바에서, **블루프린트 속성** 버튼을 클릭합니다.

	![](BPHT5_9.png)

1. **디테일** 패널에서 **Interfaces** 아래, **추가** 버튼을 클릭한 다음 **BP_Interface** 를 선택합니다. 

	![](BPHT5_10.png)

1. 그러면 이 블루프린트에 **인터페이스** 가 추가되어, **내 블루프린트** 창 안에서 볼 수 있게 됩니다.

	![](BPHT5_11.png)

1. **PlayerCondition** 함수에 **더블클릭** 하여 그래프를 엽니다.

1. **isOnFire** 변수를 **Ctrl** 드래그한 다음 **getIsOnFire** 핀에 연결합니다.

	![](BPHT5_12.png)

	_이제 변수의 값이 **인터페이스** 에 전달되어, 그 **인터페이스** 를 사용하는 블루프린트는 그 값을 구할 수 있습니다._

1. 블루프린트를 **컴파일**, **저장** 후 닫습니다.

1. **Game/Blueprints** 폴더에서 **Blueprint_CeilingLight** 를 찾은 다음 레벨에 끌어 놓습니다.

	![](BPHT5_13.png)

	_**인터페이스** 를 사용하여 플레이어가 불이 붙었는지 아닌지에 따라 라이트의 색을 설정합니다._

1. **콘텐츠 브라우저** 에서 **Blueprint_CeilingLight** 에 **더블클릭** 하여 엽니다. 

1. 툴바에서 **블루프린트 속성** 버튼을 누릅니다.

1. **디테일** 패널에서 **추가** 버튼을 누르고 **BP_Interface** 를 추가합니다. 

	![](BPHT5_14.png)

1. 그래프 아무데나 **우클릭** 한 다음 **Event Tick** 노드를 추가합니다.

1. **Event Tick** 을 끌어 놓은 다음 **Interface Messages/BP Interface C** 아래 **PlayerCondition** 함수를 선택합니다.

	![](BPHT5_15.png)

1. **Get Player Character** 를 **Target** 에 연결하고, **Get Is on Fire** 출력으로 **분기** 시킵니다.

	![](BPHT5_16.png)

1. **내 블루프린트** 창에서 **Point Light 1** 을 끌어 놓은 다음 **Set Brightness** 와 **Set Light Color** 노드에 연결하고, **False** 에 연결합니다. 

	![](BPHT5_17.png)

	_**New Brightness** 는 원하는 대로 (기본값은 1700), **New Light Color** 는 불이 붙지 않았을 때의 색으로 설정하면 됩니다._

1. **Point Light 1**, **Set Brightness**, **Set Light Color** 노드를 복사한 다음 **True** 에 연결하고, 값을 원하는 대로 바꿉니다.

	![](BPHT5_18.png)

	_여기서 **Brightness** 를 **5000** 으로 올리고, 플레이어가 불에 붙으면 라이트 색을 파랑이 아닌 초록으로 설정합니다._

1. 블루프린트를 **컴파일**, **저장** 후 닫습니다. 

1. **MyCharacter** 블루프린트를 열고 기존의 **Get All Actors Of Class** 와 스파크 섹션에서 만든 노드들을 삭제합니다.

	![](BPHT5_19.png)(w:820)

	_위 각각의 노드를 삭제합니다. **인터페이스** 를 사용하여 켜고/끌 것입니다._

1. **Game/Blueprints** 폴더에서 **Blueprint_Effect_Sparks** 블루프린트를 엽니다. 

1. **블루프린트 속성** 버튼을 누른 다음, **디테일** 패널에서 **BP_Interface** 를 **추가** 합니다. 

1. 그래프에서, 전에 했던 것처럼 **PlayerCondition** 함수를 구현하고, **분기** 에서 **Sparks** 를 **Activate** 및 **Deactivate** 시킵니다.

	![](BPHT5_20.png)(w:820)

1. 블루프린트를 **컴파일**, **저장** 후 닫습니다. 

1. **콘텐츠 브라우저** 에서 전에 만들었던 **GameHUD** 블루프린트 위젯을 찾아 엽니다.

1. **팔레트** 창 **일반** 아래에서 **Text Block** 을 끌어 **계층구조** 창의 **CanvasPanel** 에 놓습니다.

1. 그래프에서 **Text Block** 위치/크기를 조절한 다음 원하는 곳에 놓습니다.

1. **Text Block** 에 대한 **디테일** 패널에서 **Text** 에 **You're On Fire** 와 같이 입력합니다. 

	![](BPHT5_21.png)(w:640)

1. 텍스트 **앵커** 위치를 선택할 수도 있습니다.

	![](BPHT5_22.png)

	_화면 중앙에 배치 및 앵커 설정을 하고, 크기 조정과 색도 추가했습니다._

1. **Text Block** 에 대한 **디테일** 패널에서도 이름을 **FireText** 로 변경한 다음 **Is Variable** 박스를 체크합니다.

	![](BPHT5_23.png)

	_그러면 게임플레이 도중 텍스트에 변경을 가할 수 있습니다._

1. 창 우상단 구석의 **그래프** 탭 버튼을 클릭합니다.

1. **블루프린트 속성** 버튼을 클릭하고, **디테일** 패널에서 **BP_Interface** 를 **추가** 합니다. 

1. 그래프에서, 전에 했던 것처럼 **PlayerCondition** 함수를 구현합니다.

1. **분기** 에서 **Set Visibility** 노드를 연결하고, **In Visibility** 드롭다운으로 **Visible** 에 **True** 를, **Hidden** 에 **False** 를 설정합니다.

	![](BPHT5_24.png)(w:820)

1. 블루프린트를 **컴파일**, **저장** 후 닫습니다. 

1. **플레이** 버튼을 눌러 에디터에서 플레이합니다.

	![](GIF5.gif)(convert:false)

	_지붕과 라이트를 조금 더 추가하여 라이트 색 변화를 보여드리고자 했으나, 이 시점에서는 불이 붙었는가 아닌가에 따라서만 라이트 색이 변하는 것을 볼 수 있을 것입니다. 불이 붙었는가 아닌가에 따라 스파크도 꺼졌다/켜졌다, "You're On Fire" 텍스트도 나타났다/사라졌다 할 것입니다._ 

지금까지 **Cast To** 노드를 사용하여 두 **블루프린트** 사이의 통신, **Get All Actors of Class** 노드로 클래스가 같은 **블루프린트** 다수와의 통신, **블루프린트 인터페이스** 를 사용하여 클래스가 다른 **블루프린트** 다수와의 통신 방법에 대해 알아봤습니다. **이벤트 디스패처** 로 **이벤트** 를 발동시켜 **레벨 블루프린트** 와의 통신하는 법은 물론, **On Begin Play** 와 스폰시에 대해 **이벤트 바인딩** 방법도 알아봤습니다.

다음 단계에서는 지금까지 다룬 주제에 대한 문서 링크가 제공되어, 보다 싶도 싶은 설명이나 예제를 확인해 볼 수 있습니다.

-->


%Steps%

