INTSourceChangelist:2686179
Availability:Public
Title:5.岩を破壊する 
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/HowTo
Description:OnHit に結合されている Bind Event を使って、ヒットすると岩が破壊するようにしてみましょう。
Version:4.9


[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[前のステップ](Engine\Blueprints\HowTo\BPHT_4 "%Engine\Blueprints\HowTo\BPHT_4:title%") 
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[How To ホーム](Engine\Blueprints\HowTo "%Engine\Blueprints\HowTo:Title%")
	[/PARAM]
	[PARAM:next]
	[次のステップ](Engine\Blueprints\HowTo\BPHT_6 "%Engine\Blueprints\HowTo\BPHT_6:title%") 
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

このステップでは、プレイヤーが発砲した発射物にヒット岩が破壊されるようにします。これを行うためには別の **Bind Event** を使いますが、それはイベントディスパッチャーにはバインドされません。その代り、岩のコリジョンが何かにヒットすると実行される **OnHit** と呼ばれるコリジョン イベントを使います。まさにこの状況にぴったりです。 

では、岩を破壊してみましょう！

1.	**FirstPersonCharacter** ブループリント内に戻り、岩をスポーンする **Spawn Actor** ノードを検索します。 

1.	**Spawn Actor** ノードの **Return Value** ピンを引き出して、**Assign On Actor Hit** を選択します。 

	![](OnActorHit.png)

1.	**Spawn Actor** と **Bind Event** を接続します。 

1.	Spawn Actor ノードの **Return Value** を引き出して、 **Apply Radius Damage (Destructible)** を追加します。 

	![](ApplyDamage.png)

	**Apply Damage** を使うこともできますが、パラメータの追加入力が必要です。ここでは簡単な方の Radius Damage を使います。 

1.	**Apply Radius Damage** ノードの以下のフィールドにそれぞれ **50000** と入力し、 **Get Actor Location** ノードを接続します。 

	![](EnterDamage.png)

	これにより、岩を粉々にするのに十分なダメージを確実に与えることができます。 

1.	**Apply Radius Damage** ノードの次に、 **Set Score** ノードを追加します。 

1.	**Control** を押しながら **Score** 変数をドラッグして **Int - Int** ノード (1 に設定) に接続し、さらにノードに接続します。 

	![](IncreaseScore.png)

	これにより、現在の点数を取得し、岩にヒットするたびに 1 が追加されます。 

1.	**Bind Event** と **Set Score** ノードを **Delay** に接続して **3** 秒に設定します。

	![](DelayNode.png)

	(ヒットしたかどうかに関わらず) 岩がスポーンされた 3 秒後に、それを破壊します。 

1. **Delay** の次に **Destroy Actor** ノードを追加します。 

	![](DestroyActor.png)

	**Spawn Actor** ノードの **Return Value** ピンを引き出して、**Destroy Actor** ノードの **Target** へつなぎます。 

1. **Destroy Actor** ノードの次に **Set isActive** 変数ノードを追加して、チェックを入れないままにします。 

	![](SetIsActive.png)

	スポーンされた岩はアクティブではなくなったので、プレイヤーは (引き金を引ける残数が十分ある場合は) 別の岩をスポーンすることができます。 

ゲームプレイの中核は設定できました。今エディタで再生すれば、レベル内のランダムなスポーン ポイントからスポーンされた岩をスポーンしたり、射撃して破壊することが確認できます。次のステップでは、HUD と通信して、Character ブループリントからの値に基づいて表示する値を更新していきます。 


<!-- Old

これまでのページで行った **ブループリント** 間の通信のほとんどは、 1 つの **ブループリント** と別のブループリント間で情報を渡していました。複数の **ブループリント** 間だけでなく、種類も複数の **ブループリント** 間で情報をパスしたい場合があると思います。 

このページでは、 **Get All Actors of Class** ノードについて、およびそれを使って同じクラスの複数の **ブループリント** へ一度に情報をパスする方法を学習します。**ブループリント** 間で中間物の役割をし、それらの間で情報の格納 / パスが可能な特殊なタイプの **ブループリント** である **ブループリント インターフェイス** の例も見てきます。インターフェースを使う **ブループリント** は全て、内部に格納されたデータへアクセスすることができるようになります。 

[OBJECT:TopicList]
	[PARAM:title]
		クラスの全てのアクタを取得する
	[/PARAM]
	[PARAM:description]
	プレイヤーに炎が燃え移った時、 **Get All Actors of Class** ノードを使って、レベル内に配置された幾つかのパーティクル エフェクトをいっせににオンにします。 
	[/PARAM]
[/OBJECT]

1. **コンテンツ ブラウザ** の **Game/Blueprints** から **Blueprint_Effect_Sparks** を開き **[Component]** タブをクリックします。 

1. **Sparks** の **[Details]** パネルで、 **[Activation]** セクションの **[Auto Activate]** のチェックを外します。 

	![](BPHT5_1.png)

1. **コンパイル** し **保存** してから、ブループリントを終了します。 

1. **Blueprint_Effect_Sparks** を **レベル ビューポート** へドラッグします。 

	![](BPHT5_2.png)(w:720)

1. エフェクトを選択して、 **Control+W** で複製して、レベル内に幾つか配置します。 

	![](BPHT5_3.png)(w:720)

	_見えやすいようにバックウォールに沿って配置してありますが、好きなように配置することができます。_

1. 「**Game/Blueprints**」フォルダから **MyCharacter** ブループリントを開き、コードのセクションで **isOnFire** を _true_ に設定します。 

1. **Set Is on Fire** ノードを引き出して **Get All Actors Of Class** を追加して、 **ActorClass** を **Blueprint_Effect_Sparks** に設定します。 

1. **Out Actors** ピンを引き出して **ForEachLoop** を追加し、ノードを接続します。 

	![](BPHT5_4.png)(w:720)

	_ここで **Blueprint_Effect_Sparks** クラスのすべてのアクタを探して、それぞれに何かをするように指示します。_

1. **Array Element** ピンを **Cast To Blueprint_Effect_Fire** へドラッグして、ノードを接続します。 

1. **As Blueprint Effect Sparks C** ピンを引き出して **Get Sparks** を追加し、 **Sparks** を引き出して **Activate** を追加します。 

	[REGION:lightbox]
	[![](BPHT5_5.png)(w:720)](BPHT5_5.png)
	[/REGION]

	_ここで、それぞれから **Sparks** コンポーネントを取得して **アクティブ化** するための「何か」を記述します。画像をクリックしてフルサイズで表示_

1. **コンパイル** し **保存** してから、ブループリントを終了します。 

1. 今エディタで再生すると、炎が燃え移った時、配置しておいた火花のエフェクトがすべてオンになるはずです。 

1. (オプション) 炎が燃え移った時にオンにされているので、炎が燃え移っていない時は同じコードを追加しますが火花は **非アクティブ化** します。 

この種類の **ブループリント** 間の通信は、レベル全体の幾つかの **ブループリント** に大幅な変更を加えたい場合 (例えば、ライトをいくつかオンにするかカラーを変更する、アイテムをいくつかデスポーンさせるか、何かしら変更する) に便利です。唯一の欠点は、同じ **クラス** の **アクタ** にしか適用できないという点です。ライトをいくつかオンにして、パーティクルを追加し、 HUD もアップデートして、さらに何かをしたい場合はどうすれば良いでしょうか。次のセクションでは、 **ブループリント インターフェース** を使ってこれを達成する方法を紹介します。 

[OBJECT:TopicList]
	[PARAM:title]
		ブループリント インターフェース
	[/PARAM]
	[PARAM:description]
	次は、プレイヤーに炎が燃え移っている場合と燃え移っていない場合、3 種類の **ブループリント** を異なるように反応させてみます。**ブループリント インターフェース** を使って必要とされる指示を出します。 
	[/PARAM]
[/OBJECT]

1. **コンテンツ ブラウザ** で **ブループリント** の **[New]** ボタンをクリックして、 **ブループリント インターフェース** を選択します。 

	![](BPHT5_6.png)

1. 作成した **ブループリント インターフェース** に「**BP_Interface**」のような名前を付けて、アセットを開きます。  

1. **BP_Interface** 内の **[Add Function (関数を追加)]** ボタンをクリックして、新しい関数に「**PlayerCondition**」のような名前を付けます。 

	![](BPHT5_7.png)

1. **[Details]** パネルの中の **[Outputs]** の **[New]** ボタンをクリックし、作成された **bool** に 「**getIsOnFire**」 のような名前をつけます。 

	![](BPHT5_8.png)

	_こうしておくと、すぐに設定される **MyCharacter** ブループリントで変数 **isOnFire** の値が維持されます。_

1. **コンパイル** し **保存** してから、ブループリントを終了します。 

1. 「 **Game/Blueprints** 」フォルダから **MyCharacter** ブループリントを開きます。 

1. ツールバーの **[Blueprint Props]** ボタンをクリックします。 

	![](BPHT5_9.png)

1. **インターフェース** の **[Details]** パネルの **[Add]** ボタンをクリックし、 **BP_Interface** を選択します。 

	![](BPHT5_10.png)

1. こうしておくと **インターフェース** がこのブループリントに追加され、 **[MyBlueprint]** ウィンドウ内に表示されます。 

	![](BPHT5_11.png)

1. **PlayerCondition** を **ダブルクリック** して、グラフを開きます。 

1. **Control** を押しながら **isOnFire** 変数へドラッグし、 **getIsOnFire** ピンへ接続します。 

	![](BPHT5_12.png)

	_こうしておくと、変数の値を **インターフェース** へパスして、 **インターフェース** を使うブループリントはすべてその値を取得できるようになります。_

1. **コンパイル** し **保存** してから、ブループリントを終了します。 

1. 「**Game/Blueprints**」フォルダの **Blueprint_CeilingLight** をレベル内にドラッグします。 

	![](BPHT5_13.png)

	_**インターフェース** を使って、プレイヤーに炎が燃え移っているかどうかによってライトの色を設定します。_

1. **コンテンツ ブラウザ** の **Blueprint_CeilingLight** を **ダブルクリック** して開きます。 

1. ツールバーの **[Blueprint Props]** ボタンをクリックします。 

1. **[Details]** パネルの **[Add]** ボタンをクリックし、 **BP_Interface** を追加します。 

	![](BPHT5_14.png)

1. グラフをどこか **右クリック** して、 **Event Tick** ノードを探して追加します。 

1. **Event Tick** を **Interface Messages/BP Interface C** へドラッグして、 **PlayerCondition** 関数を選択します。 

	![](BPHT5_15.png)

1. **Get Player Character** を **Target** に接続し、 **Branch** を **Get Is on Fire** 出力ピンに接続します。 

	![](BPHT5_16.png)

1. **[MyBlueprint]** ウィンドウから **Point Light 1** をドラッグし、 **Set Brightness** ノードと **Set Light Color** ノードに接続し、 **False** に接続します。 

	![](BPHT5_17.png)

	_**New Brightness** を好きなように設定し (デフォルトは 1700) 炎が燃え移っていない時は **New Light Color** に表示する色を設定します。_

1. **Point Light 1** 、 **Set Brightness** および **Set Light Color** ノードをコピーして、それらを **True** に接続し、好きな値に変更します。 

	![](BPHT5_18.png)

	_ここで、 **Brightness** を **5000** に上げて、プレイヤーに火が燃え移っている時はライトカラーを青ではなく緑に設定します。_

1. **コンパイル** し **保存** してから、ブループリントを終了します。 

1. **MyCharacter** ブループリントを開き、 **Get All Actors Of Class** シーケンスと火花用に前のセクションで作成したノードを削除します。 

	![](BPHT5_19.png)(w:820)

	_**Interface** を使ってオンオフを操作するので、上記のノードを削除します。_

1. 「**Game/Blueprints**」フォルダの **Blueprint_Effect_Sparks** を開きます。 

1. **[Blueprint Props]** ボタンをクリックし、 **[Details]** パネルで **BP_Interface** を追加します。 

1. グラフ内でこれまでと同様に **PlayerCondition** 関数を実装し、 **Branch** から **Sparks** を **Activate** および **Deactivate** します。 

	![](BPHT5_20.png)(w:820)

1. **コンパイル** し **保存** してから、ブループリントを終了します。 

1. **コンテンツ ブラウザ** で、作成した **GameHUD** ブループリント ウィジェットを探して開きます。 

1. **Common** の **[Palette]** ウィンドウから **テキスト ブロック** を **[Hierarchy]** ウィンドウの **CanvasPanel** にドラッグします。 

1. グラフ上で **テキスト ブロック** の再配置 / リサイズを行い、好きな場所に配置します。 

1. **Text** の **[Text Block]** の **[Details]** パネルで、 「 **You're On Fire** 」のように入力します。 

	![](BPHT5_21.png)(w:640)

1. テキストを **固定** する位置を選ぶことができます。 

	![](BPHT5_22.png)

	_画面中央に配置して固定し、リサイズして色も加えます。_

1. **[Text Block]** の **[Details]** パネルで、「**FireText**」に名前をつけて **[Is Variable]** ボックスにチェックも入れます。 

	![](BPHT5_23.png)

	_こうすると、ゲームプレイ中にテキストを変更することができます。_

1. ウィンドウの右上隅の **[Graph]** タブ ボタンをクリックします。 

1. **[Blueprint Props]** ボタンをクリックし、 **[Details]** パネルで **BP_Interface** を追加します。 

1. グラフ内で、これまでどおり、 **PlayerCondition** 関数を実装します。 

1. **Branch** から **Set Visibility** ノードを使って、 **In Visibility** のドロップダウンで **Visible** を **True** そして **Hidden** を **False** に設定します。

	![](BPHT5_24.png)(w:820)

1. **コンパイル** し **保存** してから、ブループリントを終了します。 

1. **Play** ボタンをクリックしてエディタで再生します。 

	![](GIF5.gif)(convert:false)

	_ライトカラーの変化を解説するために屋根とライトを追加しましたが、この時点では、炎が燃え移っているかどうかによってライトカラーの変化が表示されているはずです。炎が燃え移っているかどうかによって、火花のオンオフも操作でき、「You're On Fire」というテキストも表示されているはずです。_ 

**Cast To** を使って 2 つの **ブループリント** 間での通信方法および同じクラスの複数の **ブループリント** 間での (**Get All Actors of Class** ノードを使った) 通信方法、そして **ブループリント インターフェース** を使って異なるクラスの複数の **ブループリント** 間での通信方法を説明しました。さらに、 **Event Dispatcher** を使って **Level ブループリント** と通信して **Event** を発行するおよびスポーン時に両方の **On Begin Play** に対して **イベントをバインド** する方法も学習しました。 

次のステップでは、詳細な解説と例が盛り込まれている補足資料へのリンクを紹介します。 

-->


%Steps%

