Availability: Public
Title:5. 销毁岩石 
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/HowTo
Description:在这个章节，我们会使用绑定到OnHit的绑定事件在岩石被击中时进行销毁。 


[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[Previous Step](Engine\Blueprints\HowTo\BPHT_4 "%Engine\Blueprints\HowTo\BPHT_4:title%") 
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[How-To Home](Engine\Blueprints\HowTo "%Engine\Blueprints\HowTo:Title%")
	[/PARAM]
	[PARAM:next]
	[Next Step](Engine\Blueprints\HowTo\BPHT_6 "%Engine\Blueprints\HowTo\BPHT_6:title%") 
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

在这个步骤中，我们会让岩石在被玩家发射的射弹击中时进行销毁。 为了完成这项目标，我们会使用另一个 **Bind Event** （绑定事件），但我们不会将其绑定到事件调度器。 我们会转而使用一个名称为 **OnHit** 的碰撞事件，它会在岩石被射中时触发。 

让我们开始射击吧！

1.	在 **FirstPersonCharacter** 蓝图中，在我们生成岩石的位置处搜索 **Spawn Actor** （生成Actor）节点。 

1.	在 **Spawn Actor** （生成Actor）节点的 **Return Value** （返回值）处拉根线，然后选择 **Assign On Actor Hit** （在Actor碰撞时分配）。 

	![](OnActorHit.png)

1.	连接 **Spawn Actor** （生成Actor）和 **Bind Event** （绑定事件）。 

1.	在 **Spawn Actor** （生成Actor）节点的 **Return Value** （返回值）处拉根线，然后选择 **Apply Radius Damage (Destructible)* （应用半径伤害（可破坏物体））。 

	![](ApplyDamage.png)

	我们可以使用 **应用伤害** ，但还需要输入一些额外的参数。 为了简单起见，我们会使用 Radius Damage（半径损伤）。 

1.	在 **Apply Radius Damage** （应用半径损伤）节点，对下方显示的每个域我们都输入 **50000** ，然后连接 **Get Actor Location** （获取Actor位置）节点。 

	![](EnterDamage.png)

	这样我们就可以对岩石做出足够大的伤害，从而让岩石碎成一块一块。 

1.	在 **Apply Radius Damage** （应用半径伤害）节点之后，添加一个 **Set Score** （设置分数）节点。 

1.	在按住 **Control** 不放的情况下，再次拉入 **Score** 变量，并将其连接到 **Int - Int** 节点（设置为 1）并连接节点 。 

	![](IncreaseScore.png)

	这样我们就可以获得当前的分数，并在岩石每次被撞击时增加1的值。 

1.	连接 **Bind Event** （绑定事件）和 **Set Score** （设置分数）节点到 **Delay** （延迟）节点并设置其为 **3** 秒。

	![](DelayNode.png)

	在3秒后，当岩石生成后（无论其是否被击中），我们都会销毁它。 

1. 给 **Delay** （延迟）节点添加 **Destroy Actor** （销毁Actor）节点。 

	![](DestroyActor.png)

	在 **Spawn Actor** （生成Actor）节点的 **Return Value** （返回值）处拉根线，然后连接到 **Destroy Actor** （销毁Actor）节点的 **Target** （目标）位置。 

1. 在 **Destroy Actor** （销毁Actor）节点之后，添加 **Set isActive** 变量节点并保持其为未勾选的状态。 

	![](SetIsActive.png)

	也就是说，生成的岩石不再处于激活状态，这样玩家可以生成另一块岩石（如果他们有足够的扳机扣动次数残留的话） 

这样核心游戏就设置完成了，如果我们现在要在编辑器中进行播放，您可以看到，您可以显示生成、射击和销毁在关卡中的随机生成点生成的岩石。 在下一步，我们将会与HUD进行通信，并基于来自于角色蓝图的值来更新显示的值。 


<!-- Old

Most of the communicating between **Blueprints** we have done so far has been passing information between one **Blueprint** and another. There may be times when you want to pass information between several **Blueprints** and not only that, between several different kinds of **Blueprints**. 

Below we will learn about the **Get All Actors of Class** node and how that can be used to pass information to several **Blueprints** of the same class at once. We will also take a look at an example of using **Blueprint Interfaces** which are a special type of **Blueprint** that act as an intermediary between **Blueprints** and can store/pass information between them. Any **Blueprint** that uses the interface can then have access to the data stored within it. 

[OBJECT:TopicList]
	[PARAM:title]
		Get All Actors of Class
	[/PARAM]
	[PARAM:description]
	Here we will use the **Get All Actors of Class** node to turn on several particle effects placed in the level all at once when the player is on fire. 
	[/PARAM]
[/OBJECT]

1. In the **Content Browser** under **Game/Blueprints**, open **Blueprint_Effect_Sparks** and go to the **Component** tab. 

1. In the **Details** panel for **Sparks**, uncheck **Auto Activate** under the **Activation** section. 

	![](BPHT5_1.png)

1. **Compile** and **Save** then close the Blueprint. 

1. Drag the **Blueprint_Effect_Sparks** into the **Level Viewport**. 

	![](BPHT5_2.png)(w:720)
		
1. With the effect selected, **Control+W** to duplicate it and place several in the level. 

	![](BPHT5_3.png)(w:720)

	_We placed them along the back wall so they show up better however you can place them where you wish._

1. In the **Game/Blueprints** folder, open the **MyCharacter** Blueprint and find the section of code where we set **isOnFire** to _true_. 

1. Drag off the **Set Is on Fire** node and add a **Get All Actors Of Class** node with **ActorClass** set to **Blueprint_Effect_Sparks**. 

1. Drag off the **Out Actors** pin and add a **ForEachLoop** node and connect the node. 

	![](BPHT5_4.png)(w:720)

	_Here we are saying find all the Actors of the **Blueprint_Effect_Sparks** class and for each of them, do something._

1. Drag off the **Array Element** pin and **Cast To Blueprint_Effect_Fire** and connect the node. 

1. Drag off the **As Blueprint Effect Sparks C** pin and **Get Sparks**, drag off **Sparks** and **Activate** it, and connect the nodes. 

	[REGION:lightbox]
	[![](BPHT5_5.png)(w:720)](BPHT5_5.png)
	[/REGION]

	_Here we are stating the "something" we want to do which is to get the **Sparks** component from each and **Activate** them. Click image for full view._

1. **Compile** and **Save** then close the Blueprint. 

1. If you play in the editor now, when you catch on fire, all of the spark effects you placed should turn on. 

1. (Optional) Now that you have turned them on when you are on fire, add the same code but **Deactivate** the sparks when you are not on fire. 

This type of communication between **Blueprints** is useful if you want to make mass changes to several **Blueprints** across your level (say for example, turn on several lights or change their colors, despawn several items or change them in some way, etc.). The only drawback is that this applies to **Actors** of the same **Class** only. What if you wanted to turn on several lights, add particles and update a HUD or more? The next section will show you how you can accomplish just that by using **Blueprint Interfaces**. 

[OBJECT:TopicList]
	[PARAM:title]
		Blueprint Interfaces
	[/PARAM]
	[PARAM:description]
	Next we will have three different types of **Blueprints** react different when the player is or is not on fire. They will each need to know when that is, so we will use a **Blueprint Inteface** to tell them. 
	[/PARAM]
[/OBJECT]

1. In the **Content Browser**, click the **New** button and under **Blueprints**, select **Blueprint Interface**. 

	![](BPHT5_6.png)

1. Give the **Blueprint Interface** created a name such as **BP_Interface** then open the asset.  

1. Inside the **BP_Interface**, click the **Add Function** button then give the new function a name such as **PlayerCondition**. 

	![](BPHT5_7.png)

1. In the **Details** panel, click the **New** button under **Outputs** and give the **bool** created a name such as **getIsOnFire**. 

	![](BPHT5_8.png)

	_This will hold the value of the variable **isOnFire** in the **MyCharacter** Blueprint which will be set in a moment._

1. **Compile** and **Save** then close the Blueprint. 

1. From the **Game/Blueprints** folder, open the **MyCharacter** Blueprint. 

1. From the Toolbar, click the **Blueprint Props** button. 

	![](BPHT5_9.png)

1. In the **Details** panel under **Interfaces**, click the **Add** button and select the **BP_Interface**. 

	![](BPHT5_10.png)

1. This will add the **Interface** to this Blueprint and you will see it inside the **MyBlueprint** window. 

	![](BPHT5_11.png)

1. **Double-click** on the **PlayerCondition** function to open the graph. 

1. Hold **Control** and drag in the **isOnFire** variable and connect it to the **getIsOnFire** pin. 

	![](BPHT5_12.png)

	_This will now pass the value of the variable to the **Interface** so that any Blueprint using the **Interface** can get its value._

1. **Compile** and **Save** then close the Blueprint. 

1. In the **Game/Blueprints** folder, locate the **Blueprint_CeilingLight** and drag it into the level. 

	![](BPHT5_13.png)

	_Using the **Interface**, we will set the color of the light based on whether the player is on fire or not._

1. **Double-click** on the **Blueprint_CeilingLight** in the **Content Browser** to open it up. 

1. Click the **Blueprint Props** button from the Toolbar. 

1. In the **Details** panel, click the **Add** button and add the **BP_Interface**. 

	![](BPHT5_14.png)

1. **Right-click** anywhere in the graph and add an **Event Tick** node. 

1. Drag off the **Event Tick** and under **Interface Messages/BP Interface C**, select the **PlayerCondition** function. 

	![](BPHT5_15.png)

1. Connect a **Get Player Character** to the **Target** and a **Branch** to the **Get Is on Fire** out pin. 

	![](BPHT5_16.png)

1. Drag in the **Point Light 1** from the **MyBlueprint** window and connect it to a **Set Brightness** and **Set Light Color** node, and connect to the **False**. 

	![](BPHT5_17.png)

	_You can set the **New Brightness** to whatever you wish (1700 by default) and the **New Light Color** to a color to display when not on fire._

1. Copy the **Point Light 1**, **Set Brightness** and **Set Light Color** nodes and connect them to the **True**, changing their values to whatever you wish. 

	![](BPHT5_18.png)

	_Here we increase the **Brightness** to **5000** and set the light color to green instead of blue when the player is on fire._

1. **Compile** and **Save** then close the Blueprint. 

1. Open the **MyCharacter** Blueprint and delete the nodes we created in the previous section for the **Get All Actors Of Class** sequence and the sparks. 

	![](BPHT5_19.png)(w:820)

	_Delete each of the nodes above as we are going to use an **Interface** to turn them on/off._

1. In the **Game/Blueprints** folder, open the **Blueprint_Effect_Sparks** Blueprint. 

1. Click the **Blueprint Props** button, then in the **Details** panel, **Add** the **BP_Interface**. 

1. In the graph, implement the **PlayerCondition** function as we have done before and off the **Branch**, **Activate** and **Deactivate** the **Sparks**. 

	![](BPHT5_20.png)(w:820)

1. **Compile** and **Save** then close the Blueprint. 

1. In the **Content Browser**, locate and open the **GameHUD** Blueprint Widget we created. 

1. From the **Palette** window under **Common**, drag a **Text Block** onto the **CanvasPanel** in the **Hierarchy** window. 

1. Reposition/resize the **Text Block** on the graph and place it wherever you wish. 

1. In the **Details** panel for the **Text Block** under **Text**, enter something such as **You're On Fire**. 

	![](BPHT5_21.png)(w:640)

1. You can also choose where you want to **Anchor** the text. 

	![](BPHT5_22.png)

	_We have placed and anchored it to the center of the screen as well as resized and added color._

1. Also in the **Details** panel for the **Text Block**, change the name to **FireText** and check the **Is Variable** box. 

	![](BPHT5_23.png)

	_This will allow us to make modifications to the text during gameplay._

1. Click the **Graph** tab button in the upper right corner of the window. 

1. Click the **Blueprint Props** button, then in the **Details** panel, **Add** the **BP_Interface**. 

1. In the graph, implement the **PlayerCondition** function as we have done before. 

1. Off the **Branch** use the **Set Visibility** node, using the **In Visibility** drop-down to set **Visible** for **True** and **Hidden** for **False**.

	![](BPHT5_24.png)(w:820)

1. **Compile** and **Save** then close the Blueprint. 

1. Click the **Play** button to play in the editor. 

	![](GIF5.gif)(convert:false)

	_We have added a roof and more lights to illustrate the changing light colors but at this point you should see that the lights change color depending upon whether or not you are on fire. The sparks should also turn on/off and the "You're On Fire" text should appear/disappear whether or not you are on fire._ 

We have now seen how to communicate between two **Blueprints** using the **Cast To** node as well as how to communicate with several **Blueprints** of the same class (with the **Get All Actors of Class** node) and several **Blueprints** of different classes by using a **Blueprint Interface**. We also learned how to communicate with the **Level Blueprint** by using an **Event Dispatcher** to fire an **Event** as well as **Bind Events** for both **On Begin Play** and upon spawning. 

The next step in this guide will provide you with links to additional documentation on the topics covered for further reading and more explanation and examples. 

-->


%Steps%

