INTSourceChangelist:2714483
Availability: Public
Title:4. 레벨에서 캐릭터로 정보 전달하기
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/HowTo
Description:이번 단계에서는 레벨 블루프린트를 사용해서 스폰 지점 위치를 구하여 캐릭터 블루프린트로 넘겨주도록 하겠습니다.
version: 4.9


[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[예전 단계](Engine\Blueprints\HowTo\BPHT_3 "%Engine\Blueprints\HowTo\BPHT_3:title%") 
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[비법 홈](Engine\Blueprints\HowTo "%Engine\Blueprints\HowTo:Title%")
	[/PARAM]
	[PARAM:next]
	[다음 단계](Engine\Blueprints\HowTo\BPHT_5 "%Engine\Blueprints\HowTo\BPHT_5:title%") 
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%


1. 메인 에디터 뷰의 툴바에서, **블루프린트** 버튼을 클릭한 다음 **레벨 블루프린트 열기** 를 선택합니다.

	![](OpenLevelBlueprint.png)

1. 그래프에 **우클릭** 한 다음 **Event Begin Play** 노드와 **Get Player Character** 노드를 추가합니다.

	![](GetPlayerCharacter.png)

1. **Get Player Character** 의 **Return Value** 를 끌어 놓은 다음 **Cast To FirstPersonCharacter** 노드를 추가합니다.

	![](CastToNode.png)

	여기서는 **Cast** 노드를 사용하여 먼저 플레이어 캐릭터를 구한 다음, 그 플레이어에 사용되는 캐릭터 블루프린트를 구합니다 (여기서는 **FirstPersonCharacter** 이며, 플레이가능 캐릭터의 다른 스크립트를 구성하는 곳입니다). Cast 노드를 사용하여 플레이어 캐릭터의 블루프린트와 그 안의 변수, 이벤트, 함수에 접근할 수 있습니다.

	[REGION:note]
	**Cast**, 형변환 관련 상세 정보는 [](Engine/Blueprints/UserGuide/CastNodes) 문서를 참고하세요.
	[/REGION]

1. 노드를 아래와 같이 연결한 다음, **Cast To** 노드의 **Return Value** 에서 **변수로 승격** 을 선택합니다.

	![](PromoteToVariable.png)

	플레이어가 사용중인 **FirstPersonCharacter** 블루프린트로의 레퍼런스를 저장할 변수를 만들어 매번 Cast 를 사용하지 않고도 접근할 수 있도록 하겠습니다. Event Begin Play 즉시 이 작업을 해 주면 나중에 시간이 절약될 것입니다.

1. 승격된 변수를 선택한 다음, **디테일** 패널에서 이름을 **MyCharacter** 로 변경합니다.

	![](RenamedMyCharacter.png)

1. **MyCharacter** 노드의 **Return Value** 를 끌어놓고 **Assign Get Spawn Location** 노드를 추가합니다.

	![](AssignSpawnLocation.png)

	생성한 **이벤트 디스패처** 입니다. 이것을 선택하면 두 개의 노드가 추가됩니다.
	
	[REGION:note]
	목록에 이 노드가 보이지 않는다면, **FirstPersonCharacter** 블루프린트에서 **컴파일** 버튼을 누르고 재시도해 보세요.
	[/REGION]

1. **Bind Event** 에서 새로 추가된 노드를 연결했는지 확인합니다.

	![](ConnectAddedNodes.png)

	이제 캐릭터 블루프린트에서 **GetSpawnLocation** 이 호출되면, 새로운 Custom Event 역시도 호출됩니다.

1. **내 블루프린트** 창에서 **Control** 키를 누르고 **MyCharacter** 변수를 끌어 놓은 다음, 거기에다 **Set Spawn Location** 노드를 추가합니다.

	![](SetSpawnLocation.png)

1. 메인 에디터 창으로 돌아와 **월드 아웃라이너** 에서 **Target Point** 를 검색한 뒤 각각을 **Ctrl** 클릭으로 선택합니다.

	![](SelectAllTargetPoints.png)

1. **레벨 블루프린트** 로 돌아와 그래프에 **우클릭** 한 다음 **3 개의 선택된 액터로의 레퍼런스 생성** 을 선택합니다. 

	![](AddReferences.png)

1. 그래프에 **우클릭** 한 다음 **Make Array** 노드를 추가한 뒤, 거기에 각 **Target Point** 를 연결합니다.

	![](MakeArray.png)

	**핀 추가** 버튼을 클릭하여 핀을 추가시킬 수 있습니다. 이 배열에는 접근할 수 있는 타겟 포인트 집합이 저장됩니다.

1.	**Array** 핀을 끌어놓고 **Get** 노드를 추가합니다.

1.	**Get** 노드를 끌어놓고 **Random Integer in Range** 노드를 추가한 다음 **Min** 은 0, **Max** 는 2 로 설정합니다. 

	![](GetNodeAdded.png)

	여기서는 스폰 지점으로 사용할 임의의 타겟 포인트를 구합니다. 스폰 지점이 더 있는 경우, 배열에 추가한 다음 Random Integer in Range 노드의 **Max** 값을 증가시켜 포함시킵니다.

1.	**Get** 노드를 끌어놓고, **Get Actor Transform** 노드를 추가한 다음 **Set Spawn Location** 노드에 연결합니다.

	[REGION:lightbox]
	[![](FullScript.png)(w:640)](FullScript.png)
	[/REGION]

	전체 스크립트는 위와 비슷할 것이며, 클릭하면 원래 크기로 봅니다.

이 페이지에서 많은 작업을 했습니다! **Cast** 노드를 사용하여 캐릭터 블루프린트에 접근한 다음, 그 안의 이벤트 디스패처에 Custom Event 를 바인딩했습니다. 이를 통해 이벤트 디스패처가 호출될 때마다 레벨 블루프린트에 있는 Custom Event 를 발동시킬 수 있습니다. 그런 다음 스폰 지점 중 하나를 임의로 구해온 다음 그 변수를 (바위 스폰 위치로 사용되는) Spawn Location 으로 캐릭터 블루프린트에 돌려줍니다.

다음 단계에서는, 바위에 총을 쏠 수 있도록 하고, **OnHit** 라는 이벤트에서 Bind Event 를 사용하여 (즉 바위에 맞으면) 파괴되도록 하겠습니다.











	




<!-- old

**캐릭터** 블루프린트에서 HUD 로 정보를 전달할 수 있으려면, 먼저 몇 가지 것들을 만들어 줘야 합니다. 대미지에 대한 시각적인 소스(플레이어에 불이 붙는 것)를 만들어 주고, 대미지/생명력 시스템 자체도 만들어 줘야 합니다. 그렇게 설정해 두고 나면, 플레이어의 생명력 값을 HUD 에 전달하여 플레이어의 생명력이 얼마나 남았나, 그리고 잃고 있는가를 확인할 수 있습니다.

[OBJECT:TopicList]
	[PARAM:title]
		플레이어에 불 붙은 상태 설정하기
	[/PARAM]
	[PARAM:description]
	여기서는 플레이어에 불이 붙어/꺼져 있으면 **캐릭터** 블루프린트 안의 파티클 이펙트를 활성화/비활성화 시키도록 하겠습니다.
	[/PARAM]
[/OBJECT]

1. **콘텐츠 브라우저** 에서 **Game/Blueprints** 아래, **MyCharacter** 블루프린트를 엽니다.

1. **컴포넌트** 탭을 클릭한 다음, **컴포넌트 추가** 를 선택하고 **Particle System** 컴포넌트를 검색하여 추가한 뒤 **Fire** 라 이름짓습니다. 

	![](BPHT4_4.png)

1. **디테일** 패널에서 **Particles** (파티클) 아래, **None** (없음) 드롭다운 메뉴를 선택하고 **P_Fire** 애셋을 선택합니다.

	![](BPHT4_5.png)

1. 또 **디테일** 패널에서 **Auto Activate** (자동 활성화) 옵션을 체크 해제합니다.

	![](BPHT4_6.png)

	_이렇게 하면 뷰포트에 화염 이펙트가 꺼집니다. 플레이어가 불 속에 걸어 들어가면 켜 주도록 하겠습니다._

1. 뷰포트에서, 화염 이펙트를 캐릭터 발 아래쪽으로 이동(시켜 캐릭터 중앙에 떠다니지 않도록 )합니다. 

	![](BPHT4_7.png)

1. **그래프** 탭으로 돌아옵니다.

1. **SpawnActor Blueprint_Effect_Fire_C** 노드의 **Return Value** 를 끌어 놓은 다음 **Assign On Actor Begin Overlap** 이벤트 디스패처를 추가합니다.

	![](BPHT4_8.png)(w:740)

	_새로운 **Custom Event** 이름을 **OverlapFire** 같은 것으로 합니다._

1. **내 블루프린트** 창에서, **Ctrl** 키를 누르고 **Fire** 파티클 이펙트를 끌어 놓고, 거기서 다시 끌어 놓은 다음 **Activate** 노드를 검색하여 추가합니다.

	![](BPHT4_9.png)

1. **내 블루프린트** 창에서 새로운 **불리언** 변수를 만든 다음 이름을 **isOnFire** 로 합니다. 

	![](BPHT4_10.png)

1. **Alt** 키를 누르고 **isOnFire** 변수를 그래프에 끌어 놓은 다음 **Activate** 노드에 연결해 주고 **True** 설정합니다. 

	![](BPHT4_11.png)

	_**OverlapFire** 노드도 **Activate** 에 연결되어 있지 않은 경우 연결해 줍니다._

	_플레이어가 화염 이펙트에 들어서면 불이 붙게 됩니다._ 

[OBJECT:TopicList]
	[PARAM:title]
		간단한 생명력/대미지 시스템
	[/PARAM]
	[PARAM:description]
	지난 단계에서 플레이어에게 불이 붙을 수 있도록 설정해 줬습니다. 다음으로 플레이어가 생명력을 잃고 회복할 수 있도록 한 다음, 그 값을 **MyCharacter** 블루프린트에서 **위젯 블루프린트** 로 만든 HUD 에 전달해 줍니다. 
	[/PARAM]
[/OBJECT]

1. **MyCharacter** 블루프린트의 **내 블루프린트** 창에서 **플로트** 변수를 새로 만들어 **PlayerHealth** 라고 합니다. 

1. 블루프린트를 **컴파일** 합니다.

1. **PlayerHealth** 의 **디테일** 패널에서 **Default Value** 아래, **Player Health** 를 **1.0** 으로 설정합니다. 최대 생명력을 나타냅니다.

	![](BPHT4_12.png)

1. **이벤트 그래프** 아무데나 **우클릭** 한 다음 **Event Tick** 노드를 검색하여 추가합니다.

1. **Event Tick** 을 **분기** 노드에 연결한 다음, **isOnFire** 변수를 **Ctrl** 드래그하여 놓고 **분기** 의 **Condition** 에 연결합니다. 

	![](BPHT4_13.png)

1. **분기** 의 **False** 를 끌어 또다른 **분기** 노드에 연결합니다.

1. **PlayerHealth** 변수를 **Ctrl** 드래그하여 놓고 (**1** 로 설정된) **<** 노드에 연결한 다음 **분기** 의 **Condition** 에 연결합니다. 

	![](BPHT4_14.png)

1. 새로운 **분기** 의 **True** 를 끌어 놓은 다음 **Delay** 노드를 추가(하고 **1.5** 로 설정)한 뒤, **Set Player Health** 노드에 연결합니다.

1. **PlayerHealth** 변수를 **Ctrl** 드래그하여 놓은 다음 (**.05** 로 설정된) **Float + Float** 노드에 연결한 뒤, **Set Player Health** 에 연결합니다.  

	![](BPHT4_15.png)

	_플레이어에 불이 붙어있지 않은지 보고, 생명력이 1 (최대)보다 낮다면 1.5 초마다 .05 씩 더해줍니다._

1. 첫째 **분기** 의 **True** 를 끌어 놓은 다음 **분기** 를 또하나 추가합니다. 

1. **PlayerHealth** 변수를 **Ctrl** 드래그하여 놓은 다음 (**0.0** 으로 설정된) **<=** 노드에 연결한 뒤 **분기** 의 **Condition** 에 물려줍니다. 

	![](BPHT4_16.png)

1. 새로운 **분기** 의 **False** 를 끌어 놓은 다음 **Delay** 노드를 추가(한 뒤 **0.5** 로 설정)하고, **Set Player Health** 노드에 연결합니다.

1. **PlayerHealth** 변수를 **Ctrl** 드래그하여 놓은 다음 **Float - Float** 노드에 연결(하고 **.05** 로 설정)한 뒤, **Set Player Health** 에 연결합니다.  

	![](BPHT4_17.png)

1. 새로운 **분기** 의 **True** 를 끌어 놓은 다음 **Print String** 노드를 추가하고 **In String** 텍스트를 **운명하셨습니다!!** 같은 것으로 설정합니다. 

	![](BPHT4_18.png)

	_플레이어가 불에 붙어 있고, 생명력이 0 이하이면 **운명하셨습니다!!** 텍스트를 표시합니다._

	_플레이어가 불에 붙어있고, 생명력이 0 보다 크면, .5 초마다 .05 씩 뺍니다._

	_보통 여기에 플레이어의 사망 상태를 추가해 주거나 해야 하지만, 지금은 텍스트 표시로 충분합니다._

1. 블루프린트를 **컴파일** 후 **저장** 합니다.
	
	[REGION:lightbox]
	[![](BPHT4_19.png)(w:740)](BPHT4_19.png)
	[/REGION]

	_시퀀스가 위와 같을 것입니다. 이미지를 클릭하면 원래 크기로 보입니다._

	_에디터에서 플레이해 보면 작동은 하는 듯 보이지만, HUD 가 없어서 생명력이 얼마나 되는지 잃고 있는지를 알 수가 없습니다._

	_다음으로 간단한 HUD 를 만들어 **MyCharacter** 블루프린트에서 **PlayerHealth** 값을 구한 뒤 HUD 에 표시해 주겠습니다._

[OBJECT:TopicList]
	[PARAM:title]
		HUD 에 정보 전달하기
	[/PARAM]
	[PARAM:description]
	다음으로 HUD 를 만든 다음 **MyCharacter** 블루프린트에서 헬쓰 값을 구하고 HUD 에 표시해 주도록 하겠습니다. 
	[/PARAM]
[/OBJECT]

1. **콘텐츠 브라우저** 에서 **생성** 버튼을 클릭한 다음 **유저 인터페이스** 아래 **위젯 블루프린트** 를 클릭합니다.

	![](BPHT4_20.png)

1. **위젯 블루프린트** 이름을 **GameHUD** 같은 것으로 짓고 블루프린트를 엽니다.

1. **위젯 블루프린트** 안에서 **팔레트/일반** 아래 **Text Block** 을 끌어 **계층구조** 창의 **CanvasPanel** 에 놓습니다.

	![](BPHT4_21.png)

1. 마찬가지로 **팔레트/일반** 에서 **Progress Bar** 를 끌어 **계층구조** 창의 **CanvasPanel** 에 놓습니다. 

1. **Text Block** 을 선택한 채로 **디테일** 패널에서 **Text** 칸에 **Health :** 라 입력하고, (옵션) **Size** 는 **32** 로 설정합니다. 

	![](BPHT4_22.png)

1. 마찬가지로 **Text Block** 에 대한 **디테일** 패널에서 **Layout** 아래, **앵커** 버튼을 클릭한 다음 아래와 같은 앵커를 선택합니다. 

	![](BPHT4_23.png)

	_**앵커** 를 사용하면 화면 크기 조정시 지정된 위치에 앵커의 기준을 잡습니다._

	[REGION:note]
	**위젯** 및 **위젯 블루프린트** 사용 관련 상세 정보는 [**언리얼 모션 그래픽**](Engine/UMG) 문서를 참고하세요.
	[/REGION]

1. 그리드에서, **Health** 텍스트와 그 크기가 화면 좌상단 구석쯤에 오도록 조절합니다. 

	![](BPHT4_24.png)

1. Progress Bar 를 클릭한 다음 **Health** 텍스트 옆에 오도록 이동/크기조절 합니다. 

	![](BPHT4_25.png)

1. progress bar 에 대한 **디테일** 패널에서 **Fill Color and Opacity** 옵션을 선택한 뒤 푸르스름한 색을 선택하고 **OK** 를 눌러 할당합니다.

	![](BPHT4_26.png)

1. 마찬가지로 progress bar 에 대한 **디테일** 패널에서, **Percent** 옆의 **바인드** 버튼을 누른 다음 **바인딩 생성** 을 클릭합니다.

	![](BPHT4_27.png)

1. 그래프에서, **Get Player Character**, **Cast To MyCharacter** 한 뒤 **As My Character C** 핀을 끌어놓고 **Get Player Health** 를 검색해 추가합니다. 

	![](BPHT4_28.png)(w:740)

1. **PlayerHealth** 를 **ReturnNode** 의 **ReturnValue** 에 연결한 다음 창 우상단 구석의 **디자이너** 탭을 클릭합니다.

1. **Percent** 섹션을 다시 확인하여 (바인딩되어있지 않다면), **바인딩** 을 누른 다음 방금 새로 만든 함수를 선택합니다.

	![](BPHT4_29.png)

1. 블루프린트를 **컴파일** 후 **저장** 합니다.

1. **콘텐츠 브라우저** 에서 **Game/Blueprints** 아래 **MyCharacter** 블루프린트를 엽니다.

1. **이벤트 그래프** 아무데나 **우클릭** 한 다음 **Event Begin Play** 노드를 검색해 추가합니다.

1. **Event Begin Play** 노드를 끌어 놓은 다음 **Create Widget** 노드를 검색해 추가합니다.

	![](BPHT4_30.png)

1. **Class** 드롭다운을 **GameHUD** 로 설정한 다음 **Return Value** 를 끌어놓고 **Add to Viewport** 노드를 검색해 추가합니다.

	![](BPHT4_31.png)

	_플레이어 캐릭터가 스폰되면, GameHUD 를 생성하여 플레이어 뷰포트에 추가합니다._

1. 블루프린트를 **컴파일** 후 **저장** 하고 닫습니다.

1. **씬 아웃라이너** 또는 **레벨 뷰포트** 에서, 작은 물 웅덩이에 만든 **TriggerBox** 를 선택하고 **레벨 블루프린트** 를 엽니다.

1. 그 **TriggerBox** 에 대해 **OnActorBeginOverlap** 이벤트를 추가합니다. 

1. **Get Player Character** 노드와 **Cast To MyCharacter** 를 사용한 다음 **As My Character C** 를 끌어놓고 **Get Fire*** 를 추가한 뒤 **Deactivate** 시킵니다.

1. 다시 **As MyCharacter C** 핀을 끌어놓고, **Set isOnFire** 를 **False** 로 설정합니다. 

1. 블루프린트를 **컴파일** 후 **저장** 한 뒤 닫습니다.

시각적인 도움 없이 지난 5 단계를 완료할 수 있었나요? 못했다면, 아래 이미지에 답이 있습니다.

[REGION:lightbox]
[![](BHHT4_32a.png)(w:720)](BHHT4_32b.png)
[/REGION]

이쯤에서 에디터에서 플레이해 보면 아래와 비슷한 것이 생겨 있을 것입니다.

![](GIF4.gif)(convert:false)

레벨을 시작하면 가득찬 생명력 막대가 보일 것입니다. 플레이어가 바위를 스폰하면, 폭발하면서 화염을 남기고, 플레이어가 거기에 들어서면 불이 붙으면서 캐릭터가 생명력을 잃도록 합니다. 작은 물웅덩이 안으로 들어가면 불이 진화되고 플레이어는 생명력을 잃던 것에서 서서히 회복을 시작합니다.

다음 글에서는 여러 **블루프린트** 사이의 통신에 대해서는 물론, 여러가지 유형의 **블루프린트** 와의 통신에 대해서도 알아보겠습니다. 

-->

%Steps%

