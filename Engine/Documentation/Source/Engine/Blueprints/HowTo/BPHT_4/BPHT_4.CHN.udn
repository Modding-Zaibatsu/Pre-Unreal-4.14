Availability: Public
Title:4. 从关卡传递信息到角色
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/HowTo
Description:在这个步骤中，我们使用关卡蓝图来获取生成点的位置，并将其中一个移动到角色蓝图。 


[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[Previous Step](Engine\Blueprints\HowTo\BPHT_3 "%Engine\Blueprints\HowTo\BPHT_3:title%") 
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[How-To Home](Engine\Blueprints\HowTo "%Engine\Blueprints\HowTo:Title%")
	[/PARAM]
	[PARAM:next]
	[Next Step](Engine\Blueprints\HowTo\BPHT_5 "%Engine\Blueprints\HowTo\BPHT_5:title%") 
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%


1. 在主编辑器视图的工具栏中，点击 **Blueprints** （蓝图）按钮并选择 **Open Level Blueprint** （打开关卡蓝图）。 

	![](OpenLevelBlueprint.png)

1. 在图表中， **右键点击** 并添加 **Event Begin Play** （开始播放事件）节点以及 **Get Player Character** （获取玩家角色）节点。 

	![](GetPlayerCharacter.png)

1. 从  **Get Player Character** （获取玩家角色）节点的 **Return Value** （返回值）引脚进行拖拽，并添加一个 **Cast To FirstPersonCharacter**  （投射到第一人称角色）节点。 

	![](CastToNode.png)

	在此我们使用 **Cast** （投射）节点来首先获取玩家角色，然后获取由该玩家使用的角色蓝图（本例中被称为 **FirstPersonCharacter** ，并且我们使用它来对可玩角色设置其它脚本）。 通过使用投射节点，我们得以访问玩家角色的蓝图以及变量、事件和其中的函数。 

	[REGION:note]
	关于 **Casting** （投射）的更多信息，请参照[](Engine/Blueprints/UserGuide/CastNodes)文档页面。 
	[/REGION]

1. 按照下图显示内容来连接节点，然后在 **Cast To** 节点的 **Return Value** （返回值）处，选择 **Promote to variable** （添加到变量中）。 

	![](PromoteToVariable.png)

	我们会创建一个变量，从而保存对玩家正在使用的 **FirstPersonCharacter** 蓝图的引用，这样我们就不必每次使用投射来获取结果。 通过在 Event Begin Play （开始播放事件）执行此操作，它将会在稍后为我们节省时间。 

1. 选择添加的变量，然后在 **详细信息** 面板中，将其重命名为 **MyCharacter** 。 

	![](RenamedMyCharacter.png)

1. 在 **MyCharacter** 节点的 **Return Value** （返回值）处，添加 **Assign Get Spawn Location** （分配获取生成位置）节点。 

	![](AssignSpawnLocation.png)

	这就是我们创建的 **Event Dispatcher** （事件调度器）。 当您选择它时，将会添加两个额外的节点。 
	
	[REGION:note]
	如果您在列表中没有看到这个节点，请确认您点击了 **FirstPersonCharacter** 蓝图中的 **Compile** （编译）并再次尝试。 
	[/REGION]

1. 请确认您连接了 **Bind Event** （绑定事件）的新增加的节点。 

	![](ConnectAddedNodes.png)

	现在，当我们在角色蓝图中调用 **GetSpawnLocation** 时，也会同时调用这个新的自定义事件。 

1. 按住 **Control** 键，从 **MyBlueprint** 窗口中拖入 **MyCharacter** 变量，然后添加 **Set Spawn Location** （设置生成位置）节点。 

	![](SetSpawnLocation.png)

1. 返回主编辑器窗口，并在 **World Outliner** （世界大纲视图）中，搜索并选择每个 **Target Points** （目标点）。 

	![](SelectAllTargetPoints.png)

1. 返回 **Level Blueprint** （关卡蓝图）并在图表中 **右键点击** 并选择 **Create References to 3 selected Actors** （创建到3个选择的Actor的引用）。 

	![](AddReferences.png)

1. 在图表中 **右键点击** 并添加 **Make Array** （生成数组）节点，然后将其与每个 **Target Points** （目标点）连接。 

	![](MakeArray.png)

	您可以通过点击 **Add Pin** （添加引脚）按钮来添加更多引脚。 这个数组会存储我们可以访问的目标点集合。 

1.	在 **Array** （数组）引脚，添加 **Get** （获取）节点。 

1.	在 **Get** 节点，添加 **Random Integer in Range** （范围内的随机整数）节点， **Min** 设置为 **0** ， **Max** 设置为 **2** 。 

	![](GetNodeAdded.png)

	在这里我们获得了可用作生成点的随机目标点。 如果您有更多的生成位置，您可以将它们添加到数组中，并增大Range（范围）节点中的 **Max** 值从而包含它们。 

1.	从 **Get** 节点，添加 **Get Actor Transform** （获取Actor变换）节点，并将其连接到 **Set Spawn Location** （设置生成位置）节点。 

	[REGION:lightbox]
	[![](FullScript.png)(w:640)](FullScript.png)
	[/REGION]

	您的完整脚本应该和上图类似，请点击以查看完整内容。 

在这个页面里我们进行了许多操作！ 我们使用 **Cast** 节点来访问角色蓝图，然后绑定自定义事件到其中的事件调度器。 这样我们可以在事件调度器被调用时，触发关卡蓝图中的自定义事件。 我们随后获取随机生成位置之一，并将其放置在角色蓝图中作为变量生成位置（它用于我们生成岩石的位置）。 

在下一步，我们会让岩石变得可射击，并能够使用名称为 **OnHit** 的绑定事件进行销毁（也就是在岩石被射击时的事件）。 











	




<!-- old

Before we can pass information from the **Character** Blueprint to the HUD, we will need to create a few things. We will need to create a visual source of damage (catching the player on fire) as well as the damage/health system itself. With those set, we can pass the player's health value to the HUD so the player can see how much health they have and if they are losing it.

[OBJECT:TopicList]
	[PARAM:title]
		Setting the Player On Fire
	[/PARAM]
	[PARAM:description]
	Here we will activate/deactive a particle effect inside the **Character** Blueprint when the player is/is not on fire. 
	[/PARAM]
[/OBJECT]

1. In the **Content Browser** under **Game/Blueprints**, open the **MyCharacter** Blueprint. 

1. Click the **Components** tab, then click **Add Component** and search for and add a **Particle System** component and name it **Fire**. 

	![](BPHT4_4.png)

1. In the **Details** panel under **Particles**, click the **None** drop down menu and select the **P_Fire** asset. 

	![](BPHT4_5.png)

1. Also in the **Details** panel, uncheck the **Auto Activate** option. 

	![](BPHT4_6.png)

	_This will turn the fire effect off in the viewport. We will turn it on when the player walks into the fire._

1. In the viewport, move the fire effect down towards the characters feet (so that it is not floating in the center of the character). 

	![](BPHT4_7.png)

1. Return to the **Graph** tab. 

1. Drag off the **Return Value** of the **SpawnActor Blueprint_Effect_Fire_C** node and add the **Assign On Actor Begin Overlap** Event Dispatcher. 

	![](BPHT4_8.png)(w:740)

	_Name the new **Custom Event** something to the effect of **OverlapFire**._

1. In the **MyBlueprint** window, hold **Control** and drag in the **Fire** Particle Effect then drag off it and search for and add an **Activate** node. 

	![](BPHT4_9.png)

1. In the **MyBlueprint** window, create a new **Bool** variable and name it **isOnFire**. 

	![](BPHT4_10.png)

1. Hold **Alt** and drag the **isOnFire** variable into the graph and hook it up to the **Activate** node and set it to **True**. 

	![](BPHT4_11.png)

	_Also hook up the **OverlapFire** node to **Activate** if you have not done so already._

	_The player will now catch on fire when entering the fire effect._ 

[OBJECT:TopicList]
	[PARAM:title]
		Simple Health/Damage System
	[/PARAM]
	[PARAM:description]
	In the last step, we set it up so that the player can catch on fire. Next we will set it up so that the player can lose and regen health and pass the player's health value from our **MyCharacter** Blueprint to a HUD constructed in a **Widget Blueprint**. 
	[/PARAM]
[/OBJECT]

1. In the **MyCharacter** Blueprint under the **MyBlueprint** window, create a new **Float** variable called **PlayerHealth**. 

1. **Compile** the Blueprint. 

1. In the **Details** panel for **PlayerHealth** under the **Default Value**, set **Player Health** to **1.0** representing Max Health. 

	![](BPHT4_12.png)

1. **Right-click** anywhere in the **Event Graph** and search for and add an **Event Tick** node. 

1. Connect the **Event Tick** to a **Branch** node, then **Control** drag in the **isOnFire** variable and connect it to the **Condition** of the **Branch**. 

	![](BPHT4_13.png)

1. Off the **False** of the **Branch**, connect another **Branch** node. 

1. **Control** drag in the **PlayerHealth** variable and connect it to a **<** node (set to **1**), then connect that to the **Condition** of the **Branch**. 

	![](BPHT4_14.png)

1. Off the **True** of the new **Branch**, add a **Delay** node (set to **1.5**) then connect the **Delay** to a **Set Player Health** node. 

1. **Control** drag in the **PlayerHealth** variable and connect it to a **Float + Float** node (set to **.05**), then connect it to the **Set Player Health**.  

	![](BPHT4_15.png)

	_This states that if the player is not on fire and their health is less than 1 (maximum) that we will add .05 to the player health every 1.5 seconds._

1. Off the **True** of the first **Branch**, add another **Branch**. 

1. **Control** drag in the **PlayerHealth** variable and connect it to a **<=** node (set to **0.0**) and feed that into the **Condition** of the **Branch**. 

	![](BPHT4_16.png)

1. Off the **False** of the new **Branch**, add a **Delay** node (Set to **0.5**) then connect the **Delay** to a **Set Player Health** node. 

1. **Control** drag in the **PlayerHealth** variable and connect it to a **Float - Float** node (set to **.05**), then connect it to the **Set Player Health**.  

	![](BPHT4_17.png)

1. Off the **True** of the new **Branch**, add a **Print String** node with **In String** text set to something such as **You're Dead!!**. 

	![](BPHT4_18.png)

	_This states that if the player is on fire and their health is less or equal to 0, display **You're Dead!!** text._

	_If the player is on fire and their health is greater than 0, subtract .05 from their health every .5 seconds._

	_Here you would normally add a new state for the player to take when they are dead, however the text will work for our purposes._

1. **Compile** and **Save** the Blueprint.  
	
	[REGION:lightbox]
	[![](BPHT4_19.png)(w:740)](BPHT4_19.png)
	[/REGION]

	_Your sequence should look similar to above, click image for full view._

	_If we were to jump into the editor this would function, but the player has no idea what their health is or that they are losing it since there is no HUD._

	_Next we will create a simple HUD and get the **PlayerHealth** value from the **MyCharacter** Blueprint and pass it to and display it on a HUD._

[OBJECT:TopicList]
	[PARAM:title]
		Passing Information to a HUD
	[/PARAM]
	[PARAM:description]
	Next, we will create a HUD and get the health value from the **MyCharacter** Blueprint and display it on our HUD. 
	[/PARAM]
[/OBJECT]

1. From the **Content Browser**, click the **New** button, then under **User Interface**, click the **Widget Blueprint**. 

	![](BPHT4_20.png)

1. Name the **Widget Blueprint** something such as **GameHUD** then open the Blueprint. 

1. Inside the **Widget Blueprint**, under **Palette/Common**, drag a **Text Block** onto the **CanvasPanel** in the **Hierarchy** window. 

	![](BPHT4_21.png)

1. Also in the **Palette/Common** section, drag a **Progress Bar** onto the **CanvasPanel** in the **Hierarchy** window. 

1. With the **Text Block** selected, in the **Details** panel, enter the text **Health :** for **Text** and (optional) increase the **Size** to **32**. 

	![](BPHT4_22.png)

1. Also in the **Details** panel for the **Text Block** under **Layout**, click the **Anchors** button and select the anchor shown below. 

	![](BPHT4_23.png)

	_Using **Anchors** will "anchor" the widget to the location specified when adjusting the size of the screen display._

	[REGION:note]
	For more information on using **Widgets** and **Widget Blueprints**, please refer to: [**Unreal Motion Graphics**](Engine/UMG)
	[/REGION]

1. On the grid, you can move the **Health** text and resize it so that it is somewhere near the upper left corner of the screen. 

	![](BPHT4_24.png)

1. Click on the progress bar and move/resize it so that it is adjacent to the **Health** text. 

	![](BPHT4_25.png)

1. In the **Details** panel for the progress bar, click the **Fill Color and Opacity** option, set it to a greenish color then click **OK** to assign it.

	![](BPHT4_26.png)

1. Also in the **Details** panel for the progress bar, click the **Bind** button next to **Percent** then choose **Create Binding**. 

	![](BPHT4_27.png)

1. In the graph, **Get Player Character** and **Cast To MyCharacter**, then drag off the **As My Character C** pin and search for **Get Player Health**. 

	![](BPHT4_28.png)(w:740)

1. Connect the **PlayerHealth** to the **ReturnValue** of the **ReturnNode** then click the **Designer** tab button in the upper right corner of the window. 

1. Check the **Percent** section again (if it is not already bound), click **Bind** and choose the new function that was just created.

	![](BPHT4_29.png)

1. **Compile** and **Save** then close the Blueprint. 

1. In the **Content Browser** under **Game/Blueprints**, open the **MyCharacter** Blueprint. 

1. **Right-click** anywhere in the **Event Graph** and search for and add an **Event Begin Play** node. 

1. Drag off the **Event Begin Play** and search for and add a **Create Widget** node. 

	![](BPHT4_30.png)

1. Set the **Class** drop-down to **GameHUD** and drag off the **Return Value** and search for and add the **Add to Viewport** node. 

	![](BPHT4_31.png)

	_When the player character spawns, this will now create our GameHUD and add it to the player's viewport._

1. **Compile** and **Save** then close the Blueprint. 

1. From the **SceneOutliner** or **Level Viewport**, select the **TriggerBox** we created for our small pool then open the **Level Blueprint**. 

1. Add an **OnActorBeginOverlap** event for the **TriggerBox**. 

1. Use a **Get Player Character** node and **Cast To MyCharacter**, then off the **As My Character C**, **Get Fire*** and **Deactivate** it. 

1. Also off the **As MyCharacter C** pin, **Set isOnFire** to **False**. 

1. **Compile** and **Save** then close the Blueprint.

Were you able to finish the last 5 steps without visual aid? If not, click the image below to reveal the answer. 

[REGION:lightbox]
[![](BHHT4_32a.png)(w:720)](BHHT4_32b.png)
[/REGION]

At this point you should have something similar to below when playing in the editor. 

![](GIF4.gif)(convert:false)

You should see that a full health bar is displayed upon starting the level. When the player spawns a rock, it explodes leaving the fire behind that when entered causes the character to lose health and fire should be attached to them. When jumping inside the small pool, the fire should be extinguished and the player will stop losing health and start gaining some back.

On the next page, we will learn about communicating with multiple **Blueprints** as well as communicating with multiple different types of **Blueprints**. 

-->

%Steps%

