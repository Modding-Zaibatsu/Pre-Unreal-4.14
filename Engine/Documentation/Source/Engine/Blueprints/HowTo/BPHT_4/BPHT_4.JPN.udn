INTSourceChangelist:2686156
Availability:Public
Title:4.情報をレベルから Character に渡す
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/HowTo
Description:Level ブループリント を使用して、スポーン ポイントの位置を取得して、その情報を Character ブループリントに渡してみましょう。 
Version:4.9


[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[前のステップ](Engine\Blueprints\HowTo\BPHT_3 "%Engine\Blueprints\HowTo\BPHT_3:title%") 
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[How To ホーム](Engine\Blueprints\HowTo "%Engine\Blueprints\HowTo:Title%")
	[/PARAM]
	[PARAM:next]
	[次のステップ](Engine\Blueprints\HowTo\BPHT_5 "%Engine\Blueprints\HowTo\BPHT_5:title%") 
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%


1. メイン ツールバーで **[Blueprints]** ボタンをクリックして、**[Open Level Blueprint (Level ブループリントを開く)]** を選択します。 

	![](OpenLevelBlueprint.png)

1. グラフ内を **右クリック** して、 **Event Begin Play** ノードと **Get Player Character** ノードを追加します。 

	![](GetPlayerCharacter.png)

1. **Get Player Character** の **Return Value** を引き出して、 **Cast To MyCharacter** ノードを追加します。 

	![](CastToNode.png)

	ここで、 **Cast** ノードを使ってプレイヤー キャラクターを取得してから、そのプレイヤーが使用する Character ブループリントを取得します (この場合は **FirstPersonCharacter** が呼び出されて、プレイ可能なキャラクター用の他のスクリプトを設定します)。Cast ノードを使って、プレイヤー キャラクターのブループリントとその中の変数、イベント、関数へアクセスすることができます。 

	[REGION:note]
	**Casting** に関する詳細は、 [](Engine/Blueprints/UserGuide/CastNodes) のドキュメントをご覧ください。 
	[/REGION]

1. 以下のようにノードを接続し、 **Cast To** ノードの **Return Value** を引き出して、 **Promote to variable** を選択します。 

	![](PromoteToVariable.png)

	プレイヤーが使用する **FirstPersonCharacter** ブループリントへのリファレンスを維持するための変数を作成して、Cast を毎回使わなくても済むようにします。Event Begin Play でこの処理をすると、後に時間が節約できます。 

1. 昇格した変数を選択して **[Details (詳細)]** パネルで名前を「 **MyCharacter** 」に変更し、Boolean 型であることを確認します。 

	![](RenamedMyCharacter.png)

1. **MyCharacter** ノードの **Return Value** を引き出して、 **Assign Get Spawn Location** を追加します。 

	![](AssignSpawnLocation.png)

	これが作成された **イベント ディスパッチャー** です。これを選択すると、ノードが 2 つ追加されます。 

	[REGION:note]
	リストにこのノードがない場合は、 **FirstPersonCharacter** ブループリントで **[Compile]** を必ずクリックして、再度確認してみてください。 
	[/REGION]

1. **Bind Event** から新しく追加されたノードに接続していることを確認してください。 

	![](ConnectAddedNodes.png)

	**GetSpawnLocation** が Character ブループリント内で呼び出されると、この新規の Custom Event も呼び出されます。 

1. **Control** を押したまま **[MyBlueprint]** ウィンドウから **MyCharacter** 変数をドラッグして、 **Set Spawn Location** ノードを追加します。 

	![](SetSpawnLocation.png)

1. メインのエディタ ウィンドウに戻り、 **ワールド アウトライナー** で **Target Point** を検索して 1 つずつ選択します。 

	![](SelectAllTargetPoints.png)

1. **Level ブループリント** に戻り、グラフ内を **右クリック** し **[Create References to 3 selected Actors (選択した 3 つのアクタにリファレンスを作成)]** オプションを選びます。 

	![](AddReferences.png)

1. グラフ内を **右クリック** して、**Make Array** ノードを追加し、それぞれの **Target Point** へ接続します。 

	![](MakeArray.png)

	**[Add Pin (ピンを追加)]** ボタンをクリックすれば、ピンを追加することができます。この配列は、アクセス可能なターゲットポイントのコレクションを格納します。 

1.	**Array** ピンを引き出して **Get** ノードを追加します。 

1.	**Get** ノードを引き出して、 **Random Integer in Range** ノードを追加し、 **[Min]** を 0 に、 **[Max]** を 2 に設定します。 

	![](GetNodeAdded.png)

	ここで、スポーン ポイントとして使用するために、ランダムにターゲットポイントを取得します。スポーン位置がもっと多い場合、それらを配列に追加して Range ノードの Random Integer の **Max** 値を増やせば、それらを含むことができます。 

1.	**Get** ノードを引き出して **Get Actor Transform** ノードを追加し、それを **Set Spawn Location** ノードに接続します。 

	[REGION:lightbox]
	[![](FullScript.png)(w:640)](FullScript.png)
	[/REGION]

	スクリプト全体は上の画面のようになるはずです。クリックすると拡大表示されます。 

このページではかなりいろいろな事をやってみました！**Cast** ノードを使って Character ブループリントにアクセスしてから、その中にある Custom Event をイベントディスパッチャーにつなげました。これにより、イベントディスパッチャーが呼び出されると必ず Level ブループリントの Custom Event を実行することができます。そして、スポーン位置の 1 つをランダムに取得し、それを (岩をスポーンする位置に使用する) 変数 Spawn Location として Character ブループリントへ戻します。 

次のステップでは、Bind Event と **OnHit** というイベントを使って、岩を撃ち破壊できるようにします。 











	<!-- old






情報を **Character** ブループリントから HUD へパスする前に、幾つかのものを作成しておかなければなりません。ダメージのビジュアル ソースおよびダメージ/ヘルス システムそのものを作成する必要があります。プレイヤーのヘルス値を HUD にパスできる設定にしておくと、プレイヤーはヘルス値の残量およびヘルス値が減少しているかどうかを確認できます。

[OBJECT:TopicList]
	[PARAM:title]
		炎が燃え移ったキャラクターの設定
	[/PARAM]
	[PARAM:description]
	このセクションでは、プレイヤーに炎が燃え移っている / 燃え移っていない時に **Character** ブループリント内でパーティクルエフェクトを有効 / 無効にしてみます。 
	[/PARAM]
[/OBJECT]

1. **ゲーム / ブループリント** の **コンテンツ ブラウザ** から **MyCharacter** ブループリントを開きます。 

1. **[Components]** タブから **[Add Component (コンポーネントを追加)]** をクリックして **Particle System** コンポーネントを探して追加し、「**Fire**」と名付けます。 

	![](BPHT4_4.png)

1. **[Details]** パネルの **[Particles]** の **[None]** ドロップダウン メニューをクリックし **P_Fire** アセットを選択します。 

	![](BPHT4_5.png)

1. **[Details]** パネルで、 **[Auto Activate]** オプションのチェックも外します。 

	![](BPHT4_6.png)

	_これにより、ビューポート内で炎のエフェクトがオフになります。プレイヤーが炎の中へ歩いていく時にエフェクトをオンにします。_

1. ビューポート内で、炎のエフェクトをキャラクターの足に向かって下げていきます (キャラクターの中心で漂わないようにするためです)。 

	![](BPHT4_7.png)

1. **[Graph]** タブに戻ります。 

1. **SpawnActor Blueprint_Effect_Fire_C** ノードの **Return Value** をドラッグし、 **Assign On Actor Begin Overlap** Event Dispatcher ノードを探して追加します。 

	![](BPHT4_8.png)(w:740)

	_新規の **Custom Event** に **OverlapFire** のエフェクトを思わせる名前を付けます。_

1. **[MyBlueprint]** ウィンドウで、 **Control** を押しながら **Fire** パーティクルエフェクトへドラッグしたら、 **Activate** ノードを探して追加します。 

	![](BPHT4_9.png)

1. **[MyBlueprint]** ウィンドウで、新規に **Bool** 変数を作成し、それを「**isOnFire**」と名付けます。 

	![](BPHT4_10.png)

1. **Alt** を押しながら **isOnFire** 変数をグラフ内へドラッグし、 **Activate** ノードへ接続し **True** に設定します。 

	![](BPHT4_11.png)

	_**OverlapFire** ノードを **Activate** に接続していない場合は接続します。_

	_火のエフェクトに入ると、プレイヤーに炎が燃え移るようになります。_ 

[OBJECT:TopicList]
	[PARAM:title]
		単純なヘルス / ダメージ システム
	[/PARAM]
	[PARAM:description]
	最後のステップでは、まずプレイヤーに炎が燃え移るように設定します。次に、プレイヤーのヘルス値が増減し、プレイヤーのヘルス値が **MyCharacter** ブループリントから **Widget ブループリント** に作成された HUD にパスされるように設定していきます。 
	[/PARAM]
[/OBJECT]

1. **[MyBlueprint]** ウィンドウの **MyCharacter** ブループリントに、 **PlayerHealth** という **Float** 変数を新規作成します。 

1. ブループリントを **コンパイル** します。 

1. **デフォルト値** の **PlayerHealth** の **[Details]** パネルで、 **Player Health** を最大ヘルス値を表す **1.0** に設定します。 

	![](BPHT4_12.png)

1. **Event Graph** をどこか **右クリック** して、 **Event Tick** ノードを検索して追加します。 

1. **Event Tick** を **Branch** ノードに接続して、 **Control** を **isOnFire** 変数にドラッグして **Branch** の **Condition** に接続します。 

	![](BPHT4_13.png)

1. **Branch** の **False** から別の **Branch** ノードを接続します。 

1. **Event Tick** イベントを **Branch** ノードに接続して、 **Control** を isOnFire 変数にドラッグして **Branch** の **Condition** に接続します。 

	![](BPHT4_14.png)

1. 新規の **Branch** の **True** から **Delay** ノード (**1.5** に設定) を追加し、 **Delay** を **Set Player Health** ノードに接続します。 

1. **Control** を **PlayerHealth** 変数にドラッグし、 **Float + Float** ノード (**.05** に設定) に接続し、それを **Set Player Health** に接続します。  

	![](BPHT4_15.png)

	_これにより、プレイヤーに火が燃え移っていない場合はヘルス値が 1 未満 (最大値) なので、 1.5 秒ごとにプレイヤーのヘルス値に .05 追加されていくことになります。_

1. 1 つ目の **Branch** の **True** から、もう 1 つ **Branch** を追加します。 

1. **Control** を **PlayerHealth** 変数にドラッグし、 **<=** ノード (**0.0** に設定) に接続し、 **Branch** の **Condition** に接続します。 

	![](BPHT4_16.png)

1. 新規の **Branch** の **False** から **Delay** ノード (**0.5** に設定) を追加し、 **Delay** を **Set Player Health** ノードに接続します。 

1. **Control** を **PlayerHealth** 変数にドラッグし、 **Float - Float** ノード (**.05** に設定) に接続し、それを **Set Player Health** に接続します。  

	![](BPHT4_17.png)

1. 新規の **Branch** の **True** から、 **You're Dead!!** などに設定されている **In String** のテキストのある **Print String** を追加します。 

	![](BPHT4_18.png)

	_これにより、プレイヤーに火が燃え移っている場合はヘルス値が 0 以下になり、「**You're Dead!!**」というテキストが表示されます。_

	_プレイヤーが燃えていて、ヘルス値が 0 を上回る場合は、 5 秒ごとにヘルス値が .05 減少してきます。_

	_プレイヤーが死亡すると、通常プレイヤーが取るステートを新規に追加します。ただし、テキストは目的に対して有効です。_

1. ブループリントを **コンパイル** し **保存** します。  
	[REGION:lightbox]

	[![](BPHT4_19.png)(w:740)](BPHT4_19.png)
	[/REGION]

	_シーケンスはこのように見えるはずです。全画面表示にするには画像をクリックしてください。_

	_これはエディタにジャンプしたい場合に機能しますが、 HUD がないので、プレイヤーは自分のヘルス値やヘルス値が減っているかどうかについて全く分かりません。_

	_次に単純な HUD を作成して **MyCharacter** ブループリントから **PlayerHealth** 値を取得し、それをパスして HUD 上に表示させます。_

[OBJECT:TopicList]
	[PARAM:title]
		HUD へ情報をパスする
	[/PARAM]
	[PARAM:description]
	次に単純な HUD を作成して **MyCharacter** ブループリントからヘルス値を取得し、それを HUD 上に表示させます。 
	[/PARAM]
[/OBJECT]

1. **コンテンツ ブラウザ** で、 **[New]** ボタンをクリックし、 **ユーザーインターフェース** の **Widget ブループリント** をクリックします。 

	![](BPHT4_20.png)

1. **Widget ブループリント** に **GameHUD** といったような名前を付けてブループリントを開きます。 

1. **Widget ブループリント** の中の **Palette/Common** の **テキストブロック** を **[Hierarchy]** ウィンドウの **CanvasPanel** へドラッグします。 

	![](BPHT4_21.png)

1. さらに **Palette/Common** セクションで、 **進捗バー** を **[Hierarchy]** ウィンドウの **CanvasPanel** へドラッグします。 

1. **テキストブロック** を選択した状態で、 **[Details]** パネルの **[Text]** に **「Health :」** とテキスト入力し、(お好みで) **[Size]** を大きくして **32** にします。 

	![](BPHT4_22.png)

1. **レイアウト** の **テキストブロック** の **[Details]** パネルでも **[Anchors (アンカー)]** ボタンをクリックして以下に示されるアンカーを選択します。 

	![](BPHT4_23.png)

	_**[Anchors]** を使うと、画面表示のサイズ調整の際にウィジェットを指定位置に固定されます。_

	[REGION:note]
	**ウィジェット** と **Widget ブループリント** の使用方法に関しては、こちらを参照してください。[**Unreal Motion Graphics**](Engine/UMG)
	[/REGION]

1. グリッド上で、「**Health**」というテキストが画面の左上隅に近くなるように移動およびリサイズすることができます。 

	![](BPHT4_24.png)

1. 進捗バーをクリックして「**Health**」というテキストと隣り合わせになるように移動 / リサイズします。 

	![](BPHT4_25.png)

1. 進捗バーの **[Details]** パネルのオプションの **[Fill Color and Opacity (塗りつぶしの色と不透明度)]** をクリックして、緑系の色に設定し、 **[OK]** をクリックして割り当てます。

	![](BPHT4_26.png)

1. 進捗バーの **[Details]** パネルで、 **Percent** の横の **[Bind]** ボタンをクリックして **[Create Binding (バインドを作成)]** を選択します。 

	![](BPHT4_27.png)

1. グラフで、**Get Player Character** と **Cast To MyCharacter** 、 **As My Character C** ピンをドラッグして **Get Player Health** を探します。 

	![](BPHT4_28.png)(w:740)

1. **PlayerHealth** を **ReturnNode** の **ReturnValue** に接続し、ウィンドウの右上の **[Designer]** タブ ボタンをクリックします。 

1. **Percent** セクションを再度確認して (まだバインドされていない場合は) 、**[Bind]** をクリックして、作成されたばかりの新規関数を選択します。

	![](BPHT4_29.png)

1. **コンパイル** し **保存** してから、ブループリントを終了します。 

1. **ゲーム / ブループリント** の **コンテンツ ブラウザ** から **MyCharacter** ブループリントを開きます。 

1. **Event Graph** をどこか **右クリック** して、 **Event Begin Play** ノードを追加します。 

1. **Event Begin Play** をドラッグして、 **Create Widget** ノードを探して追加します。 

	![](BPHT4_30.png)

1. **Class** ドロップダウンを **GameHUD** に設定し、 **Return Value** をドラッグして **Add to Viewport** ノードを探して追加します。 

	![](BPHT4_31.png)

	_プレイヤー キャラクターがスポーンすると、 GameHUD が作成され、プレイヤーのビューポートに追加されます。_

1. **コンパイル** し **保存** してから、ブループリントを終了します。 

1. **シーン アウトライナー** または **レベル ビューポート** から、小さなプールのために作った **TriggerBox** を選択して **Level ブループリント** を開きます。 

1. **TriggerBox** 用に **OnActorBeginOverlap** を追加します。 

1. **Get Player Character** ノードと **Cast To MyCharacter** ノードを使って、 **As My Character C** を引き出して **Get Fire*** と **Deactivate** につなぎます。 

1. **As MyCharacter C** ピンから、 **As MyCharacter C** を **False** に設定します。 

1. **コンパイル** し **保存** してから、ブループリントを終了します。

図の説明がなくても、最後の 5 つのステップを完了することができましたか？完了できなかった方は、以下の画像をクリックして回答を開いてみてください。 

[REGION:lightbox]
[![](BHHT4_32a.png)(w:720)](BHHT4_32b.png)
[/REGION]

ここでエディタの中で再生すると、以下のようになっているはずです。 

![](GIF4.gif)(convert:false)

レベルが開始されると、ヘルス値バー全体が表示されているのが分かります。プレイヤーが岩をスポーンすると爆発して炎が発生し、そこに侵入するとキャラクターはヘルス値を失って炎がキャラクターへ燃え移ります。小さいプールに飛び込むと、炎は消えて、プレイヤーのヘルス値の減少が止まり、元の値に戻り始めます。

次のページでは、複数の **ブループリント** との通信だけでなく、異なる種類の **ブループリント** との通信方法についても学習します。 

-->

%Steps%

