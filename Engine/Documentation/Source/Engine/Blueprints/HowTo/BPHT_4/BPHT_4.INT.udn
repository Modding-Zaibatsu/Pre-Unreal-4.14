Availability: Public
Title:4. Passing Information from Level to Character
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/HowTo
Description:In this step we are using the Level Blueprint to get the location of our spawn points and kicking one over to our Character Blueprint. 
version: 4.9


[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[Previous Step](Engine\Blueprints\HowTo\BPHT_3 "%Engine\Blueprints\HowTo\BPHT_3:title%") 
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[How-To Home](Engine\Blueprints\HowTo "%Engine\Blueprints\HowTo:Title%")
	[/PARAM]
	[PARAM:next]
	[Next Step](Engine\Blueprints\HowTo\BPHT_5 "%Engine\Blueprints\HowTo\BPHT_5:title%") 
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%


1. From the toolbar in the Main Editor view, click the **Blueprints** button and select **Open Level Blueprint**. 

	![](OpenLevelBlueprint.png)

1. In the graph, **Right-click** and add an **Event Begin Play** node and a **Get Player Character** node. 

	![](GetPlayerCharacter.png)

1. Drag off the **Return Value** of the **Get Player Character** and add a **Cast To FirstPersonCharacter** node. 

	![](CastToNode.png)

	Here we are using a **Cast** node to first get the player character, then get the Character Blueprint used by that player (which in this case is called **FirstPersonCharacter** and is where we set up our other scripts for the playable character). By using the Cast node, we are able to access our player character's Blueprint and the variables, events, and functions within it. 

	[REGION:note]
	For more information on **Casting**, please see the [](Engine/Blueprints/UserGuide/CastNodes) documentation page. 
	[/REGION]

1. Connect the nodes as shown below, then off the **Return Value** of the **Cast To** node, select **Promote to variable**. 

	![](PromoteToVariable.png)

	We are going to create a variable to hold a reference to the **FirstPersonCharacter** Blueprint the player is using so that we do not have to use a Cast to get to it each time. By doing this upon Event Begin Play, it will save us time later. 

1. Select the promoted variable, then in the **Details** panel, rename it to **MyCharacter**. 

	![](RenamedMyCharacter.png)

1. Off the **Return Value** of the **MyCharacter** node, add the **Assign Get Spawn Location** node. 

	![](AssignSpawnLocation.png)

	This is the **Event Dispatcher** we created. When you select this, two additional nodes will be added. 
	
	[REGION:note]
	If you do not see this node in the list, make sure that you clicked **Compile** inside the **FirstPersonCharacter** Blueprint and try again. 
	[/REGION]

1. Make sure you connect the newly added nodes from the **Bind Event**. 

	![](ConnectAddedNodes.png)

	Now, when **GetSpawnLocation** is called in our Character Blueprint, this new Custom Event will also get called. 

1. Hold **Control** and drag in the **MyCharacter** variable from the **MyBlueprint** window, then off it add the **Set Spawn Location** node. 

	![](SetSpawnLocation.png)

1. Return to the Main Editor window and in the **World Outliner**, search for and select each of the **Target Points** by holding **Ctrl** and clicking each one. 

	![](SelectAllTargetPoints.png)

1. Return to the **Level Blueprint** and **Right-click** in the graph and select the **Create References to 3 selected Actors**. 

	![](AddReferences.png)

1. **Right-click** in the graph and add a **Make Array** node, then connect each of the **Target Points** to it. 

	![](MakeArray.png)

	You can add more pins by clicking the **Add Pin** button. This Array will store a collection of our Target Points which we can access. 

1.	Off the **Array** pin, add a **Get** node. 

1.	Off the **Get**, add a **Random Integer in Range** node with **Min** set to "0" and **Max** set to "2". 

	![](GetNodeAdded.png)

	Here we are getting a random Target Point for use as our Spawn Point. If you had more spawn locations, you could add them to the array and increase the **Max** value of the Random Integer in Range node to include them. 

1.	Off the out of the **Get** node, add a **Get Actor Transform** node and connect it to the **Set Spawn Location** node. 

	[REGION:lightbox]
	[![](FullScript.png)(w:640)](FullScript.png)
	[/REGION]

	Your full script should look similar to above, click for a full view. 

We have done a lot on this page! We used a **Cast** node to access our Character Blueprint and then bound a Custom Event to the Event Dispatcher in it. This allows us to fire off a Custom Event in our Level Blueprint whenever the Event Dispatcher is called. We then randomly are getting one of our spawn locations and kicking it back over to our Character Blueprint as the variable Spawn Location (which is used for the location to spawn our rock at). 

In the Next Step, we will allow our rock to be shot and destroyed by using a Bind Event off an Event called **OnHit** (so when the rock is hit). 











	




<!-- old

Before we can pass information from the **Character** Blueprint to the HUD, we will need to create a few things. We will need to create a visual source of damage (catching the player on fire) as well as the damage/health system itself. With those set, we can pass the player's health value to the HUD so the player can see how much health they have and if they are losing it.

[OBJECT:TopicList]
	[PARAM:title]
		Setting the Player On Fire
	[/PARAM]
	[PARAM:description]
	Here we will activate/deactive a particle effect inside the **Character** Blueprint when the player is/is not on fire. 
	[/PARAM]
[/OBJECT]

1. In the **Content Browser** under **Game/Blueprints**, open the **MyCharacter** Blueprint. 

1. Click the **Components** tab, then click **Add Component** and search for and add a **Particle System** component and name it **Fire**. 

	![](BPHT4_4.png)

1. In the **Details** panel under **Particles**, click the **None** drop down menu and select the **P_Fire** asset. 

	![](BPHT4_5.png)

1. Also in the **Details** panel, uncheck the **Auto Activate** option. 

	![](BPHT4_6.png)

	_This will turn the fire effect off in the viewport. We will turn it on when the player walks into the fire._

1. In the viewport, move the fire effect down towards the characters feet (so that it is not floating in the center of the character). 

	![](BPHT4_7.png)

1. Return to the **Graph** tab. 

1. Drag off the **Return Value** of the **SpawnActor Blueprint_Effect_Fire_C** node and add the **Assign On Actor Begin Overlap** Event Dispatcher. 

	![](BPHT4_8.png)(w:740)

	_Name the new **Custom Event** something to the effect of **OverlapFire**._

1. In the **MyBlueprint** window, hold **Control** and drag in the **Fire** Particle Effect then drag off it and search for and add an **Activate** node. 

	![](BPHT4_9.png)

1. In the **MyBlueprint** window, create a new **Bool** variable and name it **isOnFire**. 

	![](BPHT4_10.png)

1. Hold **Alt** and drag the **isOnFire** variable into the graph and hook it up to the **Activate** node and set it to **True**. 

	![](BPHT4_11.png)

	_Also hook up the **OverlapFire** node to **Activate** if you have not done so already._

	_The player will now catch on fire when entering the fire effect._ 

[OBJECT:TopicList]
	[PARAM:title]
		Simple Health/Damage System
	[/PARAM]
	[PARAM:description]
	In the last step, we set it up so that the player can catch on fire. Next we will set it up so that the player can lose and regen health and pass the player's health value from our **MyCharacter** Blueprint to a HUD constructed in a **Widget Blueprint**. 
	[/PARAM]
[/OBJECT]

1. In the **MyCharacter** Blueprint under the **MyBlueprint** window, create a new **Float** variable called **PlayerHealth**. 

1. **Compile** the Blueprint. 

1. In the **Details** panel for **PlayerHealth** under the **Default Value**, set **Player Health** to **1.0** representing Max Health. 

	![](BPHT4_12.png)

1. **Right-click** anywhere in the **Event Graph** and search for and add an **Event Tick** node. 

1. Connect the **Event Tick** to a **Branch** node, then **Control** drag in the **isOnFire** variable and connect it to the **Condition** of the **Branch**. 

	![](BPHT4_13.png)

1. Off the **False** of the **Branch**, connect another **Branch** node. 

1. **Control** drag in the **PlayerHealth** variable and connect it to a **<** node (set to **1**), then connect that to the **Condition** of the **Branch**. 

	![](BPHT4_14.png)

1. Off the **True** of the new **Branch**, add a **Delay** node (set to **1.5**) then connect the **Delay** to a **Set Player Health** node. 

1. **Control** drag in the **PlayerHealth** variable and connect it to a **Float + Float** node (set to **.05**), then connect it to the **Set Player Health**.  

	![](BPHT4_15.png)

	_This states that if the player is not on fire and their health is less than 1 (maximum) that we will add .05 to the player health every 1.5 seconds._

1. Off the **True** of the first **Branch**, add another **Branch**. 

1. **Control** drag in the **PlayerHealth** variable and connect it to a **<=** node (set to **0.0**) and feed that into the **Condition** of the **Branch**. 

	![](BPHT4_16.png)

1. Off the **False** of the new **Branch**, add a **Delay** node (Set to **0.5**) then connect the **Delay** to a **Set Player Health** node. 

1. **Control** drag in the **PlayerHealth** variable and connect it to a **Float - Float** node (set to **.05**), then connect it to the **Set Player Health**.  

	![](BPHT4_17.png)

1. Off the **True** of the new **Branch**, add a **Print String** node with **In String** text set to something such as **You're Dead!!**. 

	![](BPHT4_18.png)

	_This states that if the player is on fire and their health is less or equal to 0, display **You're Dead!!** text._

	_If the player is on fire and their health is greater than 0, subtract .05 from their health every .5 seconds._

	_Here you would normally add a new state for the player to take when they are dead, however the text will work for our purposes._

1. **Compile** and **Save** the Blueprint.  
	
	[REGION:lightbox]
	[![](BPHT4_19.png)(w:740)](BPHT4_19.png)
	[/REGION]

	_Your sequence should look similar to above, click image for full view._

	_If we were to jump into the editor this would function, but the player has no idea what their health is or that they are losing it since there is no HUD._

	_Next we will create a simple HUD and get the **PlayerHealth** value from the **MyCharacter** Blueprint and pass it to and display it on a HUD._

[OBJECT:TopicList]
	[PARAM:title]
		Passing Information to a HUD
	[/PARAM]
	[PARAM:description]
	Next, we will create a HUD and get the health value from the **MyCharacter** Blueprint and display it on our HUD. 
	[/PARAM]
[/OBJECT]

1. From the **Content Browser**, click the **New** button, then under **User Interface**, click the **Widget Blueprint**. 

	![](BPHT4_20.png)

1. Name the **Widget Blueprint** something such as **GameHUD** then open the Blueprint. 

1. Inside the **Widget Blueprint**, under **Palette/Common**, drag a **Text Block** onto the **CanvasPanel** in the **Hierarchy** window. 

	![](BPHT4_21.png)

1. Also in the **Palette/Common** section, drag a **Progress Bar** onto the **CanvasPanel** in the **Hierarchy** window. 

1. With the **Text Block** selected, in the **Details** panel, enter the text **Health :** for **Text** and (optional) increase the **Size** to **32**. 

	![](BPHT4_22.png)

1. Also in the **Details** panel for the **Text Block** under **Layout**, click the **Anchors** button and select the anchor shown below. 

	![](BPHT4_23.png)

	_Using **Anchors** will "anchor" the widget to the location specified when adjusting the size of the screen display._

	[REGION:note]
	For more information on using **Widgets** and **Widget Blueprints**, please refer to: [**Unreal Motion Graphics**](Engine/UMG)
	[/REGION]

1. On the grid, you can move the **Health** text and resize it so that it is somewhere near the upper left corner of the screen. 

	![](BPHT4_24.png)

1. Click on the progress bar and move/resize it so that it is adjacent to the **Health** text. 

	![](BPHT4_25.png)

1. In the **Details** panel for the progress bar, click the **Fill Color and Opacity** option, set it to a greenish color then click **OK** to assign it.

	![](BPHT4_26.png)

1. Also in the **Details** panel for the progress bar, click the **Bind** button next to **Percent** then choose **Create Binding**. 

	![](BPHT4_27.png)

1. In the graph, **Get Player Character** and **Cast To MyCharacter**, then drag off the **As My Character C** pin and search for **Get Player Health**. 

	![](BPHT4_28.png)(w:740)

1. Connect the **PlayerHealth** to the **ReturnValue** of the **ReturnNode** then click the **Designer** tab button in the upper right corner of the window. 

1. Check the **Percent** section again (if it is not already bound), click **Bind** and choose the new function that was just created.

	![](BPHT4_29.png)

1. **Compile** and **Save** then close the Blueprint. 

1. In the **Content Browser** under **Game/Blueprints**, open the **MyCharacter** Blueprint. 

1. **Right-click** anywhere in the **Event Graph** and search for and add an **Event Begin Play** node. 

1. Drag off the **Event Begin Play** and search for and add a **Create Widget** node. 

	![](BPHT4_30.png)

1. Set the **Class** drop-down to **GameHUD** and drag off the **Return Value** and search for and add the **Add to Viewport** node. 

	![](BPHT4_31.png)

	_When the player character spawns, this will now create our GameHUD and add it to the player's viewport._

1. **Compile** and **Save** then close the Blueprint. 

1. From the **SceneOutliner** or **Level Viewport**, select the **TriggerBox** we created for our small pool then open the **Level Blueprint**. 

1. Add an **OnActorBeginOverlap** event for the **TriggerBox**. 

1. Use a **Get Player Character** node and **Cast To MyCharacter**, then off the **As My Character C**, **Get Fire*** and **Deactivate** it. 

1. Also off the **As MyCharacter C** pin, **Set isOnFire** to **False**. 

1. **Compile** and **Save** then close the Blueprint.

Were you able to finish the last 5 steps without visual aid? If not, click the image below to reveal the answer. 

[REGION:lightbox]
[![](BHHT4_32a.png)(w:720)](BHHT4_32b.png)
[/REGION]

At this point you should have something similar to below when playing in the editor. 

![](GIF4.gif)(convert:false)

You should see that a full health bar is displayed upon starting the level. When the player spawns a rock, it explodes leaving the fire behind that when entered causes the character to lose health and fire should be attached to them. When jumping inside the small pool, the fire should be extinguished and the player will stop losing health and start gaining some back.

On the next page, we will learn about communicating with multiple **Blueprints** as well as communicating with multiple different types of **Blueprints**. 

-->

%Steps%

