Availability:Public
Title:AnimMontage
Crumbs: %ROOT%, Engine, Engine/Animation
Description:Info detailing what AnimMontages are and how they are used in UE4's animation system.
Related: Engine/Content/FBX/Animations
Related: Engine/Content/Types/SkeletalMeshes
Related: Engine/Animation/PhysicallyDrivenAnimation
Related: Engine/Animation/StateMachines
Related: Gameplay/AI
Related: Engine/Content/Tools/MayaRiggingTool
Related: Gameplay/Input
version: 4.9

[TOC(start:2 end:2)]

[EXCERPT:Intro]
**Animation Montages** (or just Montages for short) are a multipurpose tool that allows for a wide variety of animation effects, primarily related to exposing animation controls within code or [Blueprint Visual Scripting](Engine/Blueprints). It can also be used to create a wide variety of animation effects including intelligent loops of animation, logic-based animation switching and much more.
[/EXCERPT:Intro]

Montages are animation assets that can be created and exist within the **Content Browser**. These assets can then be plugged directly into the AnimGraph in run-time and you can modify any state of it. For example, you can jump to different sections or you can re-link different sections. This is mostly for code driven animations or one-off animations such as melee attacks, allowing you to control triggers, stop when you want, or change between states (looping or non-looping). 

Montages also provide a way to replicate [](Engine\Animation\RootMotion\) across networked games if your animation has Root Motion enabled. 


## Montage Example

![](Montage_Screen2.png)

The image above is a melee attack with 3 sections [start, loop, and end]. When the player **Left-clicks**, it triggers the _Start_ section by default when you ask to play the montage. The middle section called _Loop_ (which is set to loop), immediately follows the _Start_ section and will loop there forever. If the player lets the mouse button go, it will stop, but you do not want to stop right away since the animation will pop in the middle of the loop. You would like to relink the _Loop_ to the _End_ section, where it will then transition out to the end and finish the animation. 

Some additional uses for Montages include:
* The ability to play an animation from within an AnimBlueprint's **EventGraph**.
* Chaining together a complex sequence of animations that you want to think of as a single animation.
* Looping only a specific portion of animation or animations based on code or Blueprint script.
* Handling event-based switching of multiple animations based on code or Blueprint script.
* The ability to assign complex animation sequences to named slots that can be switched between in code or Blueprints.
* Precise switching between various AnimSequences based on code or Blueprint script.

[REGION:note]
A Montage applied to a character can also be seen on the [Animation Content Examples](Resources\ContentExamples\Animation) page under section 1.5.
[/REGION]


## Montage Properties

The following is a breakdown of the Montage asset properties. These are available in **Persona** when looking at a Montage, and can also be accessed by **Right-clicking** on a Montage within the **Content Browser** and choosing Properties from the context menu.

![](MontageProperties.png)

|Montage Properties||
|---|---|
|[REGION:tablesection]Montage[/REGION]||
|**Blend In Time**| The amount of time at the beginning of Montage playback during which the character will blend in from its current pose.|
|**Blend Out Time**|The amount of time at the end of Montage playback during which the character will blend back to its original pose.|
|**Blend Out Trigger Time**| Time from the Sequence End to trigger blend out. < 0 uses BlendOutTime, so BlendOut finishes as the Montage Ends. > = 0 uses SequenceEnd-BlendOutTriggerTime to trigger blend out. |
|[REGION:tablesection]Additive Settings[/REGION]||
|**Preview Base Pose**|Sets a base preview pose used for additive Blend Spaces.|
|[REGION:tablesection]Animation[/REGION]||
|**Rate Scale**|A multiplier value for how fast the Montage will play back. Default is 1.0.|
|**Skeleton**|Contains the skeleton associated with this Montage. Cannot be changed in the editor.|
|[REGION:tablesection]Meta Data[/REGION]||
|**Meta Data**| This is Meta Data that can be saved with the asset. The meta data is a Blueprintable class derived from the Anim Meta Data class. This allows you to add custom meta data to animation assets (Anim Sequence, Anim Montage, Anim Composite, and Blendspace are all supported). You can query the data from an animation asset in C++ by calling the `GetMetaData()` method, or by using `GetSectionMetaData()` on Anim Montages. |
|[REGION:tablesection]Thumbnail[/REGION]||
|**Orbit Pitch**| The pitch of the orbit camera around the asset. |
|**Orbit Yaw**| The yaw of the orbit camera around the asset. |
|**Orbit Zoom**| The offset from the bounds sphere distance from the asset.|

## Montage UI

When looking at a Montage in Persona, it is useful to know what each area is and what it does:

[REGION:raw]
![](MontageUI.png)
[/REGION]

1. [Montage Area](#MontageArea)
1. [Sections Area](#SectionsArea)
1. [Element Timing Area](#elementtimingarea)
1. [Notifies Area](#NotifiesArea)
1. [Curves Area](#CurvesArea)

## Montage Area

The Montage Area breaks down like so:

[REGION:raw]
![](MontageArea.png)
[/REGION]

1. **Section Track** - Shows any [Sections](#Sections) that have been defined for this Montage. Sections can be dragged to different positions along the timeline with the left mouse button.
1. **Slot Track** - Shows the current [Slot](#Slots), along with the Slot name on the right. This Slot may be filled with as many animations as you desire; they will be played back in order. Notice that multiple animations will have alternating positions in the Slot Track - top, then bottom, then top again, and so on. This is to help you differentiate between different animations.

[REGION:note]
You may have as many Slot Tracks as you like within a single Montage, each with their own name and containing their own unique animations. However, you may only have one Section Track for each Montage.
[/REGION]


### Sections

Montage Sections provide a way to break a Slot up into multiple portions of animation. Each Section has a name and location in the Slot's timeline. Using the name, you can either jump directly to a particular Section or queue it to play next, when the current segment is complete. In Blueprint, you can query the current Section, jump to a Section, or set the next Section that will play.

It may help to think of Sections like songs on a music playlist, with Slots being the albums. Just like with many modern media players, you can choose which song will play next when the current one finishes, or just jump to the one you want to hear right now.

Sections are created by **Right-clicking** on the Section track and choosing **New Montage Section**. 


### Slots

[EXCERPT:Slots]
Within a Montage, a **Slot** is just a single track that can hold any number of animations. You can name this Slot, and then blend to those specific animations by calling the Slot name. A great example is having a character with a weapon reload animation. You may have different versions of the reload for when the player is standing, crouching, and lying prone. So long as all 3 of the animations used the same timing, you could place each one within a separate Slot in your Montage; the Slots could be named Standing, Crouching, and Prone. In your Animation Blueprint's **AnimGraph**, you can use the Slot node to determine which one you want to play based on your character's current state. When they are standing, you can use the result of the animation in the Standing Slot. When they are prone, you can see the result of the Prone Slot.

It is an important point to keep in mind that although much of your Montage control will take place in the Animation Blueprint's **Event Graph**, Slots are actually handled within the **Anim Graph**. This is done by way of the Slot node, which simply takes in the name for a Slot. By positioning this node at a strategic point along your AnimGraph's execution, you can have multiple Montages that utilize the same Slot name.
[/EXCERPT:Slots]

<!---------------- Branch moved to Notify page.
### Branch Points

Branch Points allow you to create events that coincide with animation playback. These Branch Point Events can be used in code or Blueprint to cause other things to happen, but specifically, Branch Points are useful for switching to other animation Sections within a Montage. 

If you are already familiar with [Animation Notifies](Engine/Animation/Sequences\Notifies), you may notice a strong similarity between the two systems, as they both expose events that can be leveraged in script. The key difference is that Notifies are asynchronous, while Branch Points are synchronous. What this means to the end user is that Branch Points come with a much higher degree of precision for where they will take place along the animation timeline.

High precision is important when you need to jump to a specific animation at a very precise moment in time. While you could use a Notify to do the same job, the asynchronous nature of Notifies means that the Notify Event could be fired at the incorrect animation frame, which can lead to hitches and jumps in your motion.

[REGION:warning]
Due to their synchronous nature and the precision resulting from it, Branch Points are more performance expensive than Notifies. You should only use them when an event must be fired at a precise moment along the animation timeline, such as jumping directly to another animation that matches up frame-to-frame. If being off by a frame (or some percentage of one) is not important, you should use Notifies instead.
[/REGION]

-------------------->

## Sections Area

The Sections area is where you can establish relationships between the Sections you define in the Montage Area. For instance, you may want a certain Section of animation (or group of Sections) to play in a specific sequence, or even loop. 

[REGION:raw]
![](SectionsArea.png)
[/REGION]


1. **Create Default and Clear Buttons** - **Create Default** creates default associations between all Sections, stringing them together one after the other. **Clear** wipes out all associations.
1. **Section Buttons** - In this area, you will see a button for each of the Sections you define in the Montage area. By choosing an existing Section and then clicking the one of these buttons, you associate the Section for that button with the selected track. For instance, in the image above, we have associated Swing2 with Swing1. The order actually goes Swing1, Swing2, and then Swing1 again, which causes a loop. See the [Looping](#Looping) section below for details.
1. **Section Association Tracks** - This is where you can visualize and preview the relationships between animation Sections. By clicking on the **Preview** buttons, you can see the result of each individual track, or click the **Preview All Sections** button and see all Sections play back one after the other.

### Looping

Sections can be set up to loop indefinitely, which is extremely useful for any action that you need to repeat. By associating the same Section more than once in a Section Association Track, you cause that association to run in a loop. The section will turn blue to show this. As an example, consider an animation in which a character is reloading a shotgun, one shell at a time. You could take just the section in which the character inserts a shell, and loop it. Then, by using Notifies, you could create Notify Events in Blueprint that increment the ammo count each time the animation plays through. Once that count reaches a set number (full ammo), you could then switch to an animation of the character closing the receiver and returning to idle.

## Element Timing Area

The Element Timing area takes information from the Montage area and the Notifies area to help with the timing of different sections.

![](ElementTiming1.png)

Each node in the track is given a number denoting the trigger order of that object in the entire montage, and is colored to match what they describe. The default colors are:
* Red - Notifies, Notify states and notify state ending markers
* Light Blue - Branching point notifies
* Green - Montage sections

[REGION:note]
These colors can be edited in the **Animation Editor** preferences, which can be found in the **Editor Preferences**.
[/REGION]

Hovering over any of the nodes in the track will cause a tooltip to appear that explains what that node represents.

![](ElementTiming2.png)

There is dropdown menu on the right side of the track to toggle different elements' visibility.

![](ElementTiming3.png)

## Notifies Area

![](NotifiesArea.png)

[INCLUDE:Engine/Animation/Sequences\Notifies#Intro]

[REGION:note]
Please see [](Engine/Animation/Sequences\Notifies) for more information.
[/REGION]

## Curves Area

![](CurvesArea.png)

[INCLUDE:Engine/Animation/Sequences\Curves#Intro]

[REGION:note]
Please see [](Engine/Animation/Sequences\Curves) for more information.
[/REGION]


## Playing Montages

Montages can be played in a number of different ways: 

* You can assign them as the **Anim to Play** for a **Skeletal Mesh**.  
* You can call them directly through **Blueprint** script or C++. 
* You can incorporate them into the **Animation Graph** as part of your **Animation Blueprint**. 

[REGION:note]
Please see [](Engine/Animation/AnimHowTo/AdditiveAnimations) for an example of how a Montage can be used inside your Animation Blueprints. This example illustrates a character that can perform two animations at the same time independently of one another (in this case the character can move and shoot at the same time).
[/REGION]

### Playing Multiple Montages

Prior to Unreal Engine version 4.6, you could only play a single Montage at a time. However, as of 4.6 or later it is now possible to play as many Montages at you would like through the use of **Anim Slots** and **Anim Groups**. 

Here's a quick rundown of how it works: 

* Animations are organized into Anim Groups. You can play a single Montage per group. If you want to play another Montage at the same time, you can create a new Anim Group for it. 
* Anim Groups and Anim Slots are centralized into the **Anim Slot Manager** tab inside **Persona** (see [Anim Slot Manager](#animslotmanager) below). 
* You can use the drop-down UI to select between valid slots. 
* When creating a new Montage, Slot nodes start out with a single **Default Slot** so they are immediately functional. 

### Anim Slot Manager

The **Anim Slot Manager** is where you will manage your Anim Slot and Anim Group names. It displays a hierarchical view and lets you make changes. You can open the Anim Slot Manager inside a Montage in **Persona**, by clicking the magnifying glass icon (pictured below). 

![](OpenAnimSlotManger.png)

This will open the Anim Slot Manager. 

![](AnimSlotManager.png)

Groups and Slots are saved in the **Skeleton** asset so all Animation Blueprints and Montages from the same family can use the same settings. The **Save** button inside the Anim Slot Manager is there so that you can easily save the changes to the Skeleton asset whenever you make any changes. 

When **Right-clicking** on a Slot name, a context menu is presented which will also allow you to move it to a different group if you desire. This makes it easier to manage the Slots you have created and place and move them into different groups and arrange them as you see fit. 

![](SlotClicking.png)

### Editing Slots on Montage Tracks

Below is an example of the **Montage Editor** inside **Persona**, the drop-down box (highlighted) lists the available Slots for that track. 

![](SlotExample1.png)

If you need to create a new Slot or Group, clicking the magnifying glass icon will take you to the **Anim Slot Manager**. 

The status bar across the top will tell you which Group the Montage belongs to. This is determined by the first Track's Slot. 

![](SlotExample2.png)

If you have multiple Slots, the status bar will also tell you if there are any issues with the setup. For example, if you mix and match Slots that belong to different groups, a warning sign will appear to which you can hover over and see more information about the problem. 

![](SlotExample3.png)

### Editing Slots in Animation Blueprints

Inside the AnimGraph of an Animation Blueprint, you can add a **Slot** node that when selected, allows you to see the same options as shown in the Montage Track view. 

![](SlotNode.png)

From here you can use the drop-down box to pick an existing Slot name and the magnifying glass icon to open the Anim Slot Manager. 

Additional notes: 

* This is backwards compatible with previous setups. You should not notice any changes other than your existing Slots being part of a "Default Group". 
* The Montage Blueprint and C++ API have been enhanced to take Montage asset references. This is how you can control different Montages playing at the same time. For example, see the **Montage Set Play Rate** function. 


<!-------------------- Example removed. This should be a HowTo.

## Montage Practical Example


In this example, we want to have a character that can freely run in all directions, with an attack animation that only plays on the upper body. This attack will have multiple animations that could take place during its course. This is a perfect way to show the assembly of a Montage, as well as how to control it in the Event Graph and blend into it within the AnimGraph.

However, there are few things we have set up in advance:

* We already have a State Machine defining locomotion. This is just like the one used in the Third Person Project Template.
* We have several animations provided by an artist that we would like to string together to make the Montage.
* We have created a [Character Blueprint Class](Engine\Blueprints\UserGuide\Types\ClassBlueprint\Creation) that we can get input information from. 
 * For this example: an **IsAttacking** Boolean that is set to TRUE when the **Left Mouse Button** is pressed and set to FALSE when it is released. 
  ![](CharacterBlueprint.png)

### Creating the Montage

Making a Montage is as easy as **Right-clicking** in the **Content Browser** and choosing **Animation > Animation Montage**. You can also **Right-click** on an existing Animation Sequence and choose **Create Montage** from the context menu. This will automatically create a new Montage with the selected AnimSequence already set up in the default Slot.

![](MakeMontage.png)

### Montage Setup

Our first order of business was to name our Slot. We only need one in this Montage, and since we want our attack to only affect the upper body, the name Upper Body seemed perfect. We then drag/dropped the animations we would need into this slot. The animations we have do the following:

* Right-to-left hammer swing
* Left-to-right hammer swing
* Go from the end of the right-to-left swing back to Idle
* Go from the end of the left-to-right swing back to Idle

[REGION:note]
The two swinging animations both end on the same pose as the other begins. This means that the two animations can play back to back in a loop and the character will seamlessly swing the hammer back and forth.
[/REGION]

While order is not extremely important, having the first two animations at the beginning and back to back will simplify things later.

![](MontageSetup.png)


### Section Creation

Our next step is to section out the animations in our Montage so that we can query them and call them up when needed in our Blueprint code. This is as easy as **Right-clicking** and choosing **Add New Montage Section** while clicking on the Section Track at the top of the Montage Area. 

We used fairly straightforward names for each Section. Note that we replaced the Default section that came along with the Montage (made a new one and deleted the Default by **Right-clicking** and choosing **Delete Montage Section**). You can drag these Sections along the Section Track if you need to, and you will notice that they snap a bit at the boundary between two animation segments when you release the mouse. Use this to your advantage.

![](AddNewSections.png)



### Defining Section Relationships


Now that our Sections are created, we can now define any special relationships between them using the Sections Area. For instance, we can define a relationship between the Swing1 and Swing2 sections so that they play back to back in a loop. This is very useful for us. We start by clicking the **Clear** button to wipe out any default relationships. Then it is just a matter of selecting the track with Swing1 in it, and clicking the green button labeled Swing2 near the top of the Sections Area. This will remove the Swing2 track and add Swing2 to the Swing1 track.

![](Swing2Track.png)

If we repeat the process, clicking the new Swing2 segment and then clicking the Swing1 button, the system detects that you are creating a loop and the track turns blue. This means that the Swing1 and Swing2 segments are considered a looping Section. They will play back to back, repeating indefinitely.

![](LoopingTracks.png)

### Setting Up Branch Points

We will now set up some Branch Points to test whether to continue with the loop or jump to one of two possible endings for our attack animation. All we have to do is **Right-click** in the Branch Point Track and choose **New Branch Point**. We chose the names Swing_1_End and Swing_2_End for our Branch Points. We also zoomed very closely in with the mouse wheel to make sure that each one fires right at the last possible moment of its corresponding section. This means it is placed very slightly to the left of the border between the two.

![](BranchPointsSetUp.png)



[REGION:note]
A similar system could be set up in which you use Notifies instead of Branch Points, but they would need to fire a little earlier along the timeline, and your Animation Blueprint Event Graph would be queuing the appropriate ending animation using the **Montage Set Next Section** node, rather than doing a direct switch with the **Montage Jump to Section** node, as we will be doing. Doing it with Notifies would be slightly cheaper on performance, as Notifies are asynchronous. Our example is academic, but we wanted to make sure to mention the other method, as well.
[/REGION]


### Setting Up the AnimGraph

At this point, our Montage is all set up. We now need to establish our AnimGraph so that it can read in the result of our Montage. This is a pretty simple process, but it does cause us to have to think carefully about how we proceed. Our AnimGraph starts off looking something like this, where we are only seeing the result of our State Machine:

![](StateMachineResult.png)


We only want the Montage to play back from the Spine_01 bone (the waist) up, so we will be using a **Layered Blend per Bone** node. We add a Blend Pose to it set the weight to 1. We also associate this Blend Pose with Spine_01 in the properties for the node. We then bring in a **Slot** node and set it to UpperBody, the name of our slot. But now we run into a problem:

![](SlotAndBlend.png)

The Slot node needs a Source connection to fall back on once the Montage is done playing. Without it, the character will return to the T-pose from the waist up after the Montage completes. However, we cannot connect the State Machine to both the Base Pose of the **Layered Blend per Bone** as well as the Source for the **Slot** node. The solution? Use a **Cache** node! We can store the result of the State Machine into a Cache node, and then create **Cached Pose** nodes to connect to both our required inputs. This is somewhat similar to storing the result of the State Machine into a variable so you can use it in multiple places. For this example, we named the Cache LocoCache.

![](CachedLocomotion.png)

Our AnimGraph is done. As soon as the UpperBody Slot node receives data from any AnimMontage (you can use any Montage, so long as it has a Slot named UpperBody), it will blend it in. As soon as it is no longer receiving data, it will fall back on the result of the State Machine.


### Setting Up the Event Graph

Our Event Graph setup is very basic. Using the **Event Blueprint Update Animation** node and dragging off the out pin of a **Get Player Character** node, we can **Cast To** our **Character Blueprint** (MyCharacter in this example) to access the variables and functions from that Blueprint (see [Blueprint Communications](Engine\Blueprints\UserGuide\BlueprintComms) for more info on communicating between Blueprints). 

_Click for full view_
[REGION:lightbox]
[![](PlayMontageEventGraph.png)(w:1020)](PlayMontageEventGraph.png)
[/REGION]

The first thing we do is check if the **IsAttacking** variable from our Character Blueprint is TRUE and if it is, we then check if the Montage is already playing. If the Montage is playing, we do not want to play it again; however if it is not playing, then we play the Montage. This prevents the system from restarting the animation in the middle of playback, which would look bad. 

Dragging off the **IsAttacking** node which extends from the **Cast To** node, we see if the mouse button is still down, and if not, we jump to the appropriate ending animation, depending on which half of the loop is playing. Creating the Branch Point Events is done by **right-clicking** and choosing the appropriate event under **Add Montage Branching Point Event**.

![](EndLoopEventGraph.png)

And that is it! If we compile, we will now see that the character continues to swing as long as the mouse button is down, and performs an intelligent end animation when the mouse button is released!


[OBJECT:EmbeddedVideo]
[PARAMLITERAL:width]
640
[/PARAMLITERAL]
[PARAMLITERAL:height]
360
[/PARAMLITERAL]
[PARAMLITERAL:videoid]
6eMxjbkn6hs
[/PARAMLITERAL]
[/OBJECT]

-------------------->











