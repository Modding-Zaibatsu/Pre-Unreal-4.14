INTSourceChangelist:2714483
Availability:Public
Title: 애니메이션 리타게팅 (동일 스켈레톤)
Crumbs: %ROOT%, Engine, Engine/Animation
Description:리타게팅은 비율이 크게 다른 캐릭터간에 애니메이션을 재사용할 수 있도록 하는 작업을 말합니다.
version:4.9

[REGION:fullwidth]
![](RetargetingHeader.png)
[/REGION]

[TOC(start:2 end:2)]



**애니메이션 리타게팅 (동일 스켈레톤)** 은 같은 스켈레톤 애셋을 공유하나 비율이 크게 다른 캐릭터간에 애니메이션을 재사용할 수 있도록 해 주는 기능입니다. 리타게팅을 통해 애니메이션이 적용될 스켈레톤에 모양이 다른 캐릭터의 애니메이션을 사용할 경우, 일부분이 손실되거나 불필요하게 변형되지 않도록 할 수 있습니다.

[REGION:warning]
다른 스켈레탈 메시에 리타게팅 기능을 사용하려면, **반드시** 같은 스켈레톤 애셋을 사용해야 합니다. 그래야 본 계층구조는 물론 바인드 포즈의 조인트 로테이션도 같아집니다. 자세한 내용은 [](Engine/Animation\Skeleton) 문서를 참고해 주세요!
[/REGION]

### 다른 스켈레톤에 대한 애니메이션 리타게팅

이 페이지의 내용은 **애니메이션 리타게팅** 배후의 개념을 다루어 동일한 스켈레톤 애셋을 사용하는 캐릭터에 대한 애니메이션 리타게팅에 사용할 수 있는 예제를 인용합니다. 다른 스켈레톤 애셋을 사용하는 캐릭터에 대해 애니메이션을 리타게팅하고픈 경우가 있을 수 있는데, 이 때가 바로 **애니메이션 리타게팅 (다른 스켈레톤)** 을 활용할 시점입니다.

자세한 정보는 [애니메이션 리타게팅 (다른 스켈레톤)](Engine\Animation\RetargetingDifferentSkeletons) 문서를 참고하세요.


## 리타게팅을 사용하는 이유?

애니메이션을 공유하고픈 캐릭터가 셋 있다고 칩시다. 표준 캐릭터, 작고 다부진 버전, 크고 홀쭉한 버전으로요.

[VAR:Chars]w:300[/VAR]

[REGION:imagetable]
|![](BaseCharacter.png)(%chars%)|![](ShortStocky.png)(%chars%)|![](TallSkinny.png)(%chars%)|
|---|---|---|
|표준 캐릭터|작고 다부진 캐릭터|크고 홀쭉한 캐릭터|
[/REGION]


### 리타게팅 이전 결과

리타게팅을 적용하지 않아도, 같은 스켈레톤을 공유하는 스켈레탈 메시에는 이미 같은 애니메이션을 사용할 수 있습니다. 그러나 위와 같이 비율이 다른 경우, 보기 흉한 결과가 날 수 있습니다. 둘 다 표준 캐릭터의 스켈레탈 비율에 맞추다 보니까 작은 캐릭터는 불필요하게 늘어나고 큰 캐릭터는 줄어들었습니다.


[REGION:imagetable]
|![](BaseCharacterRunning.png)(%chars%)|![](ShortStockyRunning.png)(%chars%)|![](TallSkinnyRunning.png)(%chars%)|
|---|---|---|
|표준 캐릭터|작고 다부진 캐릭터|크고 홀쭉한 캐릭터|
[/REGION]

### 리타게팅 이후 결과

캐릭터에 리타게팅을 적용했더니, 방정식을 통해 비율 차이를 계산하여 캐릭터에 애니메이션이 제대로 플레이되는 것을 볼 수 있습니다. **표시 > 리타게팅되지않은 애니메이션**" 옵션으로 (베이지 색으로 표시되는) 원래 스켈레톤과 (하양) 현재 스켈레톤의 차이를 확인할 수 있습니다. 표준 캐릭터에 보면 베이지색 리타게팅되지않은 본이 스켈레톤에 완벽히 일치하는 것이 보입니다.
[EXCERPT:AfterTable]
[REGION:imagetable]
|![](BaseCharacterRunningRetargetedBones.png)(%chars%)|![](ShortStockyRunningRetargetedBones.png)(%chars%)|![](TallSkinnyRunningRetargetedBones.png)(%chars%)|
|---|---|---|
|표준 캐릭터|작고 다부진 캐릭터|크고 홀쭉한 캐릭터|
[/REGION]
[/EXCERPT:AfterTable]

## 리타게팅이 퍼포먼스에 영향을 끼치나요?

리타게팅을 한 애니메이션과 안한 애니메이션 사이에 중대한 퍼포먼스 차이는 없습니다. 애니메이션 리타게팅을 이용하는 데 있어서의 장점은, 완전히 똑같이 일치하는 애니메이션 세트를 만들 필요 없이 고유 캐릭터의 수를 늘이면서도 애니메이션 메모리 예산을 크게 감소시킬 수 있다는 점입니다.


## 리타게팅 작동 원리

애니메이션은 [스켈레톤 애셋](Engine/Animation\Skeleton) 에 바인딩됩니다. 스켈레톤 애셋은 그저 본 이름과 계층구조 데이터로 된 리스트일 뿐이지만, 스켈레톤 애셋의 정의에 사용되는 원본 스켈레탈 메시의 초기 비율도 저장합니다. 참고로 중요한 내용은, 리타게팅 시스템에서 타겟을 새로 잡는 것은 본의 트랜슬레이션 컴포넌트 뿐입니다. 본의 로테이션은 항상 애니메이션 데이터에서 옵니다.

스켈레톤 애셋의 비율을 정의하는 데는 원본 스켈레탈 메시가 사용되기에, 그 스켈레톤 애셋을 사용하면서 비율이 다른 (이를테면 원본보다 훨씬 작은) 스켈레탈 메시는 리타게팅을 해 줘야 정상 작동합니다. 그렇지 않고서는 비율이 다른 스켈레탈 메시가 원본 메시의 트랜슬레이션 데이터를 사용하려 할 것이고, 이 문서 도입부에서 본 것과 같은 유형의 오류가 발생할 것입니다.

이 문제를 해결하기 위해서, 페르소나의 스켈레톤 리스트에는 본 사이의 트랜슬레이션 리타게팅 처리 방식을 바꾸기 위한 세팅이 몇 가지 제공됩니다. 본 트랜슬레이션 리타게팅용 세팅은 세 가지입니다.

![](RetargetingSettings.png)

-	**애니메이션** - 본 트랜슬레이션은 애니메이션 데이터에서 오며, 변경되지 않습니다.
-	**스켈레톤** - 본 트랜슬레이션은 타겟 스켈레톤의 바인드 포즈에서 옵니다.
-	**스케일적용 애니메이션** - 본 트랜슬레이션은 애니메이션 데이터에서 오나, 스켈레톤의 비율대로 스케일을 조절합니다. 그 비율은, (애니메이션을 재생하고 있는) 타겟 스켈레톤과 (애니메이션 저작의 기반이 된) 원본 스켈레톤의 본 길이 비율입니다.


## 리타게팅시 엔드 이펙터는 어떻게 처리되나요?

큰 캐릭터는 더 빨리 달리는가, 같은 소품을 계속 들고 있을 수 있는가, 리타게팅 작업시 들 수 있는 의문입니다. 짧게 말해, 자동으로 해결되는 일은 없으며, 어떻게 하고 싶은지는 사용자에게 달린 일입니다.

소품을 드는 것에 대해서 취할 수 있는 한 가지 방법은, 원본 애니메이션에서 손을 따르는 별도의 본 체인을 만드는 것으로, 이를 "핸드 IK 본" 이라 합니다. 그런 다음 몸과 팔만 리타게팅하고 "핸드 IK 본" 은 리타게팅 이후 동일하게 유지되도록 놔둡니다. 그러면 비율이 다른 캐릭터도 같은 소품을 조작(예를 들면 라이플 재장전)할 수 있게 됩니다.

본 체인을 별도로 두면 원하는 때 쉽게 FK 와 IK 사이를 부드럽게 전환할 수 있습니다 (예를 들어 무기 재장전시 Hand IK 를 켜고, 주머니의 탄창을 집을 때는 끕니다).

이 시스템은 매우 유연하여 요구에 맞게끔 특화시킬 수 있습니다. 왼 손만 IK 로 하고 오른손은 FK 위치를 사용하면서 IK 로테이션을 사용할 수도 있습니다. 발은 가끔 이렇게, 가끔은 다르게 처리합니다. 매우 정교한 소품에 발을 디딜 때는 IK 를 켜는 것이 좋을 것이고, 그냥 돌아다닐 때는 FK 를 사용하여 오다리 (안짱다리) 캐릭터가 되지 않도록 하면 되겠습니다.


## 리타게팅 셋업하기

<!---Establishing animation retargeting on your --->



리타게팅 셋업은 **페르소나** 의 **스켈레톤 트리** 패널에서 합니다.
 
보통 바이페드의 경우 다음과 같은 세팅을 사용합니다:

* 루트 본, IK 본, 웨폰 본과 어떤 종류의 마커도 `애니메이션` 모드를 사용합니다.
* Pelvis (골반)은 `AnimationScaled` (스케일적용 애니메이션)을 사용, 올바른 위치에 앉을 수 있으면서 애니메이션도 적용되게끔 합니다. 다른 본 중 트랜슬레이션에 애니메이션 적용 및 리타게팅도 해 주려는 것도 `스케일적용 애니메이션` 을 사용해야 합니다.
* 다른 모든 본은 `Skeleton` 을 사용합니다. 타겟 스켈레톤의 정적인 트랜슬레이션을 사용합니다.

즉 리타게팅을 사용하려는 경우, 신속한 작업방식은 다음과 같습니다:

![](RecursivelySet.png)

1. 루트 본에 우클릭하고 모든 본을 **Skeleton** 으로 재귀 설정합니다.
1. Pelvis 또는 그에 상응하는 본을 찾아서 **Animation Scaled** 로 설정합니다.
1. 루트 본, IK 본, 웨폰 본, 기타 마커 스타일 본을 찾아 **Animation** 을 사용하도록 설정합니다.

[REGION:tip]
뷰포트의 **표시** 메뉴에서 `NonRetargeted Animation` (리타게팅되지않은 애니메이션)과 `Bones` (본)을 체크하면 원본과 리타게팅된 애니메이션을 비교해 볼 수 있습니다.
[/REGION]


## 리타겟 소스 매니저 사용하기

![](BasePoseManager.png)

리타게팅은 스켈레톤 애셋을 사용하고, 스켈레톤에는 애초에 기반이 되었던 스켈레탈 메시에 정의된 원래 비율이 있으므로, 단방향 리타게팅은 위의 방법대로 하면 부드럽게 돌아갈 것입니다. 그러나 그냥 변종 버전이 필요해서 예외적으로 만드는 애니메이션이 생기게 마련입니다. 예를 들어 큰 캐릭터 용으로만 특별히 쓰이는 애니메이션을 만들 수 있습니다.

이 "큰놈 전용" 애니메이션을 임포트한다면, 표준 캐릭터를 기반으로 만든 동일한 스켈레톤을 계속 사용해야 할 것입니다. 그러면 새 애니메이션의 비율이 틀어지게 됩니다. 이 때의 해법은 리타겟 소스 매니저를 사용하는 것입니다.

리타겟 소스 매니저를 통해 애니메이션 시퀀스를 원래 디자인에 맞는 실제 스켈레탈 메시에 연관시켜 줄 수 있습니다. 이런 식으로 예외적인 애니메이션에 대한 리타게팅 문제고 해결 가능합니다.

### 리타겟 소스 매니저 사용하기

리타겟 소스 매니저는 비율을 지정하는 데 사용할 수 있는 스켈레탈 메시 목록으로 생각하면 됩니다. 리타게팅된 스켈레탈 메시 전용 애니메이션이 필요한 경우, 그 메시가 리타겟 소스 매니저 목록에 있는지 확인해 줘야 할 것입니다.

1. 페르소나의 메뉴바에서 **창 > 리타겟 소스 매니저** 를 선택합니다.
1. 리타겟 소스 매니저 패널의 목록 (가운데) 영역에 우클릭한 다음 맥락 메뉴에서 **추가...** 를 선택합니다.
1. 전용 애니메이션의 대상이 되는 스켈레탈 메시를 선택합니다. 리타겟 소스 매니저 목록에 그 스켈레탈 메시가 있는 것이 보일 것입니다.
1. 페르소나의 애셋 브라우저에서, 해당 스켈레탈 메시 전용 애니메이션에 대한 애니메이션 시퀀스 애셋을 더블클릭합니다.
1. 애님 애셋 디테일 패널에서, **Animation** (애니메이션) 카테고리 아래 **Retarget Source** (리타겟 소스) 프로퍼티를 찾습니다. 드롭다운에 보면 리타겟 소스 매니저에 추가시킨 스켈레탈 메시가 보일 것입니다. 이 메시를 선택하면, 이 애니메이션을 돌리는 데 그 메시의 비율을 사용한다고 지정해 주는 것입니다.


<!----

If you are creating all of your animations for a single Skeletal Mesh and retargeting them to some other variations, then the information presented so far will get you a nice retargeted result. The reason it works is that using just one original Skeletal Mesh as the base is like a one-way connection, from the original to all the variations. But what happens if you need special animations just for the variants?

Consider if we needed a special set of animations for our tall character, such as a different idle animation. An animator could take that Skeletal Mesh, create the necessary animation, then import it using the same Skeleton asset as before, but there is now a problem. Since the original proportions of the Skeleton asset were based off the Base Character's proportions, the animation will be distorted.
j


--->