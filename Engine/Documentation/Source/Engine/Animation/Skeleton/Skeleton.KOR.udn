INTSourceChangelist:2714483
Availability:Public
Title: 스켈레톤 애셋
Crumbs: %ROOT%, Engine, Engine/Animation
Description:UE4 의 스켈레톤 애셋과 애니메이션에 적용되는 방식에 대한 개요입니다.
version: 4.9

[REGION:fullwidth]
![](SkeletonImage.png)
[/REGION]



언리얼 엔진 4 에서, 스켈레톤(Skeleton) 은 스켈레탈 메시와 별개의 애셋입니다. 각 스켈레탈 메시는 스켈레탈 메시를 연관시켜줘야 하며, 모든 (애니메이션 시퀀스, 애니메이션 몽타주, 블렌드 스페이스 등의) 애니메이션 애셋은 스켈레탈 메시가 아닌 그 스켈레톤과 연관이 있습니다.

## 스켈레톤이란?

디지털 콘텐츠 제작에 익숙하다면, 이미 "스켈레톤"에 익숙한 느낌이 들 것입니다. 대부분의 3D 프로그램에서 스켈레톤이란 캐릭터의 본이나 조인트를 정의하는 데 사용되는 디지털 계층구조식 프레임워크로, 여러가지 면에서 생물학적 스켈레톤(뼈대)와 닮아있습니다.

![](MayaSkeleton.png)(w:200)
[REGION:caption]
마야에서 볼 수 있는 전형적인 스켈레톤입니다.
[/REGION]


스켈레톤 애셋의 중요한 차이라면, 스켈레탈 메시에서 찾을 수 있는 본 계층구조와 같은 것이 _아니라는_ 것입니다. 언리얼 엔진 4 에서, 스켈레톤 애셋은 실제 뼈대의 3D 표현같다기 보다는, 큭정 유형의 캐릭터 또는 스켈레탈 메시에 대한 본과 계층구조 정보를 담는 목록에 가깝습니다. 애니메이션과의 연관성이 생기는 부분이 바로 이 목록을 통해서입니다.

애니메이션 시스템 내에서 스켈레톤 애셋의 위치에 대해서라면, 아마도 스켈레탈 메시와 애니메이션의 매개체라 보는 것이 가장 적합할 것입니다. 다수의 스켈레탈 메시가 같은 스켈레톤 애셋을 사용할 수 있으며, 같은 스켈레톤 애셋을 사용하는 스켈레탈 메시는 애니메이션을 공유할 수 있게 됩니다.

## 기본 규칙

언리얼 엔진 4 의 애니메이션에 있어서 스켈레톤 애셋에 대해 알아둬야 할 핵심적인 내용이 몇 가지 있습니다:

* 모든 스켈레탈 메시는 연관된 스켈레톤 애셋이 필요합니다.
* 스켈레탈 메시 임포트시 그에 대해 스켈레톤 애셋을 새로 만들거나, 기존 스켈레톤 애셋을 선택해 줘야 합니다.
* 스켈레톤의 초기 원본 스켈레탈 메시에 의해 정의됩니다. 이 부분은 [리타게팅(retargeting)](Engine/Animation/AnimationRetargeting) 에 중요한 부분입니다.
* 애니메이션 공유를 위해서, 스켈레탈 메시는 _반드시_ 같은 스켈레톤 애셋을 사용해야 합니다.
* 같은 스켈레톤 애셋을 공유하려면, 그 스켈레탈 메시 내 본 계층구조의 이름 순서를 어겨서는 안됩니다. 아래 [스켈레톤 재사용](#스켈레톤재사용) 부분을 참고하세요.

![](FBXImportOptions.png)
[REGION:caption]
스켈레탈 메시를 임포트할 때, 임포트할 메시에 대해 스켈레톤 애셋을 새로 만들 것인지 기존의 것을 사용할 것인지 선택할 수 있습니다.
[/REGION]

## 스켈레톤 재사용

스켈레톤 애셋의 중요한 특징 중 하나는, 하나의 스켈레톤 애셋을 다수의 스켈레탈 메시에 사용할 수 있다는 것입니다. 무엇보다도 좋은 점은, 스켈레탈 메시 각각의 본 계층구조가 동일할 필요조차 없다는 것입니다. 그러나 일반적인 구조는 같아야 합니다. _가장 중요한 부분은_, 한 스켈레탈 메시의 본 계층구조를 어겨서는 안된다는 것입니다.

즉 본의 이름 및 순서에 일관성이 있어야 한다는 뜻입니다. 이름이 _1_, _2_, _3_ 인 본 세개짜리 림(limb)을 생각해 봅시다:


[REGION:raw]
![](ExampleBoneHierarchy.png)(w:600)
[/REGION]


두 번째 스켈레탈 메시에 같은 스켈레톤 애셋을 사용하려는 경우, 그 본을 같은 순서대로 유지시켜 줘야 하지만, 계층구조에 지엽적인 본을 추가시는 것이 _가능은_ 합니다. 즉 예를 들어, 이런 식의 계층구조가 가능합니다:

[REGION:raw]
![](PeripheralBones.png)(w:600)
[/REGION]

그러나 계층구조의 순서를 바꿀 수는 없습니다. 예를 들어 이런 것은 안됩니다:

[REGION:raw]
![](ReorderedBones.png)(w:600)
[/REGION]

### 추가적인 림

계층구조에 지엽적인 본을 추가하는 것이 가능하기 때문에, 추가적인 부속이 있는 스켈레탈 메시 사이에 스켈레톤 애셋을 재사용하는 것도 쉽습니다. 예를 들어, 비슷은 하지만 각기 다른 세 가지 유형의 캐릭터에 애니메이션을 공유하려는 경우, 필수적으로 본 구조(와 _본 이름_) 만 같으면 다음과 같은 핵심적인 차이도 용납됩니다:

* 인간 남성 (이 예제의 기본 캐릭터와 유사)
* 인간 여성에 말총머리
* 팔이 넷 달린 인간형 캐릭터

이 모든 캐릭터에 같은 스켈레톤 애셋을 사용할 수 있으며, 결과적으로 그 스켈레톤 애셋에는 _세 가지 모든_ 유형에 대한 조인트 계층구조 정보가 포함될 것입니다. 애니메이션은 그 스켈레톤 애셋을 사용하여 각 본을 얼마만큼 회전시킬지 결정합니다. 스켈레탈 메시 디자인이 바탕 본 계층구조가 같도록 되어있기에, 그 사이의 애니메이션도 완벽하게 돌아갈 것입니다. 유일한 차이점이라면, 말총머리나 추가로 달린 두 개의 팔에 대해 별도의 애니메이션이 필요하다는 정도입니다.

스켈레탈 메시에 포함되지 않은 본에 대한 애니메이션 데이터가 수신되는 경우 (즉 같은 스켈레톤 애셋을 사용한 캐릭터에 말총머리 애니메이션이 사용되었는데, 말총머리가 없는 경우), 그 애니메이션 데이터는 무시됩니다.

이 시스템에 걸리는 퍼포먼스 부하가 아주 조금이긴 하지만, 프로덕션 측면에서는 일반적으로 본 계층구조가 _비슷한_ 스켈레탈 메시에만 스켈레톤 애셋을 공유하는 것이 좋습니다.


