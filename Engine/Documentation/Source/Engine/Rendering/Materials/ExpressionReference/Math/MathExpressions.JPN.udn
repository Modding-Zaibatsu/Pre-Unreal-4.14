INTSourceChangelist:2929391
Availability:Public
Title:Math 表現式
Crumbs: %ROOT%, Engine, Engine/Rendering/Materials, Engine/Rendering/Materials/ExpressionReference
Description:1 つ以上の入力で様々な数学的操作を行うための表現式。
Version:4.9

[EXCERPT:TOC]
[TOC(start:2)]
[/EXCERPT:TOC]

## Abs

**Abs** は、数学用語「absolute value」 (絶対値) の略語です。Abs 表現式は絶対値、符号なしの値、または受け取った入力値を出力します。Abs によりマイナス符号を取り去って、負の数が正の数に変えられます。正の数と 0 に変化はありません。

**例： ** -0.7 の Abs は 0.7 、 -1.0 の Abs は 1.0 、 1.0 の Abs は 1.0 です。

**使用例：** Abs は、通常 [DotProduct](#DotProduct) と併用されます。DotProduct (ドット積) は、 -1..0..1 の順番で値が始まる一方、 DotProduct の Abs は、 1..0..1 の順番となります。

![AbsExample.png](AbsExample.png)


##Add

**Add** 表現式は、 2 つの入力値を受け取り、 2 つを足して結果を出力します。この加法演算はチャンネル毎に実行されます。つまり、 R チャンネルへの入力が加算され、 G チャンネルが加算され、そして B チャンネルが加算されるなどのようになります。入力の片方が単一の Constant 値でない限り、両入力は同数のチャンネル数を持っていなくてはいけません。Constant は入力数に関係なくベクターに加法できます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Const A** | 加算する値を受け取ります。A入力が未使用時のみ使用されます。|
| **Const B** | 加算される値を受け取ります。B 入力が未使用時のみ使用されます。 |
| [REGION:tablesection]入力値[/REGION] ||
| **A** | 加算する値を受け取ります。 |
| **B** | 加算される値を受け取ります。 |


**例： ** 0.2 と 0.4 の Add は 0.6 、 (0.2,-0.4,0.6) と (0.1,0.5,1.0) の Add は (0.3,0.1,1.6) 、 (0.2,-0.4,0.6) と 1.0 の Add は (1.2,0.6,1.6) となります。

**使用例：** Add はカラーを明るくまたは暗くする際、もしくは UV テクスチャ座標をオフセットする際にしばし使用します。

![AddExample.png](AddExample.png)


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/VectorOps#AppendVector]


## Ceil

**Ceil** 表現式は、値を受け取り、一番近い整数へ **切り上げて** 結果を出力します。[Floor](#Floor) と [Frac](#Frac) も参照してください。

**例： ** 0.2 の Ceil は 1.0 、 (0.2,1.6) の Ceil は (1.0,2.0) となります。

![CeilExample.png](CeilExample.png)(w:900)


## Clamp

**Clamp** 表現式は、最小値と最大値が定義された指定範囲で受け取った値を制限します。0.0 の最小値と 0.5 の最大値は、結果値が決して 0.0 より小さく、および 0.5 より大きくならないことを意味します。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Clamp Mode** | 使用する Clamp のタイプを選択します。CMODE_Clamp は範囲の両端値をクランプします。CMODE_ClampMin と CMODE_ClampMax は、範囲内のそれぞれ対象となる値のみをクランプします。
| **Min Default** | クランプに使用する最小値を受け取ります。最小値の入力が未使用時のみ使用されます。 |
| **Max Default** | クランプに使用する最大値を受け取ります。最大値の入力が未使用時のみ使用されます。 |
| [REGION:tablesection]入力値[/REGION] ||
| **Min** | クランプに使用する最少値を受け取ります。 |
| **Max** | クランプに使用する最大値を受け取ります。 |


**例： ** Min0.0 と Max1.0 で 0.3 をクランプすると、結果は 0.3 になります。 Min0.0 と Max1.0 を 1.3 をクランプすると結果は 1.0 になります。

![ClampExample.png](ClampExample.png)(w:900)


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/VectorOps#ComponentMask]


## Cosine

**Cosine** 表現式は、[0, 1] の範囲に正弦波の値を繰り返し出力します。この関数は、[Time](Engine/Rendering/Materials/ExpressionReference/Constant#Time) 式と入力値を関連付けして継続的な振動の波形を出力することでよく知られています。出力値は -1 と 1 の周期を行ったり来たりします。波形を視覚的に表現したものが以下となります。

![CosineWave.png](CosineWave.png)

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Period** | 合成振動の周期を特定します。つまり、これによって 1 つの振動が発生するまでの時間が分かります。|


**使用例：** この表現式は振動効果が必要な際にいつでも便利です。振動の速度と振幅は、時間入力 (速度) または出力 (振幅) を乗算することにより、動的に簡単な制御が可能です。

![CosineExample.png](CosineExample.png)

この例では、カラーは正弦波周波数で振動します。


[EXCERPT:CrossProduct]
## CrossProduct

**CrossProduct** 表現式は、 3 チャンネルのベクター値の 2 つの入力値の外積を計算し、結果として 3 チャンネルのベクター値を出力します。空間に 2 つのライン (またはベクター) が与えられ、外積は両方の入力に対して垂直なライン (またはベクター) となります。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]入力値[/REGION] ||
| **A** | 3チャンネルのベクター値を受け取ります。 |
| **B** | 3チャンネルのベクター値を受け取ります。 |


**使用例：** CrossProduct は、しばし 2 つの反対方向に垂直な方向を計算します。

![CrossProductExample.png](CrossProductExample.png)

[/EXCERPT:CrossProduct]


## Divide

Divide 表現式は、 2 つの入力値を受け取り、 1 番目の値を 2 番目の値で割った結果を出力します。除算はチャンネルごとに計算されます。つまり、最初の R チャンネルが 2 番目のチャンネルによって、最初の G チャンネルが 2 番目のチャンネルによって除算される形です。約数が単精度浮動小数点値でない限り、両方の入力値は同数でなくてはいけません。 _ゼロ除算は絶対に行わないでください。_

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Const A** | 除算される値、被除数を受け取ります。A 入力が未使用時のみ使用されます。|
| **Const B** | 除算する値、約数を受け取ります。B 入力が未使用時のみ使用されます。|
| [REGION:tablesection]入力値[/REGION] ||
| **A** | 除算される値、被除数を受け取ります。 |
| **B** | 除算する値、約数を受け取ります。 |


**例： ** A=(1.0,0.5,-0.4) と B=(2.0,2.0,4.0) の Divide の結果は (0.5,0.25,-0.1) となります。

![DivideExample.png](DivideExample.png)


[EXCERPT:DotProduct]
## DotProduct

**DotProduct** 表現式は、dot product (内積)、もしくはその他に投影されたあるベクターの長さを計算します。この計算は、フォールオフの計算に頻繁に使用される技術です。DotProduct は、両方のベクター入力値に同数のチャンネル数を必要とします。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]入力値[/REGION] ||
| **A** | 任意の長さの値またはベクターを受け取ります。 |
| **B** | 任意の長さの値またはベクターを受け取ります。 |


![DotProductExample.png](DotProductExample.png)(w:900)

[/EXCERPT:DotProduct]

## Floor

**Floor** 表現式は、値を受け取り前の整数へ **切り下げて** 結果を出力します。[Ceil](#Ceil) と [Frac](#Frac) も参照してください。

**例： ** 0.2 の Floor は 0.0 、 (0.2,1.6) の Floor は (0.0, 1.0) です。

![FloorExample.png](FloorExample.png)(w:900)


## FMod

**FMod** 表現式は、 2 つの入力値を除算した後の浮動小数点値余りを返します。

![FModExample.png](FModExample.png)

この例では、 FMod 式は 1 秒おきに 0 から 1 へ増える繰り返しの値を返します。1 へ到達すると、値は 0 へ戻り、これを無期限に繰り返します。

## Frac

**Frac** 表現式は、値を受け取り、受け取った値の小数部分を出力します。[Ceil](#Ceil) と [Floor](#Floor) も参照してください。

**例： ** 0.2 の Franc は 0.2 、 (0.0,1.6) の Fran は (0.0, 0.6) です。

![FracExample.png](FracExample.png)(w:900)

この例では、Franc ノードは一連の繰り返しとなる 0 - 1 数列へ時間を変更しています。カラーを緑から赤へフェード (Lerp を通じて) させて、緑へ戻り、これを無期限に繰り返します。

[EXCERPT:If]
## If

**If**  表現式は、 2 つの入力値を比較し、比較結果に基づいて他の 3 つの値のうち 1 つを渡します。比較される 2 つの入力値は単精度浮動小数点でなければいけません。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]入力値[/REGION] ||
| **A** | 単精度浮動小数点を受け取ります。 |
| **B** | 単精度浮動小数点を受け取ります。 |
| **A > B** | A の値が B の値より大きい時、値を受け取り出力します。 |
| **A = B** | A の値と B の値が同等の時、値を受け取り出力します。 |
| **A &lt; B** | A の値が B の値よりも小さい時、値を受け取り出力します。 |


![IfExample.png](IfExample.png)(w:900)

この例では、If 式が高さマップを受け取り、高さが 0.2 値を上回るまたは下回るかによって赤、もしくは緑を出力します。

[/EXCERPT:If]


[INCLUDE:Engine/Rendering/Materials/ExpressionReference/Utility#LinearInterpolate]


## Max

**Max** 表現式は 2 つの入力を取り込み、この 2 つの最大値を出力します。 

このノードは Photoshop の Lighten に似ています。 

![](MaxExample.png)(w:720)

上記の表現式では、A は「0」で B は「1」なので「1」(白) が結果となるベースカラーになります。 

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Const A** | 最初の値を受け取ります。A 入力値が未使用の場合のみ使用されます。|
| **Const B** | 2 番目の値を受け取ります。B 入力値が未使用の場合のみ使用されます。|
| [REGION:tablesection]入力値[/REGION] ||
| **A** | 比較する最初の値を受け取ります。 |
| **B** | 比較する 2 番目の値を受け取ります。 |


## Min

**Min** 表現式は 2 つの入力を取り込み、この 2 つの最小値を取ります。 

このノードは Photoshop の Darken に似ています。 

![](MinExample.png)(w:720)

上記の表現式では、A は「0」で B は「1」なので「0」(黒) が結果となるベースカラーになります。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Const A** | 最初の値を受け取ります。A 入力値が未使用の場合のみ使用されます。|
| **Const B** | 2 番目の値を受け取ります。B 入力値が未使用の場合のみ使用されます。|
| [REGION:tablesection]入力値[/REGION] ||
| **A** | 比較する最初の値を受け取ります。 |
| **B** | 比較する 2 番目の値を受け取ります。 |




## Multiply

**Multiply** 表現式は、 2 つの入力値を受け取り、その入力値を掛け合わせて結果を出力します。Photoshop のレイヤーのブレンドモードの乗算に似た機能です。乗算はチャンネルごとに計算されます。つまり最初の R チャンネルが 2 番目の値と掛けられ、最初の G チャンネルが 2 番目の値と掛けられる形になります。片方の値が単精度浮動小数点値でない限り、同数の入力値でなくてはいけません。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Const A** | 乗算する最初の値を受け取ります。A 入力値が未使用の場合のみ使用されます。|
| **Const B** | 乗算する 2 番目の値を受け取ります。B 入力値が未使用の場合のみ使用されます。|
| [REGION:tablesection]入力値[/REGION] ||
| **A** | 乗算する最初の値を受け取ります。 |
| **B** | 乗算する 2 番目の値を受け取ります。 |


UE4 のマテリアルは [0,1] に制限されていないことを忘れないでください！カラー / 値が 1 より大きい場合、Multiply 表現式は実際にカラーを明るくします。

**例：** 0.4 と 0.5 の Multiply は 0.2 、 (0.2、-0.4、0.6) と (0.0、2.0、1.0) の Multiply は (0.0、-0.8、0.6) 、 (0.2、-0.4、0.6) と 0.5 の Multiply は (0.1、-0.2、0.3) となります。

**使用例：** Multiply は、しばしカラー / テクスチャを明るく、もしくは暗くするために使用します。

![MultiplyExample.png](MultiplyExample.png)(w:900)


[EXCERPT:Normalize]
## Normalize

**Normalize** 表現式は、入力の標準値を計算して出力します。これは入力値の各コンポーネントが、ベクターの L-2 ノルム (長さ) で割られることを意味します。

![NormalizeExample.png](NormalizeExample.png)(w:900)

[REGION:note]
Normal マテリアル出力値に接続された表現式は、標準化する必要はありません。
[/REGION]

[/EXCERPT:Normalize]

## OneMinus

**OneMinus** 表現式は、入力値を受け取り、'1 からその値を引いて' 出力します。演算はチャンネルごとに実行されます。

**例：** 0.4 の OneMinus は 0.6、 (0.2、0.5、1.0) の OneMinus は (0.8、0.5、0.0) 、 (0.0、-0.4、1.6) の OneMinus は (1.0、1.4、-0.6) になります。

**使用例：** 入力カラーの範囲が [0,1] の時、OneMinus は通常「invert」と呼ばれる機能と同等のエフェクトがあります。つまり、OneMinus は入力値に加算すると白を作り出すといった、補完カラーを返します。

![OneMinusExample.png](OneMinusExample.png)


## Power

**Power** 表現式は、2 つの入力値を受け取り、Base を Exp 乗の累乗をして結果を出力します。言い換えると、Base がその値によって Exp 回乗算されます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Const Exponent** | 指数値を受け取ります。Exp 入力値が未使用の場合のみ使用されます。|
| [REGION:tablesection]入力値[/REGION] ||
| **Base** | ベース値を受け取ります。 |
| **Exp** | 指数値を受け取ります。 |


**例：** Base0.5 の Exp2.0 乗は 0.25 になります。

**使用例：** Power に渡すカラーが [0,1] の場合、Power は明るい色のみが残るコントラスト調整として動作します。

![PowerExample.png](PowerExample.png)


## Sine

**Sine** 表現式は、[0, 1] の範囲に正弦波の値を繰り返し出力します。この関数は、[Time](Engine/Rendering/Materials/ExpressionReference/Constant#Time) 式と入力値を関連付けして継続的な振動の波形を出力することでよく知られています。出力値は -1 と 1 の周期を行ったり来たりします。この表現式の結果と [Cosine](#Cosine) 表現式の出力値の違いは、出力波形がほぼ半分にオフセットされることです。波形を視覚的に表現したものが以下となります。

![SineWave.png](SineWave.png)

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Period** | 合成振動の周期を特定します。つまり、これによって 1 つの振動が発生するまでの時間が分かります。|


**使用例：** この表現式は振動効果が必要な際にいつでも便利です。振動の速度と振幅は、時間入力 (速度) または出力 (振幅) を乗算することにより、動的に簡単な制御が可能です。

![SineExample.png](SineExample.png)


## SquareRoot

**SquareRoot** 表現式は入力値の平方根を出力します。SquareRoot は、単精度浮動小数点入力値のみ演算することが出来ます。

![SqrtExample.png](SqrtExample.png)(w:900)


## Subtract

**Subtract** ノードは 2 つの入力値を受け取り、最初の入力値から 2 番目の値を減算し差分を出力します。減算はチャンネルごとに実行されます。つまり、 2 番目の入力の R チャンネルが最初の入力値から減算され、 2 番目の入力の G チャンネルから最初の入力値が減算される、といった具合です。2 番目の入力値が単精度浮動小数点値でない限り、両入力値は同数のチャンネルを持たなくてはいけません。定数は、ベクターのさまざまな入力値から減算されます。

| アイテム | 説明 |
| -------- | ----------- |
| [REGION:tablesection]プロパティ[/REGION] ||
| **Const A** | 被減数の値を受け取ります。A 入力値が未使用の場合のみ使用されます。|
| **Const B** | 減数される値を受け取ります。B 入力値が未使用の場合のみ使用されます。|
| [REGION:tablesection]入力値[/REGION] ||
| **A** | 被減数の値を受け取ります。 |
| **B** | 減数される値を受け取ります。


**例：b** 0.5 から 0.2 を減算すると 0.3 、 (0.2、-0.4、0.6) から (0.1、0.1、1.0) を減算すると、 (0.1、-0.5、-0.4) 、 (0.2、0.4、1.0) から 0.2 を減算すると (0.0、0.2、0.8) になります。

**使用例：** Subtract は、濃いカラーやオフセット UV に使用出来ます。

![SubtractExample.png](SubtractExample.png)(w:900)

