Availability:Public
Title:Subsurface Profile Shading Model
Crumbs: %ROOT%, Engine, Engine/Rendering/Materials
Description:Description and technical details of the subsurface profile shading model available in materials.
Version: 4.9

[TOC(start:2)]



The ability to rendering realistic looking human skin is a must for any modern Video Game engine. To fulfill this need, Unreal Engine 4 (UE4) now offers a shading method specifically for skin or wax like surfaces called **Subsurface Profile**. 
While the Subsurface Profile shading model has similar properties to the Subsurface shading model, its key difference is in how it renders. 
SubsurfaceProfile uses a rendering approach that is based in Screen Space because this helps to better display the subtle subsurface effects seen in human skin where backscattering is a secondary effect only seen in few cases like ears for example.
The following document will cover what a Subsurface Profile is and how you can use them in your work. 

[OBJECT:ComparisonSlider]
	[PARAM:before]
	![Not using SubsurfaceProfile](Results_1.png)(w:700 convert:false)
	[/PARAM]
	[PARAM:after]
	![Using SubsurfaceProfile](Results_2.png)(w:700 convert:false)
	[/PARAM]
[/OBJECT]


[Region:note]
Special thanks to Lee Perry-Smith and his company [Infinite Realities] (http://ir-ltd.net ) for providing the 3D scanned head model and assistance. 
[/region]


## What is a Subsurface Profile

The Subsurface scattering profile stores information about how the Subsurface scattering is supposed to be rendered. 
It can be created, shared, and saved in the **Content Browser** just like any other Actor. 
Subsurface scattering profiles work by storing artist driven data about the distance the light in the Subsurface should scatter, the color of the Subsurface, and the falloff color of the light once it has exited the object. 
This data can then be applied to a Subsurface Material to effect what the Subsurface looks like. 
Subsurface profile can also be tweaked interactively which means that you do not need to re-compile the material to see the results of edits. 




## Enabling, Creating, and Using a Subsurface Profile 

To use a Subsurface Profile in a Material, you must first enable the Material to use a Subsurface Profile by setting the **Shading Model** to **Subsurface Profile** in the **Details** panel of the Material. 
You can override the Subsurface Profile that is use for this Material by inputting a different Subsurface Profile in the  **Subsurface Profile** input.

[REGION:tip]
The default settings for the Subsurface Profile are close to Caucasian skin. However please note that this is just one component to realistic looking skin. _Always make sure the base color of your texture fits to your Subsurface scattering profile._
[/REGION]

![Enable SubsurfaceProfile](1.png)

The Subsurface Profile can also be overridden in a Material Instance. To do this, you first need to open the Material Instance that you wish to change. 
Then in the **Details** section of the Material Instance, enable **Override Subsurface Profile** and then supply the Subsurface profile you want to use in the **Subsurface Profile** input. 

![](6.png)

To create a Subsurface Profile, first **Right-Click** inside of the **Content Browser**. Then select the ** Materials & Textures** option and select the **Subsurface Profile** option. 

![Create SubsurfaceProfile](2.png)

[region:note]
If no SubsurfaceProfile is specified, it uses the default SubsurfaceProfile which is Caucasian human skin
[/region] 


You can edit Subsurface Profiles by **Double-Clicking** on them with the **Left Mouse Button** in the **Content Browser** to open it up. 
Once open, you can adjust the individual properties of the Subsurface scattering profile by either inputting a number using the keyboard or by using the **Left Mouse Button** to **Click** on the color bar to expose the color picker. 


![Tweak SubsurfaceProfile](3.png)

* ** Scatter Radius:** The distance in world space units to perform the scatter. 

* ** Subsurface Color:** The Subsurface Color can be used as a weight for the subsurface effect. Black means there is no subsurface scattering. 
White means all lighting is entering the material and gets scattered around. A non-grayscale value give more control over what
color contributions are entering the surface resulting in a more complex looking shading. 

* **Falloff Color:** The Falloff Color defines the material scattering color once the light has entered the material. 
You should avoid using a vivid color here if you want to get a more complex shading variation over area you see the scattering.

[region:note]
 Remember that the whole computation is energy conserving so it is not possible to create more light through scattering (unlike the old/other Subsurface method).
[/region]



## Material Input Channels

The Screen Space Subsurface shading profile does not differ much from the Lit shading mode, with the main difference being that the Metallic input has been repurposed and is not available to be used.  

**Base Color Input:** The Base Color input is used as usual for Diffuse lighting. There is no extra Subsurface Scattering color as the Screen Space subsurface scatter is not supposed to change color or brightness, it is just redistributing the lighting to nearby pixels. 
So if a material should scatter in a specific color it needs to be expressed as part of the Base Color. 
The Base Color should be the final color as if the material is viewed from a large distance where the scattering cannot be distinguished from diffuse lighting. 

[REGION:note]
 Human skin can be seen as a thin pale layer with a more vibrant red color below its surface and this is how the default colors look like. The visible scatter distance in Human skin is about 1.2 cm and that is the default of the Subsurface Profile.
[/region]

**Metallic Input:** The Metallic input channel is not available when using a Subsurface Profile because the GBuffer space for the Metallic input has been repurposed to accommodate the Subsurface Profile data.

**Opacity Input:** The Opacity input channel is used to mask the Subsurface scattering contribution. 
It works by using a value in the 0 to 1 range to allow for smooth transitions between different areas of Subsurface scattering intensity. 
For example, when inputting a value of 0 into the Opacity input, Subsurface scattering will be disabled. 
Inputting a value of 1 will show the full extent of the Subsurface Scattering. 
In order to better control where the Subsurface scattering is stronger or weaker, it is best to use a mask texture.  
Areas in the mask texture that have values closer to 1, or white, will have the strongest Subsurface scattering effect while areas that are closer to 0, or black, will have less of an effect. 
Adjusting the Subsurface Color will help to compensate if areas get too dark and remember using brighter colors results in more subsurface scattering. 

Here you can see how the mask can be used to render two surface types with one material. Note that the transition is soft and not limited to triangles borders.

[REGION:lightbox]
[![](4.png)(w:920 convert:false)](4.png)
[/REGION]



## Technical Details

At the moment, the Subsurface scattering profile shading model does not differ much from Lit (Lambert diffuse, GGX for specular, no Metallic).
 Most of the magic happens in a post process after all lighting has been computed. 

[REGION:note]
The Subsurface scattering profile is based on work from the work from [Jorge Jimenez](http://www.iryoku.com/). Make sure to check out his webpage for many useful tips on how to make your 3D images look more realistic.
[/REGION]

We separate the non-specular (non-view dependent) lighting contributions to support a specular on top of subsurface material and down sample for better performance. 
Similar to a Gaussian blur we filter the image with a 2 pass (assuming a separable kernel) post process. 
The filter kernel depends on the subsurface scattering profile which is stored in the GBuffer (Max 255 active profiles per scene). 
The kernel has colored weights and specific sample positions which can be scaled in the profile (defined in units/cm). 
In a final step, we recombine the scattered light contribution with the full resolution image. To separate the view and non-view dependent lighting, we store a weighting term in the scene color alpha channel. 
This approximation requires a 64 bit render target (see r.SceneColorFormat) and this approximation works for most cases

It successfully takes out the specular but you get a more desaturated non view dependent color for those specular pixels. This can be improved by using two 32-bit render targets for all lighting passes. That has the same memory bandwidth but on some hardware this might be slower. This might be something we want to change (added code complexity).

Here we have an example where the Specular was removed before the blurring was applied. Notice how in the end image (image on the far right) the Specular reflection is crisp and smooth. This is the effect we wanted to achieve.

[REGION:lightbox]
[![](Good_Combination.png)(w:920 convert:false)](Good_Combination.png)
[/REGION]

Here we have an example where the Specular was not removed before the blurring was applied. Notice how in the end image (image on the far right) the Specular reflection is dull and looks a bit stretched. This is not the correct way to have this effect render.  

[REGION:lightbox]
[![](Bad_Combination.png)(w:920 convert:false)](Bad_Combination.png)
[/REGION]

## Scalability and Console Commands

There are some scaling and performance console commands that you can use to help you get a good trade off between high quality visuals and better performance. 

**r.SSS.Scale**: Allows you to disable the post process passes or scale the effect for quick experiments. 

**r.SSS.SampleSet**: Allows you to use less samples so the effect will run faster. However this will mean that the effect will have a lower quality or rendering artifacts could show up.

The following image shows a bit more of the internals of the system. This view can be enabled using **ShowFlag.VisualizeSSS 1**.

[REGION:lightbox]
[![](5.png)(w:920 convert:false)](5.png)
[/REGION]

While the Subsurface scattering profile shading model is a step forward when it comes to rendering skin, there are some limitations in what it can do.
 _Please note that as this system becomes more and more polished, this list could change. _

* The feature does not work in the non-deferred (mobile) rendering mode.
* Setting a large screen scatter radius will show banding artifacts in extreme lighting conditions.
* Currently there is no backscatter of light. 
* Currently a grey outline occurs when SSS Materials are occluded by non SSS Materials.




## Special Thanks

Special thanks to Lee Perry-Smith and his company [Infinite Realities](http://ir-ltd.net) for providing the head model and assistance. 
Also a very special thanks to [Jorge Jimenez](http://www.iryoku.com/) for releasing his implementation as this feature is based on his work.






