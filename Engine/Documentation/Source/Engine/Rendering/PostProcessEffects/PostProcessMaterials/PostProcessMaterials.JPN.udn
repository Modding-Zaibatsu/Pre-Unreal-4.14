INTSourceChangelist:2944039
Availability:Public
Title:ポストプロセス マテリアル
Crumbs: %ROOT%, Engine, Engine/Rendering/PostProcessEffects
Description:マテリアル エディタでパスされるカスタム ポストプロセスの作成およびブレンド方法
Version:4.9

![](Teaser3.png)
![](Teaser0.png)
![](Teaser1.png)
![](Teaser2.png)

[TOC(start:2 end:4)]

## ポストプロセス グラフ

[EXCERPT:PostProcessMaterials_Desc]
アンリアル エンジンにはポストプロセス ノードのグラフに基づいた複雑なポストプロセスがあります。**ポストプロセス マテリアル** は
追加的にある特定の位置へ挿入することができます。全グラフのダンプされた内容を確認するには、 [FAQ](#FAQ) **r.CompositionGraphDebug** を参照してください。
グラフはポストプロセス処理のみではなく、ライティングの一部も処理しています。いずれは、マテリアル エディタからより多くの部分を
カスタマイズできるように計画しています。
[/EXCERPT:PostProcessMaterials_Desc]

ほとんどの場合、グラフは中間レンダリング ターゲットを自動作成します。つまり元の色とブレンドしたい場合、
(PostProcessInput0 からの入力を使って) シェーダーでブレンドする必要があります。

[EXCERPT:PostMatWarning]
[REGION:warning]
ポストプロセス マテリアルは、慎重に本当に必要な場合に限り使用してください。カラーの補正や調整、ブルーム、被写界深度や他の様々なエフェクトなどは可能な限り、Post Process ボリューム固有の設定を使用するようにしてください。この設定は最適化済であり、より効率的です。 
[/REGION]
[/EXCERPT:PostMatWarning]

## ポストプロセス マテリアルの使用

ポストプロセス設定 (通常はポストプロセスボリュームまたはカメラ設定で定義) でいわゆるブレンド可能なアセットをブレンドすることができます。
現時点では、**マテリアル** と **マテリアルインスタンス** のみがブレンドが可能なアセットです。アンリアル エンジンにはいくつかのポストプロセス マテリアルがありますが、
プログラマーの支援なしに独自の **カスタム仕様のポストプロセス** を作成することができます。

1 つ以上のポストプロセス マテリアルを **[Blendables]** セクションのポストプロセス ボリュームへ割り当てます。まず **[＋]** キーを押して新スロットを追加し、
**コンテンツ ブラウザ** でマテリアルを選択して左矢印キーで割り当てます。順序はここでは重要ではなく、未使用のスロットは無視されます。

![](PostProcessSettings.png)

##簡単なポストプロセス マテリアルの作成

ゼロからポストプロセス マテリアルのエフェクト作成概要については、[](Engine/Rendering/PostProcessEffects/PostProcessMaterials/PostProcessDemoMaterialOverview) をご覧ください。

![](Engine/Rendering/PostProcessEffects/PostProcessMaterials/PostProcessDemoMaterialOverview/FinalPostEffect.png)(w:640)

##ポストプロセス マテリアルの重要な設定

ポストプロセス マテリアルではマテリアル ドメインで **[Post Process (ポストプロセス)]** を指定する必要があります。

![](DomainPostProcess.png)

マテリアルが新しい色の出力に使用するのは *EmissiveColor* のみです。さらに、ポストプロセス処理中のどこで、このパスを適用するかを定義することが可能であり、
複数の場合は処理順序 (優先順位) を定義することができます。

![](PostProcessMaterialProps.png)

| ブレンド可能な位置| 説明 |
| -------- | ----------- |
| **Before Tonemapping** | PostProcessInput0 は、 HDR へ最大限のライティングでシーンの色を提供します。 これはテンポラル アンチエイリアシングや GBuffer ルックアップと一緒に問題の修正に使用します。例えば深度やノーマルなど。|
| **After Tonemapping** | 色が LDR 時の優先位置で、より少ない精度と情報量を必要とします。トーン マッピングとカラーグレーディングの後に行う処理です。|
| **Before Translucency** | これはパイプライン内で 'Before Tonemapping' より早く、透過がシーンカラーと組み合わさる前になります。SeparateTranslucency (別々の透過) が、法線透過より後に合成されることに注意してください。 |
| **Replacing the Tonemapper** | PostProcessInput0 は HDR シーンカラー、PostProcessInput1 は SeparateTranslucency (アルファはマスクです) を提供し、PostprocessInput2 には解像度の低いブルーム入力が付いています。 |

通常のポストプロセスの入力は、前のパスから入ってきます。**PostProcessInput0** を使用する場合、 SceneTexture マテリアル式かから色にアクセスできます。SceneColor を使用した場合、適切な結果が得られないことがあります。

## 異なるマテリアル インスタンスのブレンド

[Using A Post Process Material](#ポストプロセスマテリアルの使用)

ポストプロセス ボリュームでは、複数のポストプロセス マテリアル間で滑らかな遷移を簡単に設定することができます。ここでは「Unbound」にマークが付けられ、より大きなブレンド半径を持つボリュームを使用しています (例えば 1000)。

[REGION:imagetable]
| ![](BlendingAVolume.png) | ![](BlendingAVolume1.png) |
|----|----|
| Unbound に設定したポストプロセス | ボリュームを結合するポストプロセス |
[/REGION]

各ボリュームで同一マテリアルの異なるマテリアル インスタンスを指定します。色はこの 2 つのマテリアル インスタンスに対して違う設定ができるマテリアル パラメータとして指定されます。

[REGION:lightbox]
![](PP_BlendedMaterial.png)
[/REGION]

[REGION:imagetable]
| ![](BlendMatInst1.png)(w:400) | ![](BlendMatInst2.png)(w:400) |
|----|----|
| 赤のマテリアル インスタンス | 緑のマテリアル インスタンス |  
[/REGION]

Blend Radius が以下の範囲内の場合、カメラ位置に合わせてボリューム設定が使用されてブレンドされます。

[REGION:imagetable]
| ![](Blend1.png)(w:300) | ![](Blend2.png)(w:300) | ![](Blend3.png)(w:300) |
|----|----|----|
| Unbound Post Process Volume Material Instance (RED) を 0.75 に設定 | Blend Radius が 1000  | Post Process Volume Material Instance (GREEN) を 0.75 に設定 |  
[/REGION]


<!---
[OBJECT:ComparisonSlider]
	[PARAM:before]
	![Green vignette material instance](VignetteG.png)(w:450)
	[/PARAM]
	[PARAM:after]
	![Red vignette material instance](VignetteR.png)(w:450)
	[/PARAM]
[/OBJECT]
--->

カメラが移動すると、2 つのエフェクト設定間にスムーズな線形トランジションを認識することができます。

2 つのボリュームを持つレベルを上から見ると、以下のような図になります。結合していない大きなボリュームは赤のマテリアル インスタンス、小さなボリュームは緑のマテリアル インスタンスを持ち、ブレンド可能になっています。
小さい方のボリュームの優先度が高くなっています。マテリアルのパラメータはカメラ位置に応じてブレンドされます。
ぼやけたボーダーはボリュームによって指定される BlendRadius プロパティで定義され、ボリュームの形状を広げます。

正しくセットアップすると、すべてのブレンドは期待通りに行われます。

[OBJECT:ComparisonSlider]
	[PARAM:before]
	![Bad Setup](VolumeBlendBad.png)(w:450)
	[/PARAM]
	[PARAM:after]
	![Good Setup](VolumeBlendGood.png)(w:450)
	[/PARAM]
[/OBJECT]


この 2 つのセットアップの違いは、マテリアル (スカラーまたはベクター) のパラメータで指定するデフォルト値です。 
良いセットアップでは、パスがエフェクトを持たない値になっています (例、ホワイトで乗算または 0 で線形補間)。

**この 2 つのセットアップで以下がわかります。** カメラがいずれかのボリュームの影響範囲外にあるとポストプロセスのパスはレンダリングされません (グレイのグリッドで視覚化)。
いずれかのボリュームの影響範囲内にあると、正しいブレンドが表示されます。

**悪いセットアップの場合 :** カメラが影響がある半径に入ると、ぎこちない遷移が見えますが、デフォルト パラメータを誤って指定したからです。

**良いセットアップの場合 :** カメラが影響する半径に入ってくる遷移はうまく隠されていて、ボリュームの色が滑らかに遷移するのがわかります。

[REGION:note]
すべてのマテリアル インスタンス プロパティは、プロパティのチェックボックスのチェック状況に関係なくブレンドされます。
(親からプロパティをブレンドする場合)チェックボックスがチェックされていないプロパティは、効果を得られないポストプロセス設定とは異なります。
つまりマテリアル インスタンスをブレンドすると、全てのプロパティがブレンドされます。
[/REGION]

## SceneTexture マテリアル式

マテリアルへ **SceneTexture** マテリアル式を追加して、式プロパティで参照するテクスチャを選択します。

![](SceneTextureProps.png)

ノードには任意の入力値と複数の出力値があります。 

![](SceneTextureExpression.png)

**UV** 入力値で、テクスチャ ルックアップを行う位置を指定することができます (Color 出力値のみに使用)。
Color 出力値は 4 チャンネル出力 (実際のチャンネル割り当てはシーンテクスチャ ID に依存します) です。**Size** は、テクスチャの幅と高さを持つ
2 コンポーネントのベクターです。この逆数 (1/幅、1/高さ) は、 **InvSize** 出力値で有効です。以下の例のように、
隣接するサンプルの参照に便利です。

![](DepthNextTo.png)

マテリアル式は、現ピクセルとの隣接するピクセルの深度の違いを計算します (例えば、In=0.1 の時、下部のピクセルへデルタ値を返します)。

## GBuffer プロパティの使用

GBuffer は、シェーディングの計算 (ライトとマテリアルの相互処理方法) にマテリアルを格納する複数のテクスチャ (例えばサブサーフェス / スペキュラカラー、ラフネスなど) や、
ライティングを使用しないオブジェクト配列 (例えばノーマル、深度) で構成されます。ディファードレンダリングは、最初に GBuffer をレンダリングしてから GBuffer 配列と一緒に
全体のライティング (ディファード) を計算します。UE4 がディファードシェーディングパスを使用する場合 (例えばDirectX 11または高性能 OpenGL)、ポストプロセス処理中にこれらのバッファへアクセスすることができます。

GBuffer ピクセル/テクセルは出力ピクセルと 1：1 で結びつかないないため、アンチエイリアス処理がこれを多少困難にします (下記セクション参照)。

## CustomDepth

この特別な機能は、オブジェクトを別の深度バッファ (カスタム深度バッファと呼ばれます) でレンダリングすることによって、特定のオブジェクトをマスクします。
余分なドローコールを追加しますが、マテリアルは追加しません。深度のみを出力するため、レンダリングは比較的低コストです。この機能はメッシュでアクティベートできます。
(例えば、スタティックメッシュプロパティやレンダリングのカスタム深度):

![](CustomDepth.png)

以下のシーンでは 2 つのオブジェクトでこの機能を有効にしていますが、コンテンツを視覚化するポストプロセス処理のパスはなく、以下のようにこの機能は不可視のままとなります。

![](scene.png)

こちらは CustomDepth を視覚化したものになります。

![](sceneCustomDepth.png)

視覚化のために使用したマテリアルです。

![](CustomDepthMat.png)

## テンポラル アンチエイリアシングまたは GBuffer ジッター

テンポラル アンチエイリアシングは UE4 の特殊な機能で、わずかなパフォーマンスコストで画像品質を大幅に向上させます。

デフォルト設定で、ポストプロセス マテリアルはポストプロセスグラフの最後に挿入されています (トーンマッパ後)。つまり、トーンマッピング、カラー グレーディング、そして Temporal AA が適用された後に
最終的な LDR カラーを受け取ります。パフォーマンスや使いやすさの観点から、多くの簡易なポストプロセス エフェクトにとって最高の場所です。

これは特定のオブジェクト周りのシルエットを可視化させるために使用した、カスタムの深度入力値の使用例です。

![](sceneAfterTonemapper.png)

元の画像はシルエットにアンチエイリアス処理が見受けられませんが、動作中はシルエットが 1 ピクセル変動するのが分かります。
テンポラル アンチエイリアシングは、全体シーンのレンダリングをサブピクセルの各フレームで動かすためです。アンチエイリアス処理がされた最終画像を作成するために、複数のフレームが一緒に結合されます。
この問題を解決するために、ポストプロセス グラフで前の場所へマテリアルを移動することもできます。

こちらが結果となります。

![](sceneBeforeTonemapper.png)

安定したアンチエイリアス処理がされた画像となります。移動中はテンポラル アンチエイリアシングにいくつかのアーティファクトに気づくかもしれません。この機能は古い画像を置換するために深度バッファを使用しています。オブジェクトの内側のレンダリングは上手く機能しますが、
オブジェクトの外側では深度バッファを調整する必要があります (パフォーマンスの負荷が余分にかかるためまだ行っていません)。
これは理想的ではありません。 

## UV と ScreenPos

画面にあわせたバッファでポストプロセス マテリアルをルックアップすることができますが、正しい UV が必要になります。 
**ScreenPosition** マテリアル式が期待する UV (ビューポートの左上が 0,0 で、右下が 1,1) を出力します。
**テクスチャ座標** マテリアル式を使うと、結果は異なります。これは、テクスチャ (厳密にはレンダー ターゲット) は実際には、ビューポートよりも大きくなる可能性があるためです。
このテクスチャを複数のビューポートで共有し、最も大きいものがすべてのビューポートで使用されるため、エディタの中では大きくなってしまう可能性があります。
ゲーム内でさえ、大きくなってしまうことがあります (例、SceneCapture アクタは小さいビューポート、Matienee black borders、 Splitscreen、 VR など)。
テクスチャ座標 マテリアル式を使うと、UV はこの大きめのテクスチャになります。相対オフセット (ピクセルサイズのエッジ探知など) だけが必要な場合は、正しいサイズでスケールする必要があります。
**SceneTexture** マテリアル式には、サイズの出力とサイズの反転があります (ピクセル オフセットに効果的かつ便利です)。
ビューポート UV を取得したい場合 (例、テクスチャをビューポートにマッピング) は、 **ScreenPosition** マテリアル式を使ったり、必要な演算を手書きのコードで行う (より制御されますが遅くなることがあります) ことができます。
これを行うためには、 **ViewSize** マテリアル式が必要になります。全てをテストするには、様々なビューポート コンフィギュレーションをテストすることができるコンソール変数 **r.ViewPortTest** を使います。

## フィルター済みテクスチャ ルックアップ

SceneTexture マテリアル式には、[bilinear (バイリニア)] でフィルタ処理したルックアップを取得するためのチェックボックスがあります。このオプションを使うと、レンダリング速度が落ちるので、必要な場合のみ使用してください。
スクリーン空間テクスチャの多くはフィルタをサポートしていません (GBuffer など)。このプロパティを公開しないことで、エンジンが必要に応じてデータを圧縮できるようになります (パッキングがフィルタリングを妨げます)。

## トーンマッパを置き換える

トーンマッパでブレンド可能な位置を置き換えることによって、エンジン トーンマッパを独自のものでオーバーライドすることができます。この機能は開発途中であり、今後変更される場合があります。また、機能はまだ完全に実装されていません。

![](ReplacingTheTonemapper.png)

ポストプロセス設定パラメータをトーンマッパへ公開していますが、大幅な変更が予想されます。
値はマテリアル パラメータとして公開され、正確な名前が必要になります。 

ベクター パラメータ：
	Engine.FilmWhitePoint
スカラー パラメータ
	Engine.FilmSaturation
	Engine.FilmContrast


[EXCERPT:PostMatWarning]
[REGION:warning]
パラメータを取得するには、ポストプロセス マテリアルからマテリアル インスタンスを作成する必要があります！
[/REGION]
[/EXCERPT:PostMatWarning]

独自のパラメータを使って、他のポストプロセス マテリアルのようにブレンドすることも可能です。

## 周知の問題
以下は今後修正すべき問題です。

  * **マテリアル式 SceneTexture**
    * 個々の透過が機能しない点
    * 特定のルックアップが特定のパスで機能しない点 (パフォーマンスのコストが高すぎるため修正しない可能性もあります)
    * MaterialFunction がエラーを報告しても PostProcess ドメインでマテリアルに使用される点
  * **マテリアル**
    * PostProcessMaterial の UV が 0 から 1 の範囲ではない点 (例えばエディタでビューポートサイズを縮小時)。ルックアップと調整は取れるもののビネット エフェクトのようなものは実装が難しくなります。
    * ポストプロセス マテリアルのアセット サムネイルの見た目が正確ではない。
    * アルファ値の出力がいまだサポートされていない (オパシティを通過しなくてはいけません)。
    * マテリアル エディタのプレビュー マテリアルの見た目が正確ではない。
    * マテリアルの変化がポストプロセス処理の変化につながらない。ワークアラウンド：エディタの再起動
	* **コンテンツ ブラウザ** でポストプロセス マテリアルのフィルタリングを簡単にできるようにする。
  * **ブレンド**
    * ブレンド半径で 2 つのポストプロセス ボリュームをブレンドする時の遷移が滑らかではない。* デフォルト値であるマテリアルインスタンスを設定した非結合ボリュームを使用してこれを防ぎます。


## FAQ
  * **入力値に "ライティングのみのモード" のテクスチャを使用できますか？**

    できません。中間段階でこのデータは有効ではありません。このビューモードではマテリアルカラーを無視して
	生成しています。高速オプションにするには大部分のレンダリング コードの再構成が必要です。

  * **SceneColor のルックアップで表示されるバンディングは PostProcessInput0 の使用時に何故見えないのでしょうか？**

    SceneColor を使用時は、現在書き込んでいるテクスチャへのルックアップが可能となるように質を低下させたシーンのコピーを作成します。
	(一般的にはこの処理が不可能なメッシュへレンダリングしています) 
	ポストプロセス処理では PostProcessInput0 を使用します。

  * **ポストプロセス処理に必要なメモリ使用量はどの位ですか？**

    メモリーの使用コストはスクリーンの解像度次第です。トーンマッピング処理の前に HDR (ピクセルあたり 8 バイト)、その後 LDR (ピクセルあたり 4 バイト) を使用します。

  * **ポストプロセスのレンダリング負荷を低くするには、どうしたらよいですか ?**

    ターゲットプラットフォームで測定、テクスチャルックアップ数を低めに維持、より少ない演算操作および依存テクスチャルックアップの削減、
	ランダム化したテクスチャルックアップの回避 (テクスチャのキャッシュ ミスが原因で遅くなっている可能性があります)。

  * **パスはいくつ使用できますか？**

    パスの使用ひとつひとつがパフォーマンスコストへ加算されます。パスの結合とパスのアクティベートは必要時のみにとどめてください。一般的なゲーム機能。
	例えば、より良いパフォーマンスのために、エンジンパスへノイズを追加するなど。

  * **ポストプロセス処理およびブレンドにかかる CPU のパフォーマンス負荷はどのくらいですか？**

    マテリアルのブレンドはとても低負荷です。すべてのマテリアル インスタンスのプロパティは、ブレンドされ、こうした設定を持つひとつのポストプロセス マテリアルのパスだけがレンダリングされます。

  * **正確なテンポラル アンチエイリアシング を得るために "Before Tonemapper" を使用したいです。カラーを使用するとトーンマッピングされてしまい、違った見た目となってしまいます。この問題の回避方法は？**
    
	この問題に対する簡単な解決法はありません。逆トーンマッピング演算 (高負荷) をする必要があります。明暗順応によって、
	色の表示が異なる場合もあります。EyeAdaptation レベルを SceneTextures に公開して補正することができます。

  * **ポストプロセス グラフのダンプ内容をすべて取得する方法は？**

	**r.CompositionGraphDebug** でグラフのログをコンソールへ記録することができます。例：

		FRenderingCompositePassContext:Debug 'PostProcessing' ---------
		Node#1 'SceneColor'
			ePId_Output0 (2D 1136x768 PF_FloatRGBA RT) SceneColor Dep:2
		Node#4 'Velocity'
			ePId_Output0 (2D 1136x768 PF_G16R16 RT) Velocity Dep:1
		Node#2 'SceneDepthZ'
			ePId_Output0 (2D 1136x768 PF_DepthStencil) SceneDepthZ Dep:1
		Node#5 'MotionBlurSetup0MotionBlurSetup1'
			ePId_Input0:Node#4 @ ePId_Output0 'Velocity'
			ePId_Input1:Node#1 @ ePId_Output0 'SceneColor'
			ePId_Input2:Node#2 @ ePId_Output0 'SceneDepthZ'
			ePId_Output0 (2D 568x384 PF_FloatRGBA RT) MotionBlurSetup0 Dep:2
			ePId_Output1 (2D 568x384 PF_FloatRGBA RT) MotionBlurSetup1 Dep:1
		Node#6 'QuarterResVelocity'
			ePId_Input0:Node#5 @ ePId_Output0 'MotionBlurSetup0MotionBlurSetup1'
			ePId_Input1:
			ePId_Output0 (2D 284x192 PF_FloatRGBA RT) QuarterResVelocity Dep:1
		Node#7 'VelocityBlurX'
			ePId_Input0:Node#6 @ ePId_Output0 'QuarterResVelocity'
			ePId_Input1:
			ePId_Output0 (2D 284x192 PF_FloatRGBA RT) VelocityBlurX Dep:1
		...


