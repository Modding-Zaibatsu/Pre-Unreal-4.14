INTSourceChangelist:2704344
Availability:Public
Title:GPU プロファイリング
Crumbs: %ROOT%, Engine
Description:ゲームの GPU デマンドを最適化する方法
Navigation:topic
version:4.9

GPU では多くのユニットが平行して動いており、フレームの異なるパーツに対して異なるユニットで結合されることが一般的です。
このような事情から、ボトルネックと GPU のボトルネックが何かを探す場合は、GPU の負荷の発生源を見ると分かります。

## GPU 負荷の発生源

ProfileGPU コマンドを使って、各種パス、そして時にはドローコールをたどって GPU 負荷をすぐに特定することができます。
マウスベースの UI またはテキストバージョンのいずれかを使用できます。**_r.ProfileGPU.ShowUI_** で UI を抑止することができます。データは GPU タイムスタンプに基いており、
通常とても正確です。最適化をすると数字の信頼性が落ちる場合もあるので、数字を厳しく見るのが理想です。ドライバーの中には、シェーダー使用後の数秒でシェーダー負荷を
最適化するものもあることが分かりました。これは非常に分かりやすく、確信を得るために、少し待ったり、もう少し時間を測定するのに便利です。 

[REGION:imagetable]
| ![](ProfileGPU.png)(w:474) |
| :----: | 
| CONSOLE:ProfileGPU |
| Shortcut:Ctrl+Shift+, |
[/REGION]

    ...
     1.2% 0.13ms   ClearTranslucentVolumeLighting 1 draws 128 prims 256 verts
    42.4% 4.68ms   Lights 0 draws 0 prims 0 verts
       42.4% 4.68ms   DirectLighting 0 draws 0 prims 0 verts
           0.8% 0.09ms   NonShadowedLights 0 draws 0 prims 0 verts
              0.7% 0.08ms   StandardDeferredLighting 3 draws 0 prims 0 verts
              0.1% 0.01ms   InjectNonShadowedTranslucentLighting 6 draws 120 prims 240 verts
          12.3% 1.36ms   RenderTestMap.DirectionalLightImmovable_1 1 draws 0 prims 0 verts
              1.4% 0.15ms   TranslucencyShadowMapGeneration 0 draws 0 prims 0 verts
    ...

[REGION:note]
ProfileGPU は、アーティストは正しい光源を最適化しやすいようにライト名を表示します。
[/REGION]

フレームごとにおおまかな負荷を調べて、妥当な負荷を検討するのは意味があります (重たいドローコール、複雑なマテリアル、高密度のトライアングル メッシュ、遠い表示距離など)。

* EarlyZPass:当社ではデフォルトで z パスを使います。DBuffer デカールはフルの Z パスを要求します。これは、**_r.EarlyZPass_** と **_r.EarlyZPassMovable_**. でカスタム化が可能です。
* 基本のパス:ディファードを使用すると、単純なマテリアルは帯域幅の制約を受ける可能性があります。実際の頂点とピクセル シェーダーは、マテリアル グラムで定義されます。動的オブジェクト上に間接光がある場合、負荷が増加します。
* シャドウマップのレンダリング：実際の頂点とピクセル シェーダーは、マテリアル グラムで定義されます。ピクセル シェーダーは、マスクされたマテリアル、あるいは透過マテリアルのみに使用されます。
* シャドウ プロジェクション/ フィルタリング：ほとんどのライトでは、 **_r.ShadowQuality.Disable_** シャドウ キャスティングでシェーダー負荷を調整します。Static lisht (静的ライト) か Stationary light (固定ライト) かを考慮します。
* オクルージョン カリング：HZB オクルージョンの負荷は常に高いですが、オブジェクト当たりの負荷は小さめです。オンにしなくても大丈夫か **_r.HZBOcclusion_** をトグルして確認します。
* ディファード ライティング：接したピクセルに比例し、ライトの機能、 IES プロファイル、シャドウの受け取り、エリアライト、複雑なシェーディング モデルが加わるとさらに負荷が大きくなります。
* タイル処理されたディファード ライティング：**_r.TiledDeferredShading_** をトグルして GPU ライトを無効にするか、**_r.TiledDeferredShading.MinimumCount_** を使ってタイル処理された方法またはディファードでない方法をいつ使うか定義します。
* 環境反射:**_r.NoTiledReflections_** をトグルして、タイル処理ではない方法を使います。プローブほとんどない場合を除いて、非常に遅くなります。
* アンビエント オクルージョン：品質の調整が可能で、効率的な大きいエフェクトに対して複数のパスを使用できます。
* ポストプロセス：パスによってはシェアされているので、表示フラグを切り替えて、そのエフェクトがパフォーマンスに価値があるかを確認します。

それらの次のパス上にエフェクトを持つことができるパスもあります。以下が例です。
* EarlyZ のフルパスはさらに多くのドローコールと若干の GPU に対して負荷が増えますが、ベース パスでのピクセル処理を避け、そこでの負荷を大幅に削減することができます。
* HZB を最適化すると、カリングがより控えめになります。
* スクリーンの大部分がシャドウの場合、シャドウを有効化するとライトのライティング負荷を減らすことができます。

## GPU のボトルネックについて

パフォーマンス負荷は、ピクセル数に比例する場合が多いです。**_r.SetRes_** を使ってレンダリングの解像度を変えたり、エディタのビューポートをスケールしてみると、そのことが分かります。
**_r.ScreenPercentage_** を使った方がずっと便利ですが、この機能が使われると余分なアップサンプリング負荷がかかることに留意してください。

かなり大きなパフォーマンスの変更があった場合は、ピクセル関連の何かの制約を受けています。通常、メモリ帯域 (読み書き) か演算 (ALU) のいずれかですが、 
特定のユニットがサチュレートしている稀なケースもあります (MRT エクスポートなど)。関連するパスでメモリ (または演算) を下げてパフォーマンスに違いが出れば、それはメモリ帯域の制約を受けていることがわかります (または ALU ユニット)。 
これは単なるテストなので、違いが同じに見える必要はありません。これで、パフォーマンス改善のために減らす必要のある負荷の正体が分かりました。

シャドウマップの解像度は画面の解像度でスケールしませんが (**_r.Shadow.MaxResolution_** を使用)、シャドウ キャスティングのかなり領域をマスクしているか透過マテリアルでない限りは 
ピクセル シェーダーの制約は受けません。シャドウマップ レンダリングは、頂点処理あるいはトライアングル化 (高密度のメッシュ、 LOD なし、テセレーション、 WorldPositionOffset の使用) の制約を受ける場合が多いです。 
シャドウマップ レンダリングは、ライト数、カスケード / キューブマップの側面、ライト錐台でシャドウキャスティングしているオブジェクト数に比例します。これはよくあるボトルネックで、 
負荷を減らす方法は大きいコンテンツを変更するのみです。

ワイヤーフレームがソリッドなカラーで表示される場合、クワッドを使用しないと細分化が進んだメッシュに支障ができます。これは、
 GPU がトライアングルを 2x2 ピクセルブロックに処理し、トライアングルの外のピクセルを少し後で拒否するためです。これは、ミップマップの演算処理に必要です。大きめのトライアングルでは特に問題になりませんが、
 トライアングルが小さかったり冗長な場合、かなりの数のピクセルが処理されるのに実際にはほとんど画像に影響しないため、パフォーマンスが下がります。ライティングで非常にうまくクワッドを使用しているので、
ディファード・シェーディングがこの状況を改善します。問題はベース パスに残るので、複雑なマテリアルのレンダリングはかなり遅くなります。
これを解決するには、密度の低いメッシュを使用します。詳細度メッシュで、問題がある場合のみ行うことができます。

[REGION:note]
_r.EarlyZPass_ を調整して、早期 Z パスを利用する価値があるか確認します (ベースパス中にドローコールが増えてオーバードローが減る)。
[/REGION]

解像度を変更しても関係ない場合、頂点処理 (バーテックス シェーダー、テセレーション) 負荷の制約を受けている可能性が高いです。
それを確認するためには、コンテンツの変更がたいがい必要です。よくあるケースを紹介します。

* 頂点が多すぎる (詳細度メッシュを使用)
* ミップマップが弱いテクスチャを使った複雑な WorldPositionOffset / Displacement マテリアル
* テセレーション (テセレーション係数 fastest way: show Tessellation で調整します。テセレーション レベルが粗いとうまくスケールできないハードウェアもあるので、できるだけ避けてください)
* UV あるいは法線シームは頂点が増える場合が多いです (アンラップされた UV を見ると UV 島はほとんど失敗で、フラット化されたメッシュはトライアングルごとに頂点が 3 つあります)。
* 頂点属性が多すぎる (余分な UV チャネル)
* 頂点数が適切か確認する。インポータ コードには頂点を結合 (同じ位置、 UV 、法線を持つ頂点をまとめる) しないものもある。


それほど頻繁ではありませんが、何かの制約を受けることがあります。例えば以下のものです。
* オブジェクトの負荷 (CPU 負荷の場合が多いが、 GPU 負荷も若干含まれる)
* トライアングル設定負荷 (シャドウマップ スタティックメッシュなどの、負荷が小さいバーテックス シェーダーでポリゴン数の多いメッシュはほとんど問題にはなりません)
  * 詳細度 (LOD) メッシュの使用
* 表示負荷 (HZB オクルージョン カリングなど)
* シーン負荷 (GPU パーティクル シミュレーションなど)






