INTSourceChangelist:2677322
Availability:Public
Title:プロジェクトのパッケージ化
Crumbs: %ROOT%, Engine, Engine/Basics/Projects
Description:配布用のアンリアル ゲームプロジェクトのパッケージ化
version:4.9

[TOC(start:2)]



[EXCERPT:Intro]
アンリアル プロジェクトをユーザーへ配布する前に適切にパッケージ化処理をしなくてはいけません。パッケージ化処理することで全コードとコンテンツを最新に保ち、対象プラットフォームで実行可能な正式なフォーマットを保証します。 
[/EXCERPT:Intro]

パッケージ化処理中は複数の手順を実行します。プロジェクトがカスタム ソースコードで記述されている場合、まず最初にコードをコンパイルします。そして、全ての必須コンテンツを対象プラットフォームで利用できるフォーマットへ変換 (いわゆるコンテンツのクック) しなくてはいけません。それが終わるとコンパイル済みのコードとクックされたコンテンツは、Windows インストーラーのような配布可能なファイル一式へまとめられます。


メインの **[File]** メニュー配下に、サブメニューを含んだ **[Package Project]** オプションがあります。サブメニューには、パッケージ化処理の対象プラットフォームがすべて表示されます。パッケージ化処理の目的は、単一マップではなくゲーム全体をテストすること、または 
提出 / 配布用のゲームを準備することです。

Android プラットフォームに関しては、複数の選択肢があります。詳細は、『Android Texture Formats』のページを参照してください。

パッケージ化処理前に設定する **Advanced** オプションもいくつかあります。 

プラットフォームを選択すると、ゲームにコードが含まれる場合、エディタはゲームをコンパイル、ゲームデータ全てをクック、そしてコンテンツをパッケージ化処理します。プロジェクトに Starter Content が含まれると処理速度が低下します。 
もしくは、たくさんのテスト / 仮のコンテンツやマップを作成した場合も処理速度が低下します。


## ゲームのデフォルト マップの設定

ゲームをパッケージ化する前に、まずパッケージ化されたゲームの開始時に読み込まれる **Game Default Map** を設定する必要があります。マップを設定せずに、ブランク オブジェクトを使用している場合は、パッケージ化されたゲームの開始時に黒い画面しか表示されません。First Person や Third Person などのテンプレート マップの中のひとつを使用した場合は、開始時マップが読み込まれます。

ゲームのデフォルト マップを設定するには、エディタのメイン メニューで **Edit > Project Settings > Maps & Modes** をクリックします。

![](Project_Settings_MapsNModes.png)




## パッケージの作成

特定のプラットフォームを対象にプロジェクトをパッケージ化するには、エディタのメインメニューで **File > Package Project > [PlatformName]** をクリックします。

![](packaging_menu.png)

ターゲット ディレクトリを選択するダイアログが表示されます。パッケージ化処理が完了すると、選択したディレクトリ内にパッケージ化されたプロジェクトが格納されます。

ターゲット ディレクトリが確認されると、選択したプラットフォーム向けにプロジェクトの実際のパッケージ化処理が開始します。パッケージ化は時間がかかるため、この処理はバックグラウンドで実行し、ユーザーはエディタを継続して使用することができます。エディタの右下隅に、処理の進捗を示すステータス インジケータが表示されます。

![](progress.png)

このステータス インジケータには現在アクティブなパッケージ化処理を中止する **[Cancel]** ボタンがあります。また **[Show Log]** リンクをクリックすることにより、拡張した出力ログ情報を表示させることもできます。パッケージ化処理が成功しなかった場合など、問題を突き止める際に出力ログは有益な情報です。

![](log.png)

経験の浅いユーザーに対する情報ですが、エラーや警告など最も重要なログ情報は通常の **メッセージログ** ウィンドウに記録が残ります。

![](message_log.png)

[REGION:note]
こうしたウィンドウがいずれも表示されない場合は、 **Window** > **Developer Tools** > **Output Log** / **Message Log** オプションからアクセスできます。
[/REGION]
 
## パッケージ化されたゲームの実行

パッケージ化処理を行う時には、出力用のディレクトリを選択しました。パッケージ化処理が正常に完了すると、パッケージ化されたゲームはプラットフォーム専用のサブディレクトリの中に入ります。例えば、 TappyChicken/Final を選択した場合、iOS ビルドは TappyChicken/Final/IOS に、  
Android ビルドは TappyChicken/Final/Android に入ります。選択したサブディレクトリへ移動すると、パッケージ化済みのゲームがプラットフォームに適したフォーマットで見つかります。 
Android の場合、「.apk」、「.obb」、「.bat」のファイルがあります (デバイス上にゲームをインストールするために「.bat」ファイルを実行します)。IOS プラットフォームの場合、「.ipa」ファイルがあります。このファイルは、iTunes または Xcode 経由でインストールします。
作成されるファイルの数や種類は対象プラットフォームによって異なります。以下の画像は Windows 向けプロジェクトの出力例を示します。

![](results.png)

[EXCERPT:RunCooked]
**パッケージ化したゲームを実行する方法**

1. 以下のテーブルを参照してパッケージ化したゲームの実行ファイルを検索します。

	| Configuration | EXE Name                             | EXE Location                                                    |
	| ------------- | ------------------------------------ | --------------------------------------------------------------- |
	| Development   | [ProjectName].exe                    | [PackageDirectory]\WindowsNoEditor |
	| Shipping      | [ProjectName]-Win32-Shipping.exe.exe | [PackageDirectory]\WindowsNoEditor |

1. 実行ファイルを **ダブルクリック** してゲームを実行します。
[/EXCERPT:RunCooked]


## 配布

IOS あるいは Android ゲームを App Store や Google Play Store にサブミットするには、ご自分のパッケージを Distribution モードで作成する必要があります。そのためには、**[Packaging]** メニューの **[Packaging Settings]** オプションの 
[Distribution] チェックボックスにチェックを入れます。これで最終パッケージが正しく署名されます。

IOS の場合、Apple の Developer サイトでディストリビューション証明書および モバイル プロビジョニングを作成する必要があります。開発証明書の場合と同じように証明書をインストールし、 
もう 1 つのファイルの隣に「Distro_」プレフィックスの付いた名前をディストリビューション プロビジョニングに付けます (「Distro_MyProject.mobileprovision」と「MyProject.mobileprovision」ができます)。

Android の場合、.apk を署名するキーを作成し、「SigningConfig.xml」と呼ばれるファイルでビルド ツールに情報を提供する必要があります。このファイルはインストール済みの「Engine」ディレクトリ、 
(Engine/Build/Android/Java) にあります。このファイルを編集すると、すべてのプロジェクトに適用されます。ただし、プロジェクトの「Build/Android」ディレクトリ (Java ディレクトリではない) にこのファイルをコピーすることができ、 
ファイルはそのプロジェクトのみに使用されます。キーを生成し、ファイルに入力する手順は、ファイルそのものの中に入っています。


## 詳細設定

メインメニューで [ **File > Package Project > Packaging Settings...** ] または [**Edit > Project Settings > Packaging**] をクリックすると、いくつかのパッケージ化処理機能の詳細設定オプションが表示されます。

![](settings.png)

 現時点では以下のオプションを使用できます。

| オプション | 説明 |
| ------ | ----------- |
| Build Configuration | コードベースのプロジェクトをコンパイルするビルドのコンフィギュレーションです。デバッグ作業には [Debug] を選択、他の大半のプロジェクトは最小限のデバッグ サポートを選択、より優れたパフォーマンスには [Development] を選択、そして最終出荷用ビルドには [Shipping] を選択します。 |
| Staging Directory | パッケージ化したビルドを格納するディレクトリです。ターゲット ディレクトリの選択時に別のディレクトリを選択すると、このオプションは自動的に更新されます。 |
| Full Rebuild |全コードをコンパイルするか否かを設定します。無効な場合、修正されたコードのみがコンパイルされます。これによりパッケージ化処理が迅速化する場合があります。出荷ビルドは、ビルド漏れや古いコンテンツを含まないためにも常にフルの再ビルドを実行してください。このオプションはデフォルト設定で有効です。 |
| Use Pak File | 個々のファイルまたは単一パッケージとしてプロジェクトのアセットをパッケージ化するか否かを設定します。有効な場合、各ファイル全てをコピーする代わりに、単一「.pak」ファイルへ全アセットを格納します。プロジェクトにたくさんのアセットファイルがある場合、「.pak」ファイルを使用した方が配布が容易になる場合があります。多くのファイルを移動する必要がないからです。このオプションはデフォルト設定で有効です。 |
| Generate Chunks | ストリーミングのインストールで使用可能な .pak ファイルのチャンクを生成するかどうかを設定します。|
| Build Http Chunk Install Data | HTTP チャンク インストーラ向けにデータを生成するかどうかを設定します。これにより、ランタイムにインストールするようにウェブサーバー上にデータをホストすることができます。 |
| Http Chunk Install Data Directory | データをビルドするディレクトリです。 |
| Http Chunk Install Data Version | HTTP チャンク インストール データのバージョン名です。 |
| Include Prerequisites | 再配布可能なオペレーティング システムのコンポーネントなど、パッケージ化したゲームの前提条件を含むかどうかを指定します。 |
[PUBLISH:Licensee]
| Directories to Always Cook | 常にクックが必須であるファイルを含んだディレクトリのリストです。デフォルト設定では、パッケージ化機能がゲームで参照する全てのコンテンツを自動的に検知してクックします。必須コンテンツの中には、カスタム スレート UI のテクスチャなど、直接参照されないコンテンツもあります。このようなコンテンツが格納されているディレクトリは、パッケージに含まれるように、ここにリスト化します。 |
[/PUBLISH:Licensee]



## コンテンツのクック

デベロッパーとして新規または修正したゲーム コンテンツをイタレーションする時に、まずステージン グディレクトリへ全てをパッケージ化処理し、その後そこから実行するという冗長な処理を行いたくない場合もあることでしょう。従って、[ **File > Cook Content > [PlatformName]**] をクリックして、パッケージ化せずに特定のターゲット プラットフォームのコンテンツのみをクックすることも可能です。

この機能は、プロジェクトのローカルのデベロッパーのワークスペースにあるコンテンツを更新し、ステージング ディレクトリへアセットをコピーしません。反復作業を迅速に行うために、ローカルのデベロッパー ワークスペースから直接ゲームを実行することができます。
