INTSourceChangelist:2714483
Availability:Public
Title:프로젝트 패키징
Crumbs: %ROOT%, Engine, Engine/Basics/Projects
Description:언리얼 게임 프로젝트의 배포용 패키지 만들기입니다.
version: 4.9

[TOC(start:2)]



[EXCERPT:Intro]
언리얼 프로젝트를 사용자에 배포하기 전, 올바른 방식으로 패키지를 만들어야 합니다. 패키징을 통해 모든 코드와 콘텐츠가 최신인지, 타겟 플랫폼에서 실행하기에 적합한 포맷으로 되어있는지를 확인합니다.
[/EXCERPT:Intro]

패키징 프로세스 도중에는 여러가지가 단계별로 수행됩니다. 프로젝트에 커스텀 소스 코드가 있을 경우, 이 코드 먼저 컴파일합니다. 그런 다음 필수 콘텐츠 전부를 타겟 플랫폼에서 사용 가능한 포맷으로 변환합니다 (소위 콘텐츠 쿠킹입니다). 그 이후 컴파일된 코드와 쿠킹된 콘텐츠를 묶어 윈도우용 인스톨러와 같은 배포가능 세트 파일로 만듭니다.


메인 **파일** 메뉴 아래 **Package Project** (패키지 프로젝트)라는 옵션이 있습니다. 그 서브 메뉴에는 패키지를 만들 수 있는 대상 플랫폼이 전부 표시됩니다. 패키징의 목적은 하나의 맵이 아닌 전체 게임을 테스트하거나, 
제출/배포용 게임을 준비하는 것입니다.

안드로이드의 경우, 여러가지 선택사항이 있습니다. 자세한 정보는 안드로이드 텍스처 포맷 관련 부분을 참고해 주시기 바랍니다.

패키징 전 설정할 수 있는 **고급** 옵션도 몇 가지 있습니다.

플랫폼을 선택하고 나면, 게임에 코드가 있는 경우 컴파일을 먼저 하고, 게임 데이터 전부를 쿠킹한 다음, 콘텐츠를 패키징합니다. 프로젝트에 시작용 콘텐츠를 
포함시켰거나 테스트/임시 콘텐츠나 맵을 많이 만든 경우 프로세스가 느려질 수 있습니다.


## 게임 디폴트 맵 설정

게임을 패키징하기 전 먼저 패키징된 게임 시작시 로드할 **게임 디폴트 맵** 을 설정해야 합니다. 맵을 설정하지 않고 공백 프로젝트를 사용중이면 패키징된 게임 시작시 검정 화면만 보입니다. 일인칭 템플릿 또는 삼인칭 템플릿같은 템플릿 맵 중 하나를 사용했다면 시작 맵이 로드됩니다.

게임 디폴트 맵 설정을 위해서는 에디터의 메인 메뉴에서 **편집 > 프로젝트 세팅 > 맵 & 모드** 를 클릭합니다:

![](Project_Settings_MapsNModes.png)




## 패키지 만들기

프로젝트를 특정 플랫폼용 패키지로 만들려면, 에디터의 메인 메뉴에서 **파일 > 프로젝트 패키지 > [플랫폼 이름]** 을 선택합니다.

![](packaging_menu.png)

타겟 디렉토리를 선택하라는 대화창이 뜹니다. 패키징이 성공적으로 끝나면, 그 디렉토리에 패키징된 프로젝트가 들어갑니다.

타겟 디렉토리를 확인하고 나면 선택된 플랫폼용으로 프로젝트를 패키징하는 실제 프로세스가 시작됩니다. 패키징은 시간이 매우 오래 걸리는 작업이기 때문에, 이 프로세스는 백그라운드로 진행되며, 에디터 사용을 계속할 수 있습니다. 에디터 우하단의 상태 표시를 통해 진행상황을 알 수 있습니다:

![](progress.png)

상태 표시의 '취소' 버튼을 누르면 활성 패키징 프로세스를 취소시킬 수 있습니다. '로그 표시' 링크를 클릭하면 자세한 출력 로그 정보를 확인할 수도 있습니다. 출력 로그는 패키징 프로세스가 성공적으로 끝나지 않은 경우 무엇이 잘못되었는지 알아낼 때 좋습니다.

![](log.png)

익숙하지 않은 분들의 경우, 오류나 경고같은 중요 로그 메시지들은 일반 메시지 로그 창에 로그로 기록됩니다:

![](message_log.png)

[REGION:note]
이 창들 중 어느 것도 보이지 않으면, **창 > 개발자 툴 > 출력 로그 / 메시지 로그** 옵션으로 접근할 수 있습니다.
[/REGION]
 
## 패키징된 게임 실행하기

패키징을 했다면 출력 디렉토리를 선택했습니다. 패키징이 성공적으로 완료된 경우, 패키징된 게임은 플랫폼별 서브디렉토리에 들어갑니다. 예를 들어 TappyChicken/Final 을 선택한 경우, iOS 빌드는 
TappyChicken/Final/IOS 에 들어가게 되고, 안드로이드 빌드는 TappyChicken/Final/Android 에 들어가게 됩니다. 그 서브디렉토리에 가 보면 해당 플랫폼에 맞는 포맷으로 패키징된 게임을 볼 수 있을 것입니다.
안드로이드의 경우 .apk, .obb, .bat 파일이 보일 것입니다 (게임을 디바이스에 설치하려면 .bat 실행). IOS 의 경우, .ipa 파일이 보일 것입니다. iTunes 또는 Xcode 를 통해 설치 가능합니다.
생성되는 파일의 수와 종류는 타겟 플랫폼에 따라 매우 다릅니다. 다음 그림은 윈도우 프로젝트의 출력 예제입니다:

![](results.png)

[EXCERPT:RunCooked]
**패키징된 게임을 실행하려면:**

1. 아래 표를 참고하여 패키징된 게임의 실행파일을 찾습니다:

	| 환경설정      | EXE 이름                             | EXE 위치                                                        |
	| ------------- | ------------------------------------ | --------------------------------------------------------------- |
	| Development   | [ProjectName].exe                    | [PackageDirectory]\WindowsNoEditor |
	| Shipping      | [ProjectName]-Win32-Shipping.exe.exe | [PackageDirectory]\WindowsNoEditor |

1. 실행파일을 **더블클릭** 하면 게임이 실행됩니다.
[/EXCERPT:RunCooked]


## 배포

App Store 나 Google Play Store 에 iOS 또는 안드로이드 게임을 제출하려면, Distribution (배포) 모드로 게임 패키지를 만들어 줘야 합니다. 그 방법은 **패키징** 메뉴의 **패키징 세팅** 옵션에서
Distribution (배포) 체크박스를 체크합니다. 그러면 최종 패키지 사이닝이 올바르게 됩니다.

iOS 에서는 애플의 개발자 웹사이트에서 배포 Certificate 와 MobileProvision 을 만들어 줘야 합니다. Development Certificate 와 같은 방식으로 Certificate 를 설치한 다음, 
배포 Provision 이름에 Distro_ 접두사를 붙여줍니다 (즉 Distro_MyProject.mobileprovision 과 MyProject.mobileprovision 이 됩니다).

안드로이드에서는 .apk 사이닝을 할 키를 만들어준 다음, SigningConfig.xml 라는 파일을 포함해서 저희 빌드 툴에 약간의 정보를 줘야 합니다. 이 파일은 설치된 Engine 디렉토리에
(Engine/Build/Android/Java) 존재합니다. 이 파일을 편집하면, 모든 프로젝트에 적용됩니다. 하지만 이 파일을 프로젝트의 Build/Android 디렉토리(Java 말고)에 복사하면, 
 해당 프로젝트에만 사용됩니다. 키 생성법과 그 파일을 채우는 법은 파일 자체에서 찾아볼 수 있습니다.


## 고급 세팅

메인 메뉴에서 **파일 > 프로젝트 패키지 > 패키징 세팅...** 또는 **편집 > 프로젝트 세팅 > 패키징** 을 선택하면 패키징 기능에 대한 여러가지 고급 환경설정 옵션을 확인할 수 있습니다.

![](settings.png)

 현재 다음과 같은 옵션이 포함됩니다:

| 옵션 | 설명 |
| ------ | ----------- |
| Build Configuration | 빌드 환경설정 - 코드 기반 프로젝트를 컴파일할 빌드 환경설정입니다. 디버깅의 경우 Debug, 그 외 디버깅은 최소화시키되 퍼포먼스는 나은 개발용으로는 대부분 Development, 최종 출하 빌드의 경우 Shipping 을 선택합니다. |
| Staging Directory | 스테이징 디렉토리 - 패키징된 빌드가 들어가게 될 디렉토리입니다. 타겟 디렉토리 선택 창에서 다른 디렉토리를 선택하면 자동으로 업데이트됩니다. |
| Full Rebuild | 풀 빌드 - 코드를 전부 컴파일할지 입니다. 끄면 수정된 코드만 컴파일합니다. 패키징 프로세스 속도가 빨라질 수 있습니다. Shipping 빌드의 경우 누락되거나 오래된 것이 없는지 확실히 하기 위해 항상 풀 리빌드를 해야 합니다. 이 옵션은 기본으로 켜져 있습니다. |
| Use Pak File | Pak 파일 사용 - 프로젝트의 애셋들을 개별 파일로 놔둘지 하나의 패키지로 만들지 입니다. 켜면 모든 애셋은 하나의 .pak 파일에 들어가며, 끄면 모든 파일을 일일히 복사합니다. 프로젝트에 애셋 파일이 많은 경우, Pak 를 사용하면 그리 많은 파일을 다 전송할 필요가 없어 배포가 쉬워질 수 있습니다. 이 옵션은 기본으로 켜져 있습니다. |
| Generate Chunks | 청크 생성 - 스트리밍 인스톨에 사용할 수 있는 .pak 파일 청크를 생성할지 입니다. |
| Build Http Chunk Install Data | HTTP 청크 설치 데이터 빌드 - HTTP 청크 인스톨러용 데이터를 생성할지 입니다. 이를 통해 데이터를 웹서버에 호스팅하여 실행시간에 설치되도록 하는 것이 가능합니다. |
| Http Chunk Install Data Directory | HTTP 청크 설치 데이터 디렉토리 - 빌드된 데이터가 들어가는 디렉토리입니다. |
| Http Chunk Install Data Version | HTTP 청크 설치 데이터 버전 - HTTP 청크 설치 데이터의 버전명입니다. |
| Include Prerequisites | 사전 요구사항 포함 - 운영체제 컴포넌트 재배포판 등 패키징된 게임의 사전 요구사항을 포함시킬 것인지를 나타냅니다. |
[PUBLISH:Licensee]
| Directories to Always Cook | 항상 쿠킹할 디렉토리 - 항상 쿠킹을 해야하는 파일이 들어있는 디렉토리 목록입니다. 기본적으로 패키징 기능상 게임에서 참조된 모든 콘텐츠를 자동 감지하여 쿠킹하긴 합니다만, 커스텀 슬레이트 UI 에 쓰이는 텍스처와 같이 일부 필수 콘텐츠가 직접 참조되지 않은 경우가 있습니다. 그러한 콘텐츠가 들어있는 디렉토리는 이 목록에도 넣어줘야 패키지에 포함됩니다. |
[/PUBLISH:Licensee]



## 콘텐츠 쿠킹

개발자로서 새 게임이나 변경된 게임에 대한 반복작업을 할 때, 모든 것을 스테이징 디렉토리에 패키징하여 넣은 다음 거기서 그것을 실행하는 지루한 프로세스 전체를 항상 반복하고 싶지는 않을 것입니다. 그래서 **파일 > 콘텐츠 쿠킹 > [플랫폼 이름]** 을 선택하면 패키징 없이 특정 타겟 플랫폼용 콘텐츠만 쿠킹하는 것도 가능합니다.

이 기능은 프로젝트의 로컬 디벨로퍼 워크스페이스에 있는 콘텐츠를 업데이트할 뿐, 스테이징 디렉토리에 애셋을 복사하지는 않는다는 점 유념해 주시기 바랍니다. 로컬 디벨로퍼 워크스페이스에서 게임을 바로 실행하여 빠른 반복작업을 할 수 있습니다.
