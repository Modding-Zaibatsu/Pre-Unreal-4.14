INTSourceChangelist:2620109
Availability:Public
Title:2.カメラコントロールを行う入力設定
Crumbs:%ROOT%, Programming, Programming/Tutorials, Programming/Tutorials/PlayerCamera
Description:ポーンとカメラに適用する入力を設定
バージョン:4.9

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前の手順](Programming\Tutorials\PlayerCamera\1 "%Programming\Tutorials\PlayerCamera\1:title%")
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[](Programming\Tutorials\PlayerCamera)
	[/PARAM]
	[PARAM:next]
		[次の手順](Programming\Tutorials\PlayerCamera\3 "%Programming\Tutorials\PlayerCamera\3:title%")
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

1. カメラコントロールで行う制御対象を決定してからそれに基づいて入力を設定します。このプロジェクでトは、右マウスボタンを押した時に追跡距離を近づけて FOV をズームインするコントロールを作成します。これに加えてマウス操作による視野角の操作と、 WASD キー操作で **ポーン** の動作もコントロールしましょう。設定を行うために、 **アンリアルエンジン** エディタの **Edit（編集）** ドロップダウンメニューから **Project Settings（プロジェクト設定）** を開きます。

	[![](EditProjectSettings.png)](EditProjectSettings.png)

1. 以下のように1つの **Action Mapping** と4つの **Axis Mappings** の定義が必要です：
	| ----- | ----- | ----- |

	| Action Mapping | | |
	| ZoomIn | 右マウスボタン | |

	| ----- | ----- | ----- |
	| Axis Mapping | | |
	| MoveForward | W | 1.0 |
	|  | S | -1.0 |
	| MoveRight | A | -1.0 |
	|  | D | 1.0 |
	| CameraPitch | MouseY | 1.0 |
	| CameraYaw | MouseX | 1.0 |

	[![](InputConfig.png)](InputConfig.png)

	[REGION:note]入力マッピングが機能する仕組みについて理解を深めたいユーザーは、 [%Programming\Tutorials\PlayerInput:title%](Programming\Tutorials\PlayerInput) チュートリアルを参照してください。[/REGION]


----

入力を設定したので、これに対応するコードをいくつか記述します。次の作業を行うために **Visual Studio** へ戻ります。

[OBJECT:Section]
    [PARAMLITERAL:id]
    コード
    [/PARAMLITERAL]
    [PARAM:heading]
	    作業中のコード
    [/PARAM]
    [PARAM:content]
		**PawnWithCamera.h**
			// Copyright 1998-2016 Epic Games, Inc.All Rights Reserved.

			#pragma once

			#include "GameFramework/Pawn.h"
			#include "PawnWithCamera.generated.h"

			UCLASS()
			class HOWTO_PLAYERCAMERA_API APawnWithCamera : public APawn
			{
				GENERATED_BODY()

			public:
				// Sets default values for this pawn's properties（このポーンのプロパティの既定値を設定）
				APawnWithCamera();

				// Called when the game starts or when spawned（ゲーム開始またはスポーン時に呼ばれます）
				virtual void BeginPlay() override;
	// Called every frame（フレームごとに呼ばれます）

				virtual void Tick( float DeltaSeconds ) override;

				// Called to bind functionality to input（機能と入力をバインドするために呼ばれます）
				virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;
			protected:

				UPROPERTY(EditAnywhere)
				USpringArmComponent* OurCameraSpringArm;
				UCameraComponent* OurCamera;
			};

		**PawnWithCamera.cpp**
			// Copyright 1998-2016 Epic Games, Inc.All Rights Reserved.

			#include "HowTo_PlayerCamera.h"
			#include "PawnWithCamera.h"

			// Sets default values（デフォルト値を設定）
			APawnWithCamera::APawnWithCamera()
			{
 				// Set this pawn to call Tick() every frame.You can turn this off to improve performance if you don't need it.（このポーンがフレームごとにTick()を呼び出すように設定。必要なければパフォーマンスを向上させるためにオフにします）
				PrimaryActorTick.bCanEverTick = true;

				//Create our components（コンポーネントを作成）
				RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("RootComponent"));
				OurCameraSpringArm = CreateDefaultSubobject<USpringArmComponent>(TEXT("CameraSpringArm"));
				OurCameraSpringArm->AttachTo(RootComponent);
				OurCameraSpringArm->SetRelativeLocationAndRotation(FVector(0.0f, 0.0f, 50.0f), FRotator(-60.0f, 0.0f, 0.0f));
				OurCameraSpringArm->TargetArmLength = 400.f
				OurCameraSpringArm->bEnableCameraLag = true;
				OurCameraSprintArm->CameraLagSpeed = 3.0f
				OurCamera = CreateDefaultSubobject<UCameraComponent>(TEXT("GameCamera"));
				OurCamera->AttachTo(OurCameraSpringArm, USpringArmComponent::SocketName);

				//Take control of the default Player（デフォルトプレイヤーをコントロール）
				AutoPossessPlayer = EAutoReceiveInput::Player0;
			}

			// Called when the game starts or when spawned（ゲーム開始またはスポーン時に呼ばれます）
			void APawnWithCamera::BeginPlay()
			{
				Super::BeginPlay();
	}


			// Called every frame（フレームごとに呼ばれます）
			void APawnWithCamera::Tick( float DeltaTime )
			{
				Super::Tick( DeltaTime );

			}

			// Called to bind functionality to input（機能と入力をバインドするために呼ばれます）
			void APawnWithCamera::SetupPlayerInputComponent(class UInputComponent* InputComponent)
			{
				Super::SetupPlayerInputComponent(InputComponent);

			}


    [/PARAM]
[/OBJECT]

%Steps%
