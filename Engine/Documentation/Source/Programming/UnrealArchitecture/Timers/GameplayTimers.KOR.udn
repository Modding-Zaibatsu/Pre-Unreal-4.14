INTSourceChangelist:2714483
Availability:Public
Title: 게임플레이 타이머
Crumbs:%ROOT%, Programming, Programming/UnrealArchitecture/Reference, Programming/UnrealArchitecture/Reference/Functions
Description:설정된 주기마다 동작을 수행하는 타이머 구조체입니다.
Version: 4.9

[EXCERPT:Overview]
타이머를 통해 지정된 주기마다 한 번 또는 반복적으로 동작을 수행할 수 있습니다. 타이머 설정을 
통해 일정한 시간차를 두고 또는 일정 기간에 걸쳐 벌어지는 동작을 설정할 수 있습니다. 예를 들어, 
플레이어가 어떤 아이템을 습득하면 무적으로 만든 다음 10 초 후 되돌리도록 만들 수 있습니다. 또는, 
플레이어가 독가스로 가득찬 방에 있는 동안 매 초마다 대미지를 적용할 수도 있습니다. 이러한 효과 
모두 타이머를 통해 이뤄낼 수 있습니다.
[/EXCERPT:Overview]

## 타이머 관리

타이머는 `AActor` 범위 밖 글로벌 `FTimerManager` 로 관리되며, 어떤 델리게이트 유형도 할당시킬 
수 있습니다. `FTimerManager` 에는 타이머 관리에 사용할 수 있는 함수가 여럿 있습니다.
타이머를 처리하면서 시스템이 타이머를 조작해도 괜찮다면 타이머 델리게이트 안에서는 얼마든지 
이러한 함수를 사용해도 괜찮습니다. 즉 예를 들자면, 타이머 델리게이트 안에서 타이머를 설정하거나 
지워도 괜찮다는 뜻입니다.

`AActor::GetWorldTimerManager()` 함수는 현재 월드에 대한 타이머 매니저 인스턴스에 접근하는 데 
사용됩니다.

### 타이머 생성 및 지우기

`FTimerManager::SetTimer()` 는 일정 주기마다 주어진 네이티브 함수를 호출하는 타이머를 만드는 데 사용됩니다.

예:

	GetWorldTimerManager().SetTimer(this, &AMatineeActor::CheckPriorityRefresh, 1.0f, true);

[REGION:tip]
`SetTimer()` 로 기존 타이머 리셋도 가능합니다. 즉 이 델리게이트에 이미 타이머가 설정되어 있다면, 
현재 타이머를 새로운 파라미터로 업데이트시키고 경과된 시간은 0 으로 리셋시킵니다.
[/REGION]

`FTimerManager::ClearTimer()` 는 기존에 설정된 타이머를 지워 더이상 실행되지 않도록 합니다.

예:

	GetWorldTimerManager().ClearTimer(this, &AMatineeActor::CheckPriorityRefresh);

[REGION:tip]
`ClearTimer()` 로 타이머를 지우는 것은 0.f 이하의 값으로 `SetTimer()` 를 호출하는 것과 같습니다.
[/REGION]

### 타이머 일시정지

`FTimerManager::PauseTimer()` 는 기존에 설정된 타이머를 그 상태 그대로 일시정지시킵니다. 즉 
타이머 일시정지가 해제될 때까지 실행은 하지 않으면서 경과 / 나머지 시간은 그대로 있다는 뜻입니다.

`FTimerManager::UnPauseTimer()` 로 일시정지된 타이머를 다시 활성화시킵니다.

## 타이머 정보

`FTimermanager` 는 타이머 관리 이외에도 특정 타이머에 대한 정보, 이를테면 타이머 속도, 경과 시간, 
나머지 시간 등을 구하는 기능도 제공합니다.

### 타이머 활성 상태

`FTimerManager::IsTimerActive()` 는 지정된 타이머가 현재 일시정지가 아닌 활성 상태인지 알아보는 데 사용됩니다.

예:

	GetWorldTimerManager().IsTimerActive(this, &APlayerController::DelayedPrepareMapChange)

### 타이머 속도

`FTimerManager::GetTimerRate()` 는 지정된 타이머의 현재 속도(재활성화 주기)를 구합니다.

예:

	GetWorldTimerManager().GetTimerRate(this, &AUTWeapon::RefireCheckTimer)

### 경과 및 나머지 시간

`FTimermanager::GetTimerElapsed()`, `FTimerManager::GetTimerRemaining()` 는 지정된 타이머의 경과, 나머지 
시간을 각각 반환합니다.

예:

	GetWorldTimerManager().GetTimerElapsed(this, &AUTWeapon::RefireCheckTimer)

[REGION:note]
타이머의 경과 시간과 나머지 시간을 합하면 타이머 속도와 같습니다.
[/REGION]

## 타이머 함수 오버로드

각각의 타이머 조작 함수는 타이머 상호작용을 위해 세 가지 오버로드 방식이 존재합니다.

* 오브젝트와 함수를 받는 것입니다.
                
		GetWorldTimerManager().SetTimer( this, &UMyClass::DoSomethingWithNoParams, 5.f, FALSE );

	가장 간단한 형태로, 예전 시스템과 유사합니다. 이는 다음과 같습니다:
    
		GetWorldTimerManager().SetTimer( FTimerDelegate::CreateUObject(this, &UMyClass::DoSomethingWithNoParams), 5.f, FALSE );

	즉 약간은 중복되지만, 훨씬 깨끗하고 가장 자주 사용되는 형태일 것으로 예상됩니다.

* 동원할 수 있는 논-다이내믹 델리게이트 유형을 받는 것입니다. 문법적으로는 약간 지저분하지만 훨씬 유연합니다. 예:

		GetWorldTimerManager().SetTimer( FTimerDelegate::CreateUObject(this, &AMyClass::MyFunc), 5.0f, TRUE );
		GetWorldTimerManager().SetTimer( FTimerDelegate::CreateRaw(&MyStaticFunc, MyPassThruArg, MyOtherArg, YesOneMoreArg), 5.0f, TRUE );
                
		FTimerDelegate MyDel;
		Del.BindRaw(this, &AMyClass::MyFunc2);
		GetWorldTimerManager().SetTimer( MyDel, 5.0f, TRUE );

* (UFunction 같은) 다이내믹 델리게이트를 받는 것입니다.
                
		FTimerDynamicDelegate D;
		D.BindDynamic( this, &AMyClass::MyUFunction );
		GetWorldTimerManager().SetTimer( D, 5.0f, TRUE );

	이 델리게이트는 UFUNCTION 이벤트 메커니즘을 통해 호출되는데, 블루프린트에서처럼 네이티브가 아닌 오버라이드를 제대로 따른다는 뜻입니다.


## 알려진 문제
               
* 현재 이 코드는 여러 스레드를 지원하지 않습니다. 게임 스레드 이외에서 접근하려는 경우 어서트가 발생됩니다.
