INTSourceChangelist:2744667
Availability:Public
Title: 언리얼 오브젝트 처리
Crumbs: %ROOT%
Description:UObject 시스템의 기능에 대한 개요입니다.
Version: 4.9

[TOC (start:2 end:2)]

클래스, 프로퍼티, 함수에 적합한 매크로로 마킹해 주면 UClass, UProperty, UFunction 으로 변합니다. 그러면 언리얼 엔진이 접근할 수 있어, 
다수의 내부적인 처리 기능을 구현할 수 있습니다.

## 가비지 콜렉션

언리얼에서는 더이상 레퍼런싱되지 않거나 명시적으로 소멸 예약시킨 UObject 를 주기적으로 정리하는 가비지 콜렉션(garbage collection) 스키마를 사용합니다. 엔진에서는 레퍼런스 그래프를 만들어 
어느 오브젝트가 아직 사용중이고 어느 것이 고아가 되었는지를 알아냅니다. 이 그래프 루트에는 "루트 세트"라 지정된 오브젝트 세트가 있습니다. 어떤 오브젝트도 루트 세트에 추가시킬 수 있습니다. 가비지 콜렉션이 
발생하면, 엔진은 루트 세트부터 시작해서 알려진 UObject 레퍼런스 트리를 검색하여 레퍼런싱된 오브젝트를 전부 추적할 수 있습니다. 레퍼런싱되지 않은 오브젝트는 더이상 필요치 않은 오브젝트라 가정, 제거될 
것입니다.

그로 인해 한 가지 해 줘야 하는 작업이 있는데, 살려두고픈 오브젝트는 UPROPERTY 레퍼런스를 유지해 줘야 한다는 것입니다. 종종 액터는 이에 대해 예외인데, 
보통 루트 세트로 링크가 되돌아가는 오브젝트, 이를테면 액터가 속한 레벨에 의해 레퍼런싱되어 있기 때문입니다. 액터는 `Destroy()` 로 명시적 소멸 예약 가능합니다.

## 레퍼런스 자동 업데이트

가비지 콜렉션을 통해 오브젝트가 정리될 때, 그에 대한 UPROPERTY 레퍼런스는 NULL 로 자동 업데이트됩니다. 이는 허상 참조를 예방하여 문제의 소지를 줄인다는 장점이 있지만, 
가끔씩 레퍼런스가 가리키는 오브젝트 역시 명시적 소멸 예약된 경우 포인터가 예측과 달리 NULL 이 된다는 것을 뜻하기도 합니다. 즉 레퍼런스 해제 전 
반드시 테스트하세요.

여기서 한 가지 중요한 점은, 이 기능은 UPROPERTY 로 마킹된 오브젝트 레퍼런스에만 적용된다는 점입니다. 원래 포인터에 저장된 오브젝트 레퍼런스는 언리얼이 알지 못하기 때문에, 자동으로 NULL 되거나 
가비지 콜렉션이 방지되지 않습니다. 그렇다고 모든 UObject* 변수가 UProperty 가 되어야 한다는 뜻은 아닙니다. UProperty 가 아닌 오브젝트 포인터가 필요한 경우, TWeakObjectPtr<> 사용을 고려해 보세요. 
약 포인터로, 가비지 콜렉션을 방지하지는 않지만, 접근 전 질의를 통해 유효성 검사가 가능합니다.

## Serialization

UObject 가 Serialize 될 때, 모든 UProperty 값은 명시적으로 "transient" (트랜션트) 마킹되지 않은 이상 자동으로 읽고 쓰기 가능합니다. 예를 들어 레벨에 AEnemy 인스턴스를 배치하고서, 
그 Health 를 500 으로 설정하고 저장을 하면, UClass 정의 이외의 코드를 한 줄도 작성하지 않고도 다시 로드할 수 있습니다.

UProperty 가 추가 또는 제거될 때, 기존 콘텐츠 로드는 매끄럽게 처리됩니다. 새 프로퍼티는 새 CDO 에서 기본값을 복사해 옵니다. 제거된 프로퍼티는 말없이 무시됩니다.

필요에 따라 커스텀 Serialize 및 다른 버전 코드를 작성하는 것도 가능은 하지만, 실제로는 흔한 일은 아닙니다.

## 프로퍼티 값 업데이트하기

UClass 의 CDO 가 변경되면, 엔진은 그 클래스의 모든 인스턴스 로드시 알아서 변경사항을 적용 시도합니다. 주어진 오브젝트 인스턴스에 대해, 업데이트된 변수가 
기존의 디폴트에서 변경되지 않았다면, 새로운 디폴트 오브젝트로 업데이트됩니다. 변수가 어떻게든 변경되었다면, 그 변수가 의도적으로 설정되었으며, 그 변경사항은 
되돌리지 않을 것이라 가정합니다.

예를 들어 AEnemy 오브젝트를 여럿 배치했고, AEnemy 생성자의 Health 기본값을 100 으로 설정한 레벨을 저장했다 칩시다. 여기서 또, 
Enemy_3 가 특별히 쎈 놈이라 그 Health 를 500 으로 설정했다 가정합시다.

이제 마음이 바뀌어 Health 디폴트 값을 150 으로 올렸다고 가정합니다. 다음 번 레벨을 로드할 때, 언리얼은 CDO 를 변경했다고 알아채고, Enemy_3 를 제외한 모든 AEnemy 인스턴스의 Health 를 150 으로 업데이트합니다.
Enemy_3 의 Health 는 500 으로 남아있습니다.
 
## 자동 프로퍼티 초기화

UObject 는 생성자 호출 전 초기화시 자동으로 0 으로 채워집니다. 클래스, UProperty, 네이티브 멤버 모두에게 전체적으로 벌어지는 일입니다. 그 이후 멤버는 클래스 생성자의 커스텀 값으로 
초기화 가능합니다.

## 에디터 인테그레이션

UObject 와 UProperty 는 에디터에 인식되며, 에디터는 별도의 코드를 작성할 필요 없이 이 값을 자동으로 노출시킬 수 있습니다. 이는 선택적으로 블루프린트 비주얼 스크립팅 시스템으로의 
인테그레이션이 가능합니다. 변수와 함수의 노출 및 접근 여부를 제어할 수 있는 옵션이 많이 있습니다.

## 실행시간시 유형 정보

UObject 는 항상 자신이 무슨 UClass 인지 알고 있으며, 유형 관련 결정을 실행시간에 내릴 수 있습니다.

네이티브 코드에서, 모든 UObject 클래스에는 그 부모 클래스로 설정된 커스텀 "Super" typedef 가 있어, 덮어쓰기 행위에 대한 제어가 쉽게 가능합니다. 예를 들어:


	class AEnemy : public ACharacter
	{
		virtual void Speak()
		{
			Say("Time to fight!");
		}
	};

	class AMegaBoss : public AEnemy
	{
		virtual void Speak()
		{
			Say("Powering up! ");
			Super::Speak();
		}
	};

보시듯이, Speak() 를 호출하면 MegaBoss 가 "Powering up! Time to fight!" 라 말하게 됩니다.

또한, 템플릿 Cast 함수를 사용해서 베이스 클래스에서의 오브젝트를 좀더 파생된 클래스로 안전하게 형변환하거나, IsA() 를 사용해서 오브젝트가 특정 클래스의 것인지 질의할 수 있습니다. 간단한 예로:

	class ALegendaryWeapon : public AWeapon
	{
		void SlayMegaBoss()
		{
			TArray<AEnemy> EnemyList = GetEnemyListFromSomewhere();

			// The legendary weapon is only effective against the MegaBoss
			for (AEnemy Enemy : EnemyList)
			{
				AMegaBoss* MegaBoss = Cast<AMegaBoss>(Enemy);
				if (MegaBoss)
				{
					Incinerate(MegaBoss);
				}
			}
		}
	};

여기서 Cast<> 를 사용하여 AEnemy 를 AMegaBoss 로 형변환 시도해 봤습니다. 문제의 오브젝트가 실제로 AMegaBoss (또는 그 자손 클래스)가 아닌 경우, Cast 는 NULL 을 반환하므로 적절한 대응이 가능합니다.
이 경우, 전설의 무기가 통하지 않습니다.

## 네트워크 리플리케이션

UObject 시스템에는 네트워크 통신과 멀티플레이어 게임을 원활히 하기 위한 탄탄한 함수성 세트가 포함되어 있습니다.

UProperty 에는 태그를 붙여 네트워크 플레이 도중 데이터의 리플리케이트 여부를 엔진에게 알릴 수 있습니다. 여기에 흔히 쓰이는 모델은, 서버에서 변수가 변경되면, 엔진에서 그 변화를 감지하여 
모든 클라이언트에 신뢰성있게 전송하는 것입니다. 클라이언트에서는 리플리케이션을 통해 변수가 변할 때, 옵션을 통해 콜백 함수를 받을 수 있습니다.

UFunction 역시도 태그를 붙여 원격 머신에서 실행시킬 수 있습니다. 예를 들어 "server" 함수는 클라이언트 머신에서 호출시 실제로는 서버 머신에서 해당 액터의 서버 버전이 실행되도록 합니다.
반면 "client" 함수는, 서버에서 호출될 수는 있지만 해당 액터의 소유중인 클라이언트 버전이 실행됩니다.
