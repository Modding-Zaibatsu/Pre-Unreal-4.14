INTSourceChangelist:2714483
Availability:NoPublish
Title:UPrimitiveComponent RTTs
Crumbs:


<!-- 
 Indicates if we'd like to create physics state all the time (for collision and simulation). 
 If you set this to false, it still will create physics state if collision or simulation activated. 
 This can help performance if you'd like to avoid overhead of creating physics state when triggers 
-->
[EXCERPT:bAlwaysCreatePhysicsState]

끄면 이 컴포넌트의 충돌이나 시뮬레이션 시작시 물리 상태(Physics State) 생성을 위한 실행시간 처리 부하가 걸립니다.
[VAR:ToolTipFullLink]
Engine/Physics/Collision#properties
[/VAR]

[/EXCERPT:bAlwaysCreatePhysicsState]


<!-- If true, this component will generate overlap events when it is overlapping other components (e.g. ReceiveBeginOverlap, NotifyEncroachedBy) -->
[EXCERPT:bGenerateOverlapEvents]

두 오브젝트 모두에 이 플래그가 True 로 설정되어 있으면 오버랩으로 등록됩니다. 이런 식으로 하나의 오브젝트에서 플래그를 끄면 모든 오버랩 이벤트에서 제외시킬 수 있습니다.
오버랩 이벤트가 발생하면, 그 작동방식을 정의하는 데 사용할 블루프린트나 코드에 대한 이벤트를 생성합니다. Multi Body Overlap 옵션이 꺼진 상태라면, 몇 개의 피직스 바디가 겹쳐도 오버랩 이벤트는 하나만 생성됩니다.
겹치는 오브젝트의 콜리전 프로파일은 오버랩이 Hit Event 를 생성할지 Overlap Event 를 생성할지 결정합니다.
[VAR:ToolTipFullLink]
Engine/Physics/Collision#properties
[/VAR]

[/EXCERPT:bGenerateOverlapEvents]


<!-- If true, this component will generate individual overlaps for each overlapping physics body if it is a multi-body component. When false, this component will
generate only one overlap, regardless of how many physics bodies it has and how many of them are overlapping another component/body. This flag has no
influence on single body components. -->
[EXCERPT:bMultiBodyOverlap]

True 면 이 컴포넌트에 들어있는 모든 피직스 바디에 대해 오버랩 이벤트를 생성할 수 있도록 합니다.

끄면, 이 컴포넌트에 들어있는 모든 피직스 바디에 대해 하나의 오버랩 이벤트만 생성됩니다.
[VAR:ToolTipFullLink]
Engine/Physics/Collision#properties
[/VAR]

[/EXCERPT:bMultiBodyOverlap]


<!-- If true, this component will look for collisions on both physic scenes during movement -->
[EXCERPT:bCheckAsyncSceneOnMove]

이 옵션은 어디에나 나타나지만 무브먼트 컴포넌트에 연관된 캡슐, 이를테면 캐릭터 블루프린트 생성시 딸려오는 것에만 작동합니다.

이 한 가지 경우 말고, 피직스 바디는 두 씬 중 하나에서만 존재 및 상호작용 가능합니다.
[VAR:ToolTipFullLink]
Engine/Physics/Collision#properties
[/VAR]

[/EXCERPT:bCheckAsyncSceneOnMove]


<!-- If true, component sweeps with this component should trace against complex collision during movement. -->
[EXCERPT:bTraceComplexOnMove]

이 옵션은 어디에나 나타나지만 무브먼트 컴포넌트에 연관된 캡슐, 이를테면 캐릭터 블루프린트 생성시 딸려오는 것에만 작동합니다.

복합 콜리전은 면 단위 콜리전으로, 캐릭터가 오목한 모양이나 좀 더 복잡한 액터와 상호작용할 수 있습니다. 그러나 계산 비용이 더 들기 때문에 필요한 경우에만 사용해야 합니다.
[VAR:ToolTipFullLink]
Engine/Physics/Collision#properties
[/VAR]

[/EXCERPT:bTraceComplexOnMove]


<!-- If true, component sweeps will return the material in their hit-info. -->
[EXCERPT:bReturnMaterialOnMove]

캐릭터나 폰과 함께 딸려오는 것처럼, 무브먼트 컴포넌트에 대한 콜리전 오브젝트에 사용할 때만 유용합니다.

켜면, 히트 결과에 Phys Material 을 반환합니다.
[VAR:ToolTipFullLink]
Engine/Physics/Collision#properties
[/VAR]

![](PhAT_hitReturn.png)
[/EXCERPT:bReturnMaterialOnMove]


<!-- Will ignore radial impulses applied to this component. -->
[EXCERPT:bIgnoreRadialImpulse]

[/EXCERPT:bIgnoreRadialImpulse]


<!-- Will ignore radial forces applied to this component. -->
[EXCERPT:bIgnoreRadialForce]

[/EXCERPT:bIgnoreRadialForce]


<!-- can this component potentially influence navigation -->
[EXCERPT:bCanEverAffectNavigation]

이 컴포넌트가 내비게이션에 영향을 끼칠 수 있는지를 정의합니다. 끄면, 이 컴포넌트는 내비게이션에 영향을 끼치지 못합니다.
[VAR:ToolTipFullLink]
Engine/Physics/PhysicsBodies#collision
[/VAR]
[/EXCERPT:bCanEverAffectNavigation]






<!-- True if the primitive should be rendered using ViewOwnerDepthPriorityGroup if viewed by its owner. -->
[EXCERPT:bUseViewOwnerDepthPriorityGroup]
[/EXCERPT:bUseViewOwnerDepthPriorityGroup]


<!-- Whether to accept cull distance volumes to modify cached cull distance. -->
[EXCERPT:bAllowCullDistanceVolume]
[/EXCERPT:bAllowCullDistanceVolume]


<!-- true if the primitive has motion blur velocity meshes -->
[EXCERPT:bHasMotionBlurVelocityMeshes]
[/EXCERPT:bHasMotionBlurVelocityMeshes]

	
<!-- If true, this component will be rendered in the CustomDepth pass (usually used for outlines) -->
[EXCERPT:bRenderCustomDepth]
[/EXCERPT:bRenderCustomDepth]

<!-- Optionally write this 0-255 value to the stencil buffer in CustomDepth pass (Requires project setting or r.CustomDepth == 3)  -->
[EXCERPT:CustomDepthStencilValue]
[/EXCERPT:CustomDepthStencilValue]


<!-- If true, this component will be rendered in the main pass (z prepass, basepass, transparency) -->
[EXCERPT:bRenderInMainPass]
[/EXCERPT:bRenderInMainPass]

	
<!-- Whether the primitive receives decals. -->
[EXCERPT:bReceivesDecals]
[/EXCERPT:bReceivesDecals]


<!-- If this is True, this component won't be visible when the view actor is the component's owner, directly or indirectly. -->
[EXCERPT:bOwnerNoSee]
[/EXCERPT:bOwnerNoSee]


<!-- If this is True, this component will only be visible when the view actor is the component's owner, directly or indirectly. -->
[EXCERPT:bOnlyOwnerSee]
[/EXCERPT:bOnlyOwnerSee]


<!-- 
 Whether to render the primitive in the depth only pass.  
 Setting this to false will cause artifacts with dominant light shadows and potentially large performance loss,
 So it should be true on all lit objects, setting it to false is mostly only useful for debugging.
-->
[EXCERPT:bUseAsOccluder]
[/EXCERPT:bUseAsOccluder]


<!-- If this is True, this component can be selected in the editor. -->
[EXCERPT:bSelectable]
[/EXCERPT:bSelectable]


<!-- If true, forces mips for textures used by this component to be resident when this component's level is loaded. -->
[EXCERPT:bForceMipStreaming]
[/EXCERPT:bForceMipStreaming]


<!-- If true a hit-proxy will be generated for each instance of instanced static meshes -->
[EXCERPT:bHasPerInstanceHitProxies]
[/EXCERPT:bHasPerInstanceHitProxies]


	
<!-- Controls whether the primitive component should cast a shadow or not. -->
[EXCERPT:CastShadow]
[/EXCERPT:CastShadow]


<!-- Controls whether the primitive should cast shadows in the case of non precomputed shadowing.  This flag is only used if CastShadow is true. -->
[EXCERPT:bCastDynamicShadow]
[/EXCERPT:bCastDynamicShadow]


<!-- Whether the object should cast a static shadow from shadow casting lights.  This flag is only used if CastShadow is true. -->
[EXCERPT:bCastStaticShadow]
[/EXCERPT:bCastStaticShadow]


<!-- 
 Whether the object should cast a volumetric translucent shadow.
 Volumetric translucent shadows are useful for primitives with smoothly changing opacity like particles representing a volume, 
 But have artifacts when used on highly opaque surfaces.
-->
[EXCERPT:bCastVolumetricTranslucentShadow]
[/EXCERPT:bCastVolumetricTranslucentShadow]


<!-- 
 Whether this component should create a per-object shadow that gives higher effective shadow resolution. 
 Useful for cinematic character shadowing.
-->
[EXCERPT:bCastInsetShadow]
[/EXCERPT:bCastInsetShadow]


<!-- 
	If true, the primitive will cast shadows even if bHidden is true.
	Controls whether the primitive should cast shadows when hidden.
	This flag is only used if CastShadow is true.
-->
[EXCERPT:bCastHiddenShadow]
[/EXCERPT:bCastHiddenShadow]


<!-- Whether this primitive should cast dynamic shadows as if it were a two sided material. -->
[EXCERPT:bCastShadowAsTwoSided]
[/EXCERPT:bCastShadowAsTwoSided]


<!-- 
 Whether to light this primitive as if it were static, including generating lightmaps.  
 This is useful for moving meshes that don't change significantly.
-->
[EXCERPT:bLightAsIfStatic]
[/EXCERPT:bLightAsIfStatic]


<!-- 
 Whether to light this component and any attachments as a group.  This only has effect on the root component of an attachment tree.
 When enabled, attached component shadowing settings like bCastInsetShadow, bCastVolumetricTranslucentShadow, etc, will be ignored.
 This is useful for improving performance when multiple movable components are attached together.
-->
[EXCERPT:bLightAttachmentsAsGroup]
[/EXCERPT:bLightAttachmentsAsGroup]


[EXCERPT:bHasCachedStaticLighting]
[/EXCERPT:bHasCachedStaticLighting]


<!-- If true, asynchronous static build lighting will be enqueued to be applied to this -->
[EXCERPT:bStaticLightingBuildEnqueued]
[/EXCERPT:bStaticLightingBuildEnqueued]

	

	



	
<!-- If this is True, this component must always be loaded on clients, even if Hidden and CollisionEnabled is NoCollision. -->
[EXCERPT:AlwaysLoadOnClient]
[/EXCERPT:AlwaysLoadOnClient]


<!-- If this is True, this component must always be loaded on servers, even if Hidden and CollisionEnabled is NoCollision -->
[EXCERPT:AlwaysLoadOnServer]
[/EXCERPT:AlwaysLoadOnServer]


<!-- Determines whether or not we allow shadowing fading.  Some objects (especially in cinematics) having the shadow fade/pop out looks really bad. -->
[EXCERPT:bAllowShadowFade]
[/EXCERPT:bAllowShadowFade]


<!-- Composite the drawing of this component onto the scene after post processing (only applies to editor drawing) -->
[EXCERPT:bUseEditorCompositing]
[/EXCERPT:bUseEditorCompositing]

<!--
 Translucent objects with a lower sort priority draw behind objects with a higher priority.
 Translucent objects with the same priority are rendered from back-to-front based on their bounds origin.

 Ignored if the object is not translucent.  The default priority is zero.
 Warning: This should never be set to a non-default value unless you know what you are doing, as it will prevent the renderer from sorting correctly.  
 It is especially problematic on dynamic gameplay effects.
-->
[EXCERPT:TranslucencySortPriority]
[/EXCERPT:TranslucencySortPriority]


<!-- Used for precomputed visibility -->
[EXCERPT:VisibilityId]
[/EXCERPT:VisibilityId]


<!-- Used by the renderer, to identify a component across re-registers. -->
[EXCERPT:ComponentId]
[/EXCERPT:ComponentId]



	
<!-- Physics scene information for this component, holds a single rigid body with multiple shapes. -->
[EXCERPT:BodyInstance]
[/EXCERPT:BodyInstance]



