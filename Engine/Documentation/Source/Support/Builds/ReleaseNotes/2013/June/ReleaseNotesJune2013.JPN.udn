INTSourceChangelist:2615137
Title:2013年6月リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Template:ReleaseNotes.html

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **Label** | QA_APPROVED_UE4_BUILD_2013_06 |
| **Changelist #** | 1687979 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2010 version 10.0.40219.1 SP1 Rel |
| **DIRECTX** | 2010年6月 |
[/REGION]

## 重要情報

 * 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * UE4 パラレル レンダリング ロードマップ:  [Parallel Rendering Plans for UE4](https://udn.unrealengine.com/questions/168240/parallel-rendering-plans-for-ue4.html)


##主な新機能

####ブループリント
* **新たなユーザー定義の列挙型アセット**
	* 現在のブループリントで使用しているユーザー定義の列挙型変数がすべて含めた「ユーザー定義の列挙型変数」カテゴリを新しく MyBlueprint ウィジェットに追加しました。  
		![](UDEnumb.png)(h:360)  ![](UDEnuma.png)(h:360)  

* **ブループリントに新しい物理ジョイントとコンストレイントが登場**
	* ブループリントに物理ジョイント (コンストレイント) を追加できるようにしました！  
		![](constraints1.png)(w:480)
	* ブループリント エディタの [Components] メニューの [Details (詳細)] パネルにあるコンポーネント変数で「ジョイント」や「コンストレイント」を作成する新規機能を用いて、様々な種類のコンポネントを既存のコンポネントへ追加することができます。  
		![](constraints2.png)


####エディタ ツール
* **プレースメント ブラウザ**
	* 新しく結合したブラウザでは、自分のレベルに配置可能なコンテンツのみ見ることができます。	
		![](PlacementBrowser.png)(w:640)
	* コントロール スキームが拡張され、よりスムーズで、さらに発見しやすいアセット配置が可能になります。
	* 配置したいコンテンツをクリックし、ビューポートの配置したい場所をクリック、あるいは [CTRL] を押しながら素早く印を付けて配置します。

* **追加されたアセット、アクタ ピッカー**
	* 使用可能なアセットタイプが色分けされたウィジェットが新しく追加されました。サムネイルをダブルクリックすると、表示中のアセットのエディタが開きます。  
		![](widget1.png)
		* すべてのアセットにサムネイルがデフォルト表示されるわけではありませんが、新しい UPROPERTY metadata tag ShowThumbnail="true" を使って有効化することができます。
	* 今回のピッカーは、アセットを [コンテンツ ブラウザ] からドラッグ＆ドロップし、さらに [コンテンツ ブラウザ] とウィジェットの間でもコピー＆ペーストすることができます。  
		![](widget3.png)
	* ピッカーにより、矢印とメニュー下部にあるオプションを使った [コンテンツ ブラウザ] メニューへのアクセスが可能になります。  
		![](widget5.png)
	* 「Browse」がアクセスしやすいようにメイン ウィジェットにレプリケートされます。
	*  コンボボタンの矢印をクリックすると、シーン アウトライナーを表示して、アクタ プロパティの特殊化も対応します。メニューの「表示」で、問題となっているアクタ上でビューポイントをフォーカスします。

* **FBX 再インポートの改善**
	* スタティックメッシュ、スケルタルメッシュ、アニメーション シーケンス用に UAssetImportData の派生クラスを作成する FBX コードをリファクタリングしました！	
		![](FBXimport.png)(w:480)
	* FBX からアセットをインポートする場合、作成時の設定インポート オプションがインポート時に保存され、再インポートされるたび再利用されます。
	* これらのオプションは、[Asset Import Data] と呼ばれるプロパティのアセットのプロパティで編集可能です。

#### ゲームプレイとフレームワーク
* **C++ クラス ウィザード**
	* ポーン、キャラクター、PlayerController、その他のゲーム機能を自分のゲームに新規導入する親クラスを追加する機能です。  
		![](NCW.png)(w:640)
	* **[File (ファイル)] から [Add Code to Project... (プロジェクトへコードを追加)]** で呼び出します。
		* 生成されたコードの著作権行を ini ファイルで設定できるようにしました。


####ペルソナ ツールとアニメーション ツール
* **ペルソナで AnimSequences を AnimMontages と AnimComposites に変換する**
	* ペルソナで AnimSequences を使用してAnimComposites と AnimMontages を作成するために、コンテキスト メニュー オプションを用意しました。  
		![](Anim.png)(convert:false)
	* [コンテンツ ブラウザ] の AnimSequence を選んで右クリックするだけで、ユーザはメニューからマウスをクリックすれば AnimMontage と AnimCompositehe の両方が作成できるようにしました !


## 新機能の追加

####ブループリント
* プライベートな UPROPERTY での BlueprintReadWrite あるいは BlueprintReadOnly の使用が違法となりました。公開または保護の対応をお願いします。


#### サウンド
* Reverb 設定を新規 Reverb Effect アセット タイプ経由で公開しました。


####コア
* DisplayName と FriendlyName が指定子キーワードになり、 meta=(...) ブロック内で指定する必要がなくなりました。
* UENUM のみを含むヘッダーのコンパイルエラーを解消しました。
* 空の文字列の場合、FFileHelper::SaveStringToFile でゼロバイトファイルを書けるようにしました。
* DEFINE_LOG_CATEGORY_STATIC をヘッダーで使用しないことになりました。
	* 逆に、DECLARE_LOG_CATEGORY_EXTERN をヘッダーで指定し、対応する DEFINE_LOG_CATEGORY は関連する.cpp ファイルに置きます。
* DepotName アクセスを CrashDebugHelper に追加しました。 
	* ユーザーにデポ名を指定させ、どのブランチからもミニダンプのデバグが出来ようにしました。
* 同期を行わないユーザーがプロジェクト生成中になくしてしまったドキュメントフォルダーに対し適切な処理を行うようにしました。 



####エディタ ツール
* **ランドスケープ：**
	* TerrainLayerSwitch、TerrainLayerBlend、LandscapeLayerBlend に Material Attributes タイプへのサポートを追加しました。
	* プリミティブ スタッツ ウィンドウにランドスケープを追加しました。
* 直前に読み込んだプロジェクトの読み込みを切り替えるための、ゲームに依存しない設定を追加しました。この動作はロケットを使用しないユーザーも利用可能となりましたが、デフォルトでは無効になっています。
* HighResShot が OutputLog 経由でエディタ ビューポートで機能するようにしました。 
	* 「HighResShot 1920x1080 」フォームへ入力すると、各レベルのエディタビューポートのスクリーンショットが 1920 X 1080 ピクセルで作成されます。 
	* 「HighResShot 2 」フォームへ入力すると、ビューポート解像度が 2 倍のショットが作成されます。
	* プロジェクトで生成された UE4 ソリューションファイルに対してプロジェクトの「ビルドと実行」を行います。
	* コンパイルおよび実行できるものはすべて新規の「Build and Run」フォルダのソリューションの上部にあります。 
* (ゲームに依存しない) UE4Editor と UE4Game のターゲットが新しく追加されました。サンプルをロードしたいだけの場合に適しています。 
* 追加されたインスタント サブメニュー： 
	* カーソルを重ねた瞬間に開くようにサブメニューが変更されました！ 
	* 項目自体の選択に失敗しても、選択の動作方向がサブメニューに向かっている限り、サブメニューが消えないようにしました。 
	* サブメニューを開いた時の応答性も改善しました。 
* **スレート & UI:**
	* 編集可能なテキストの look & feel (ルック・アンド・フィール) を改善しました。
	* (UI 上にマウスを当てた時の引きつりを取り除くために) スレート ツールチップ キャッシュを追加しました。 
* コンテンツ ブラウザに新規メニューオプションが追加され、AnimSequences から AnimComposites と AnimMontages を作成できるようにしました。
* タブを閉じると、閉じたタブの左側のタブにフォーカスが移ります。


#### ゲームプレイとフレームワーク
* 既存のプロジェクトへのソースコードファイル追加ウィザードが追加されました。
	* [File (ファイル)] から [Add Code to Project... (プロジェクトへコードを追加)] で呼び出します。
	* 生成されたコードの著作権行を ini ファイルで設定できるようにしました。
* 新たに反転システムを PlayerInput に追加しました。 
	* InvertAxis <AxisName> を呼び出して、定義した Axis に対する全ての入力の反転 (古い InvertMouse を InvertAxis Lookup に置き換える) を可能にしました。
	* 特定の Axis キーを InvertAxisKey で反転することも可能です (joystick ではなく mouse lookup だけを反転させたい場合は InvertAxisKey MouseY を使用できます)。
* 新たにポーンを追加しました。SpectatorPawn.PlayerController のスペクテーターステートは SpectatorPawn を使用します。 
	* DebugCameraController、LogVisualizer、他いくつかのゲームのコントローラーを修正し、新たなスペクテータモデルを使用できるようにしました。
* 剛健なレプリケーションをコンポーネントに追加しました。StaticMeshReplicatedComponent と SkeletalMeshReplicatedComponent
* フィルタリングを早めるリキャスト オフメッシュ接続に定義済みフラグをオプションで焼き付ける機能を追加しました。
	* RecastNavMesh で距離をパスする際にポリゴンを検索する方法を追加しました。 
	* RecastNavMesh へのクエリに使用する指定フィルタを実装しました。
* (UNavigationSystem から派生した) カスタムナビゲーション システムクラスを定義するゲーム専用オプションを実装しました。
* MatineeActor: bHidePlayer, bDisableMovementInput, bDisableLookatInput.
* Navmesh 生成を task graph から FAsynTask に切り替えました (大きな navmesh のビルド時にゲームスレッドがブロックされなくなります)。


####オンライン
* MCP サービス経由でユーザー別クラウドストレージを実装しました。
	* ユーザーが利用できるファイルのリストを列挙しました。
	* 個別にファイルをダウンロードできます。
	* ハッシュが一致しない場合のみ、ファイルをディスクにキャッシュしダウンロードを行います。


####プラットフォーム
* (SlateViewer などの) プログラムへのサポートを IOS に対して追加 / 改善しました。


#### レンダリング
* dx11 の柔軟性のある深度ステンシルの読み取りおよび書き込みアクセス (ローレベルレンダリング機能) をマージしました 。 
* Speedtree を統合しました。
* キューブマップ シーンキャプチャ アクタを追加しました。
* キューブレンダー ターゲットが HDR 形式でエクスポートできるようにしました。
* **マテリアル & テクスチャ:**
	* MaterialParameterCollections: 
	* パラメータのコレクションとそれらのデフォルト値を定義するアセットです。  
	* CollectonParameter ノードでマテリアルはパラメータを参照できます。 
	* その後ブループリントはこれらのパラメータに対してランタイム時に効率的に値を設定することができ、すべてのマテリアルに新しい値が付きます。
	* グローバルマテリアル パラメータ、レベルごとのパラメータ、またはエディタにおいてマテリアルの大幅な変更に便利なプレビューの実行に使用することができます。 
	* コレクションからパラメータを削除すると一度に多くのブループリントとマテリアルが破損することがあります。ご注意ください。
* **ライティング＆シャドウ：**
	* ライトマス ソルバの品質が向上しました。
	* トライアングルの法線にうまく一致しない滑らかな法線を持つジオメトリの非常に汚いライティングやビルド回数の少なさという問題点を解決しました。
	* きれいな建築ライティングに最適な、放射照度キャッシュに最短距離のヒューリスティックを使用することにしました。また、アーチファクトの原因となる無効な最小半径もクリーンアップしました。
	* ファイナル ギャザーの光線で見られる直接ライティングの計算に、光子 (photon) の距離ではなくサイトの明示的なサンプルを使うようにしました。これにより、シャドー変遷付近の最初のバウンスライトの漏れを減らし、精度を高めます。
	* シングルマッピングの放射照度キャッシュの入力と補正をマルチスレッド処理にしました。スレッド数が十分であれば、大きなマップ 1 つをビルドする時間が大幅に削減されます。 
		* 512 のライトマップ 1 つのビルド速度が 5 倍になりました。
	* 低品質の HDR 指向性ライトマップを追加しました。シンプルライトマップを削除しました。
	* 設定が 1 の時にコンパイルされたシェーダーに対してデバッグ情報をダンプする r.DumpShaderDebugInfo を追加しました。 
	* D3D11とは、D3D アセンブリをコンパイルする fxc を呼び出すバッチファイル、インストールされている場合は AMD GPUShaderAnalyzer を呼び出すバッチファイルであるソースのプリプロセスバージョンであることを表します。


####アニメーション / ペルソナ
* **ペルソナ：**
	* ユーザーがアニメーションの付加的な基本ポーズを見ることができるようにペルソナのビューポートの [Show (表示)] メニューに [Additive Base (加算ベース)] オプションを追加しました。
	* モーフ ターゲットをコンテクストメニューから削除しました。



##更新ノート

####ブループリント
* self からワールド コンテクストを提供できないブループリントクラスに UCLASS メタデータ内で ShowHiddenSelfPins としてフラグを付けられるようにしました。  
	* これにより、ブループリントのクラスがフラグの付いているクラスから派生しているブループリントグラフに配置されたノード上で WorldContextObject ピンが表示されます。  
	* 現在そのようなフラグが付いている唯一のエンジンクラスは AnimNotify で、AnimNotify ブループリントはコンポーネントを WorldContextObject 入力に接続する必要があります。
* ブループリントの SkeletonGeneratedClasses を暫定としました。  
	* ユーザーは何もアクションをとる必要はありませんが、ブループリントシステムを修正した場合、スケルトンクラスに何もリファレンスを保存しないようにしてください。  
	* シリアル化された全てのリファレンスを GeneratedClass へポイントしてください。保存中に消えてしまいます。


#### サウンド
* 名前が SoundMix に変更された SoundModes に Base SoundMix を 1 つ設定し、複数の SoundMix モディファイアーをプッシュするオプションを付けました。
	* コンテクストブラウザで SoundMixes として表示するためには、SoundModes は完全にロードされる前に全て再保存する必要があります。


####コア
* 保存した configs がソースファイル階層からのまとまった入力に一致する入力を含まないように UE4 のコンフィギュレーション システムを更新しました。
* 新たにプロジェクトファイルが作成されると、既存の Visual Studio のコマンドラインは保存されません。
	* UE4 がこのバージョンの場合はプロジェクトを再生成する前にコマンドラインを必ず保存してください。
	* 理由は、生成された .vcxproj ファイルの保存先フォルダが変更されたためです。
* メタデータ指定子の meta(...) 記法には対応しなくなりました。meta=(...) は限定して使用してください。
* プロパティの最後についてるコメント (例: "float Property; // My float property") はツールチップ メタデータ用には取得されず、UPROPERTY 宣言の前のコメントに変更されます。
* 複数のメタデータキーが異なる値を持つことでエラーが発生するようになりました。変更前は、後ろの値が前の値をオーバーライトしていました。
* マップ保存時のファイル名の確認を強化しました。


####エディタ ツール
* UInterfaces が剛健になり、ネイティブ関数に加えてブループリントが実装可能なイベントも安全に対応するようにしました。 
	* 結果、ブループリントに純粋に実装されている UInterface (ブループリント プロパティの「インターフェース」セクション経由など) は BlueprintImplementableEvents のみを含むことが可能になりました。  
	* ブループリントにアクセス可能で、ネイティブクラスにも追加されている UInterface (class UMyClass : public UObject, public IMyInterface など) は、 BlueprintImplementable イベントと BlueprintCallable 関数を両方持つことができます。  
	* ヘッダージェネレータにより、これらの基準に違反してインターフェースは絶対に作成できないようになっています。
* **ランドスケープ：**
	* クラックがおきにくい PN-AEN および Flat テッセレーションを有効にしました。
	* 怠惰なオブジェクト ポイントを使用して LandscapeComponent と CollisionComponent の相互参照を追加しました。
	* Landscape EdMode でランドスケープ Gizmo が削除されないようにしました。


#### ゲームプレイとフレームワーク
* BugIt 実装を PlayerController から CheatManager へ移しました。
* InvertMouse と InvertTurn exec 関数と同様、bInvertMouse と bInvertTurn も PlayerController から削除されました (新規 invert システムの詳細は新機能をご覧ください)。
* bIsControllerConnected が PlayerController から削除されました。
* bCheck パラメータが SetActorLocation から削除されました。目的地でオーバーラップのチェックをしたい場合は、代わりに Teleport を使ってください。
* SpawnActor 関数が変更されたため、SpawnActor の呼び出しをリファクタリングする必要があります。
* GamePlayers へアクセスするなら、代わりに GetWorld 関数経由で LocalPlayer にアクセスする方が望ましいです。 
* **物理：**
	* 物理コンストレイント システムを大幅にリファクタリングしました。
		* ConstraintSetup の全ての設定を ConstriantInstance へ移しました。
		* コンストレイント設定クラスを削除しました。
	* RB_ で始まるクラスのほとんどが Physics になりました。
		* 多くのクラスを cpp ファイル (PhysicsHandleComponent、 PhysicsThruster, PhysicsContraintTemplate, PhysicsConstraintComponent, PhysicsConstraintActor, RadialForceComponent) に移動しました。
	* PhysicsHandleComponent をリファクタリングし、組み込みスムージングを付けました。
	* StallZ を削除しました。
* DestructibleComponents が DestructibleActor 以外のダメージに対応するようになりました。


####オンライン
* FVector ネット量子化のサポートが拡張されました： [Vector Network Quantization](https://udn.unrealengine.com/questions/166428/vector-network-quantization.html)
* シンプルなストリーミング ファイルサーバー コードを 1 つにマージしました。ストリーミングサーバーがシンプルなネットワークサーバーを拡張するようにクライアント側のコードを更新しました。


#### レンダリング
* **ポストプロセスエフェクト：**
	* Atmospheric fog : fog のレイヤーが複数の場合の状態に対応します。
* 他の問題のために元の状態に戻したマルチラインの TextRenderActor は今後修正します。
* SeparateTransluceny を全てのプロジェクトでデフォルで有効にしました。それにより、より一貫性がとれ、デザイナーにより制御を与え、若干遅いですがシーンカラーの精度を低くすることが可能です。マテリアル設定で機能が無効になっていない限り、透光性はフィールドの深度に影響されなくなりました。
* **ライティング＆シャドウ：**
	* ライトマス EnvironmentColor が領域上部のみになりました。


####プラットフォーム
* UnrealBuildTool は、コードをコンパイルする Mac 名を IPhonePackager に渡すようにしたので、 IPP 環境変数を設定したり IPP コードを変更する必要がなくなりました (不可能になりました)。
* モバイル プロビジョン ファイル を /Library ではなく ~/Library に移動したので、 Mac 上での不自然な許可が必要なくなりました。



## 今後の追加事項と継続的な努力

####ブループリント
* 一番最後に表示されているプリミティブ コンポーネントをブループリントから削除すると、通常のサムネイルへ戻るようにしました。
* 新規作成されたブループリントはグラフモードではなくコンポーネントモードで開くようにしました。
* ブループリント用語、中でも Math Library の検索を強化しました。
* Blueprint エディタの [Hide Unused Pins (使用していないピンを表示しない)] 切り替えオプションを 3 つにわけ、ツールバーからメニューバー ([View (表示)] オプション) へ移動しました。
* FortPathFollowingComponent を BlueprintType にしました。
	* ブループリントのエクスポーズされた関数が PathFollowingComponent に追加されました。GetPathActionType() と GetPathDestination() です。
		* 上記の関数で、問題になっているパスは完全か、部分的か、またパスのエンドポイントを決めることができます。
* ブループリント エディタ：* キャメルケースをきれいなバリアントに自動処理し、ユーザーによるアセット検索のマッチ率をあげました。 
* KISMET SCRIPTING ERROR を LEVEL BLUEPRINT ERROR に名前変更しました。 
* EPET_Kismet を EPET_Blueprint という名前に変更しました。 
* タイムラインが正常に追加され「タイムラインが見つかりません」というエラーを解消しました。
* クラスビューア経由で作成されたブループリントがパッケージを再びダーティとしてマークするようにしました。
* ステートマシンノード上でノード別コメントへの対応を追加しました。


#### サウンド
* ブラシで押し出された領域のリバーブボリュームが正しく動作するようにしました。
* SoundCue コンテクストメニューの Sound ノードは SoundNode のプレフィックスではなくなりました。
* ClampMin と ClampMax メタタグを適切な値の書式で使用できるようにしました。


####コア
* MinimalAPI および RequiredAPI クラスフラグがコンパイルされた クラスへコピーされ、ランタイム時のクエリが可能になりました。
* ビルドシステム開発と CIS テストの支援に使用される新しい「AutomationTool」プログラム上で作業を継続します。
* AActor::bNoDelete はコードベースから完全に削除されました。
* 適切なツールに加えて UE4 向けに新たな設定の Device profile の作業が進行中です。
* (再コンパイル、プロジェクトファイルの生成などの操作のために) エディタ内へ呼び出される前に、アンリアル ビルドツールがビルドされるようにしました。


####エディタ ツール
* **ランドスケープ：**
	* ランドスケープ スプラインの取り消し / やり直しが選択できるようになり、スプライン エディタ外のランドスケープ スプラインの選択状態を修正しました。
	* PIE/Simulate 内でのランドスケープエディタを無効にしました。
	* エディタでのインタラクティビティをあげるため、ランドスケープツールのレンダリングパフォーマンスを改善しました。
* **スレート & UI:**
	* FSlateApplication::GotoLineInSource が追加されました。フォーマットは FullFilePath|Line:Column です。
	* 新たなプロジェクトダイアログではサムネイルサイズが小さくなり、説明文のラップが調整されました。
	* 40x および 256x のアイコンを調整し、クラスを更新しました。PNG の更新のみ、ビルドを破壊しないチェックイン。 
	* BlueprintEditor 関数用に 16px のアイコンを新たに作成しました。エディタ内で更にコード合わせが必要になります。 
	* 複数のクラスタイプに対して 256 ピクセルのアイコンを作成しました。コード合わせ、ビルドを破壊しないチェックインが必要です。 
	* BSPモード用に 40 ピクセル (20 ピクセルをコードスケールと想定) の初期アイコンを作成しました。 
		* 追加コードを対応してこれらを合わせる必要があります。ビルドを破壊しないチェックインチェックイン - チェンジリストは PNG アセットのみ。 
	* プレースメントモード用の仮アイコンを作成しました。追加コードを対応してこれらを合わせる必要があります。 
		* ビルドを破壊しないチェックイン - チェンジリストは PNG アセットのみ。 
	* AtmosphericFog、SphereReflectionCapture、BoxReflectionCapture、DestructibleActor、Note、Pawn、Character、DefaultPawn のアクタクラスの全てに 16px のアイコンを作成しました。 
		* PNG アセットのみです。ビルドを破壊しないチェックイン (コード合わせが必要) 
* ソース コントロールが無効の場合、SCC ステートがコンテンツ ブラウザに表示されなくなりました。
* **ワールド ブラウザ：**
	* ワールドブラウザのズームレベルが増えました。
	* ワールドブラウザの中でレベル選択が表示 ([Home] ボタン) されるようにしました。
* エディタのメインメニューの配置が改善されました。
* 実際のアセットを編集している場合は、アセットメニューのみがメニューバーに追加されます。 
* ワールド設定がツールヒントと一緒に表示されるように、ワールド属性を更新しました。 
* ローカルコレクションの作成失敗のポップアップエラーは、コレクションビューではなくコレクションリストを親に持つようにしました。
* シーン アウトライナーが PIE アクタの選択と変更に対応するようになりました。
* エディタ ビューポートのグリッドサイズの増減調整をキーバインドできるようにしました。
* ログリストがコンソールウインドウに保存されるようになりました。
* プロジェクトが自動ロードに失敗すると、エディタが正常にロードされるまで自動ロードが無効になりました。
* uプロジェクトファイルに対して生成されたソリューションファイルのファイル名は、格納されているフォルダではなく .uproject file に因んだ名前が付けられます。


#### ゲームプレイとフレームワーク
* マップトークンなしに generatedistillfilesets をコマンドライン上で操作すると、全てのマップファイルの使用を想定します。
* コンパイラがインストールされていない/利用できない状態で c++ テンプレートが選択されると、新規プロジェクト ダイアログがエラーを出すようにしました。  
* 入力イベント/ 軸を PlayerControllers に結合することができます。
* ShapeComponent プロパティ (SphereRadius、CapsuleRadius など) を保護しました。Set/Get 方法でアクセスします。
	* ShapeComponent GetScaled* と GetUnscaled* アクセサを追加しました。通常、ほとんどの場所はスケーリングされた値を読みます。
	* スケールされていないバージョンの ShapeComponents を使用したことで発生したバグの多くを修正しました。キャラクターの動作がスケール化されたカプセルに対して正しく機能します。
* FMatrix と FTransform の GetAxis を GetScaledAxis へ変更しました。
* USkeleton 上の AnimationNotifies をループするコードが若干最適化されました。
* 明確な代替コンテクストがない GWorld リファレンス数を大幅に減らすために、多くの関数をリファクタリングし、更にいくつかの GWorld リファレンスを削除しました。
	* 現在 GWorld を返すクラスの多くに GetWorld が追加されました (GWorld リファレンスを削除しやすくなります)。 
* SpawnActor と関連するテンプレートが改定されました。 
	* これらのほぼ全てのパラメータは SpawnActor 関数 / テンプレートへ渡される構造体にあります。　* GamePlayers をプライベートにしてアクセサを追加しました。 
	* ワールド経由でローカルプレーヤーを取得するためにプレーヤー配列を使用してきたインスタンスを大幅に置き換えました。
* **物理：**
	* ソルバー イタレーション カウントを増やして物理シミュレーションを改善しました。
	* リファクタリング：* bCreatePhysicsState フラグを削除しました。
		* コリジョンがオンの場合、物理ステートのみ作成されます。 
		* クエリ用にコリジョンのない物理ステートを作成する必要のある場合は、bAlwaysCreatePhysicsState を true にセットします。
* キャラクターの動作を改善しました。
	* 共通の SlideAlongSurface() あるいは SlideAlongVerticalSurface() 関数を使うため、表面に沿ったスライド用の重複コードを数多くリファクタリングしました。
	* 滑らかなカプセル法線を使うためのスライディング コードを変更しました。 
		* ジオメトリのコーナーに沿ったスライドが大幅に改善されました。
	* キャラクターの浮遊ではなく、実際の床をベースにして MaxStepHeight を実行します。 
		* StepUp を使ってカプセルの滑らかな部分の高めの表面へあがり、上った時に衝撃点の高さを確認することができます。 
		* 前の動作を反映するために恐らくゲームはデフォルト値を増やそうとするでしょう。
	* 設定コードで歩行不可能な表面にキャラクターを配置しないようにしました。低いオブジェクト上を移動する動作について、歩行不可能な法線で今後改善していきます。
	* これらの表面に当たることで間違ったフロア法線がレポートされないように、フロアスウィープテストが隣接する垂直なサーフェスを避けるにようにしました。ComputeFloorHeight() を参照してください。
	* ペネトレーションの開始を処理する MoveComponent に SafeMoveUpdatedComponent() を追加しました。 
		* 動作の妨げを探知すると、ペネトレーションはそこから出ようと試み、元の動きを再試行します。


####オンライン
* 専用サーバーのサポートを更新しました。
	* Steam のスタンドアロンの専用サーバー API をサポートするため様々なコードを修正しました。
	* サウンドとオーディオデバイスが専用サーバーに対して確実にオフにしました。
* Windows プラットフォーム ハードウェア サーベイに対して改善しました。
	* 第一回目のサーベイを実施しました。以後、月次で実施します。
	* 持続的なエディタ パフォーマンス (プログラミング / スレート フレームレート) の測定およびエディタへの 1 回ごとの記録を開始しました。
	* CPU、OS、RAM stats を改善しました。
	* エンジンがゲーム特有にカスタマイズされている場合、ハードウェアサーベイ機能を公開しました。


#### レンダリング
* **マテリアルとテクスチャ：**
	* Visualizetexture で深度バッファをマップすることで、より多くの色の読み取りが可能になりました。
	* キューブテクスチャがテクスチャ エディタの中で正しく中央に位置するようにしました。
* **ライティング＆シャドウ：** 
	* 複数のシャドー cvar 名を変更しました。
	* シャドー レンダリング調査や色付きシャドーのカスケード用に r.Shadows.FreezeCamera を追加しました。
* **ポストプロセス エフェクト：**
	* ポストプロセス機能が期待どおりに動くかテストする r.exposureoffset を追加しました。
	* TemporalAA テストマテリアルを RenderTestMap に追加しました (高周波ディザリングを TemporalAA と使用すると可能になるレンダリング トリックもある) 。
	* PostProcessVolumes などにおける露出のマニュアル設定を DX10 で出来るようにしました。 
* バンディング関連の問題を解消するためにランダムディザを HDR エクスポートに追加しました。


####プラットフォーム
* エンジンとエディタを Mac へポートする作業を継続します。
* 要望があれば、UnrealBuildTool で アプリケーション バンドルを PC にコピーできるようにしました (ビルドマシンが Mac 実行ファイルでチェックするには非常に便利) 。

