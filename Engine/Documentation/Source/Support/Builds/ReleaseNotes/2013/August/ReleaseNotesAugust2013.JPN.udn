INTSourceChangelist:2615072
Title:2013 年 8 月リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Template:ReleaseNotes.html

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **ラベル** | QA_APPROVED_UE4_BUILD_2013_08 |
| **チェンジリスト #** | 1781093 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2010 version 10.0.40219.1 SP1 Rel |
| **DIRECTX** | 2010年6月 |
[/REGION]

## 重要情報

 * 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 修正されたバグ： [UE4 Fixed Bugs August 2013](UE4_Fixed_2013_August.xlsx)
 * 既知の問題: [UE4 Outstanding Bugs August 2013](UE4_Bugs_2013_August.xlsx)
 

## 主な新機能

####エディタ ツール
* **シミュレーション変更を永続的なものにする**
	* シミュレーション中に加えた変更を永続的なものにすることができるようになりました。	
	![](Simulation.png)
	* シーン アウトライナーでアクタを選択した状態で以下を行うことができます。
		* ゲーム実行中にアクタのプロパティを修正し、変換し、こうした変更を維持できます。
		* 剛体を動かして最終位置をレベルに保存します。
		* ブループリントまたはゲームプレイのコードを使用してシミュレーションでアクタを修正し、こうした変更を保存します。
		* プレイモードでも機能します。

* **ツールバーのカスタマイズが、EpicLabs Preference にあります**
	* ツールバーのカスタマイズは EpicLabs でオンにできます。
	![](CustomTools_Final.png)
	* **Edit > Edit Toolbars** の順序で選択し、**Keyboard Shortcuts** ウィンドウからコマンドを互換性のあるツールバーにドラッグできます。

* **テクスチャ インポート中の法線マップ検知**
	* エンジンは、テクスチャ マップが法線マップであるかを判断するためにインポート時にテクスチャをヒューリスティックに調べるようになりました。	
		![](NormMapDet1.png)
		* LOD、圧縮、その他のデフォルトはインポート時に自動的に設定されます。
		![](NormMapDet2.png)
		* 「標準」のテクスチャのデフォルトをインポート後であっても変更をリバートするオプションがあります。

* **エディタ内の UI の非表示、セーフフレーム、およびアスペクト比**
	* HideUI : (UI を非表示にする)ビューポートからスレートのオーバーレイを取り除くことができます。		
	![](safe1.png)(w:420)
	* 法線選択は左マウスボタンでも機能します。UI を戻すには右マウスボタンをクリックします。 
	![](safe2.png)(w:420)  ![](safe3.png)(w:420)
		* UI を非表示にする機能を Game View と組み合わせて上記のように完全にビューポートをクリアにすることもできます。
	* Safe Frames:カメラ アクタを選択し、以下の基準を満たしたら、エディタ ビューポートはカメラのアスペクト比の設定に基づいてセーフフレームをレンダリングします。
		* ゲームビューは必ずオフにします。
		* Safe Frames Show フラグはオンにします (**Show > Advanced**).
		* 選択したカメラアクタは、_Camera Settings_ で _Constrain Aspect Ratio_ が _True_ に設定されているようにします。
	![](safe4.png)(w:420)
	* アスペクト比：アスペクト比のプロパティは以下の方法で編集できるようになりました。
		* スピンボックス内の浮動小数点値として (以前と同様)
		* プルダウン矢印をクリックして事前設定された比率のリストから選択
		* 以下の形式のテキストで解像度または比率を入力、 _幅 x 高さ_ または _幅 : 高さ_.
	![](cam1.png)

* **ソース コントロール**
	* ソース コントロールのステータス インジケータはサブメニューの下ではなくエディタの右上隅に移動しました。
	![](SourceControl02.png)
	* 以下のようなエディタの様々な部分からソース コントロールにアクセスして有効にすることもできます。
		* ファイル メニューから
		* コンテンツ ブラウザのコンテキスト メニューで
		* レベル ブラウザで
	* 新規作成 (および保存) されたアイテムがあれば、まだユーザーがソース コントロールにログインしていなければログインするように促します。 
	* ファイルをチェックアウトする必要がたまたまあったがソース コントロールに接続していなければ、ユーザーはチェックアウト ダイアログでソース コントロールにログインすることもできます。

* **プロジェクト ブラウザ** 
	* エディタ起動時に開くプロジェクト ブラウザが追加されました。
	![](Project-Browser.png)
	* プロジェクトの位置に基づき自動的にすべての既知のプロジェクトをカテゴリ別に整理してリスト表示しますが、既存カテゴリまたは新規カテゴリがあればオーバーライドされることがあります。
	* プロジェクトのサムネイルは、プロジェクト フォルダにある「`.png`」ファイルからロードされます。
	* プロジェクトのサムネイルを作らないと、プロジェクトのエディタを終了するとスクリーンショットが自動的にとられます。このスクリーンショットは、それをとったマシンでのみ使用されます。
	* リストの一番上にある _New Project_ アイテムを選択し、**New Project** ウィザードを開きます。


####レンダリング
* **マテリアルのパラメータ コレクション**
	* マテリアルのパラメータ コレクションには大量のマテリアル パラメータを同時に操作する強力な新機能があります。
	![](GlobalParams1.png)(w:420)
	![](GlobalParams2.png)(w:420)
	* 上の例では、以下はマテリアルのパラメータ コレクションのパラメータで操作されています。
		* 花のモーフィングのステート
		* 風の速度と強度
		* プレイヤーの位置：(フォーリッジ アニメーションで使用)
		* 太陽の角度と色 (水位点で使用) 
	* コンテンツ ブラウザでマテリアル パラメータのコレクションを作成し、新規パラメータを追加、名前を付けることができます。
	* どのパラメータでも、またすべてのパラメータで個々のパラメータを参照することが可能であり、ブループリントで効率的に操作することもできます！

* **頂点数が 64 k よりも大きいスタティックメッシュをサポート**
	* 頂点数が 64 k よりも大きいスタティックメッシュのインポート、およびレンダリングのサポートが追加されました！
	![](dragon.png)


## 新機能の追加

####エディタ ツール
* **シミュレーション変更を維持**
	シミュレーション モードでアクタのプロパティを変更後、こうした変更を選択的に永続的なものにできるようになりました! 
	* シミュレーション モードでアクタを右クリックしシミュレーション変更を維持、 Keep Simulation Changes (または 'K' キーを押します) を選択します。 
* ヒューリスティック機能を追加して、インポート時に法線マップを特定し、適宜様々な設定を割り当てるようにしました。
* レベル エディタのツールバーに保存ボタンを追加しました。
* **ツールバーのカスタマイズ** -EpicLabs 機能
	*キーボードのショートカットメニューからドラッグして互換性のあるツールバーへのコマンドを追加しました。
	* 赤い 'X' ボタンをクリックしてコマンドを削除します。
	* 環境設定 (preferences) の Epic Labs セクションで有効にし、**Edit > Edit Toolbars** の順序で呼び出します。
* **プロジェクト ブラウザ**
	* 既存のコンテンツを見て新規プロジェクトの作成を開始できます。
	ゲーム名と一致する `.png` ファイルがゲームフォルダにあればそれがブラウザで使用されます。なければ、エディタを終了するたびにスクリーンショットが自動的にとられます。
* コンテンツ ブラウザの **New Asset** メニューにカテゴリ、サムネイル、説明のツールチップが追加されました。
* セーフフレーム - エディタのビューポートに選択したカメラ アクタのアスペクト比とセーフフレーム領域が表示されるようになりました。
	* デフォルトでオフになっている Advanced カテゴリの Show Flag で有効になります。
	* 他のシーン以外のビューポート情報のようにゲームビューモードではセーフフレームは非表示になっています。
* レベル エディタのビューポートの Hide UI オプションは Slate UI のオーバーレイを非表示にします。
	* Hide UI モードはビューポートで右マウスボタンを押下してキャンセルできます。
	* セーフフレームは選択したカメラの Constrain Aspect Ratio が true に設定されている場合に限り表示されます。


####ブループリント
* **ブループリント デリゲート** -1 st バージョン
	* 変数のようにマルチキャスト デリゲートを追加できます。
	* イベントに、およびイベントからデリゲートを bound および unbound できます。
	* マルチキャスト デリゲートは通達 (broadcast) できます。
* **ブループリント シミュレーション**
	* コンポーネント モードでブループリントのシミュレーションを切り替えることができます。
	* 有効になると、ブループリントと物理のグラフが実行します。
* 親クラスの情報の表示をブループリント エディタのメニューバーの右側に追加しました。
* ブループリントのコンポーネント モードでフロアのプレビュー ジオメトリを切り替えることができます。
* 以下の関数が追加されました。すなわち、SetPaused, SetTimeDilation, GetMousePosition, GetInputMotionState Blueprint functions です。
* ブループリント エディタの DestructibleComponent プロパティで被破壊メッシュを設定できるようになりました。


#### ゲームプレイとフレームワーク
* **カメラ システム**
	* すべての参加者がプロパティ (パラメータ、ポストプロセスのオーバーライドなど) を設定できるように、どこでも同じ構造体を渡すカメラ情報フローを標準化しました。
	* `ACameraActor` が `UCameraComponent` を使用するようにリファクタリングしました。
	* アクタは見られているときに アタッチされているカメラ コンポーネントを探すようになり (`bFindCameraComponentWhenViewTarget` で制御)、ブループリントでポーン毎にカメラのカスタマイズを簡単にできるようになりました。
	* 正投影ゲームプレイ カメラ (WIP) に制限付きのサポートを追加しました。
	* カメラ コンポーネントはコントローラの回転をオプションで継承できるようになりました。
	* 壁を突き抜けることを回避するための追跡を行う簡単なカメラ ブーム コンポーネント (`USpringArmComponent`) を追加しました。
	* カメラ コンポーネントの使用をデモするためにいくつかのテンプレート プロジェクトを更新しました。
	* カメラ アクタのアスペクト比プロパティは編集可能なテキスト ボックスまたはプリセット リストを使用してアクタの詳細で編集できるようになりました。
		* 既存の浮動小数点の表示はまだ利用可能です。
		* 以下の形式のテキストで解像度または比率を入力して編集できます。、 _幅 x 高さ_ または _幅 : 高さ_.
		* プルダウン矢印をクリックしてプリセットの比率のリストから選択して編集できます。
	* ビューターゲットがビヘイビアを修正するフラグを追加された `CameraActor` ではない場合、デフォルトでプレイヤーのカメラはモディファイア (例、シェークなど) を適用しません。
	* 新しいカメラの相対移動モードは、一段と簡単に実装できるようになりました。例として ThirdPersonTemplate をご覧ください。
* **ナビゲーションと AI**
	* ナビゲーション メッシュ (navmesh) の再ビルドが一段と高速になりました。これは、ビルド プロセスを 2 つの段階、すなわち静的ジオメトリ (キャッシュのタイル処理) の処理、および動的モディファイアでナビゲーション メッシュ データを作成する処理に分けて行います。
	* 動的ナビゲーション メッシュのモディファイアは、`INavRelevantActorInterface` を使用して定義されます。スタティックメッシュはアセットの`NavCollision` プロパティでマークすることができます。
	* ナビゲーション メッシュはプレイヤーに近いいくつかのタイルのみを読み込むことができます (`RecastNavMesh` アクタの `UseActiveTileSet`フラグ)。
	* `SimpleMoveToActor` 関数および `SimpleMoveToLocation` 関数で基本パスを見つけてコントローラに従うことができるようになりました。
	* ナビゲーション用の新しい統計を追加しました。フレーム単位でのナビゲーション メッシュのオペレーション負荷 (デディケイテッド サーバーのグローバル ナビゲーションメッシュの負荷を計算するためのもの) に関する情報を取得します。
* **入力**
	* ゲーム停止中に実行するか否かを示す入力バインディングのプロパティを追加しました。
	* これで入力軸は単にGet Value ノードではなくイベントとしてバインドできるようになりました。
* **物理**
	* Apex  クロスの LOD (Level of Detail) をサポート
	* プレイヤーが物理駆動のビークルを制御するゲームを簡単にセットアップできるようにしました。
		* `Vehicle` ベースのクラスを作成しました (基本的にスケルタルメッシュと `VehicleMovementComponent` を持つを持つ `Pawn`)
		* ビークル移動コンポーネントは、入力をキャプチャするという点でキャラクターと似た挙動をするようになりました。ポーリングする代わりにポーンからのイベントを待ちます。 
		* ビークルの車輪は自動的にエンジン シリンダを使用して車輪のコリジョンを生成します (デフォルトのビヘイビアは車輪のブループリントで変更できます)。
		* 車輪のブループリントでは、ハンドブレーキが車輪に影響を及ぼすか否かを指定できます (後輪にのみ影響を及ぼすべきです)。
* `BaseEngine.ini` のコリジョン プロファイル定義をクリーンアップし、より読みやすく、管理しやすくなるようにしました。
* デディケイテッド サーバーで機能テストの実行を可能にしました。これからは、サーバーで機能テストを実行し、統計情報、ログを入手したり、単にテストすることができます。
* `USceneComponent` でのソケットのサポートを一般化し、ソケット / アタッチメント UI で `USkeletalMeshComponent`/`UStaticMeshComponent` 以外の他のクラスでも作業できるようにしました。
* 様々なウィンドウ サイズを設定するための UE3 コマンドライン パラメータを移植しました(ゲーム ウィンドウの解像度用に ResX/ResY、ゲームウィンドウの位置用に WinX/WinY、コンソール ウィンドウの位置に ConsoleX/ConsoleY)


####レンダリング
* テクスチャ サンプリングのリミットのトラックは実際にコンパイルした出力を見ることで正確に行われるようになりました。
* WorldPosition マテリアル式はポストプロセス マテリアルで使用できるようになりました。その結果は、ポストプロセスのパスのピクセルを通して見たワールド空間の位置になります。
* WorldPosition マテリアル式では、位置が絶対的なワールド位置であるか、またはカメラに相対的な位置であるかを選択できるようになりました。
* 頂点数が 65536 を超えるスタティック メッシュをインポートおよびレンダリングできるようになりました。
* ブループリントの固定ライトの修正
	* メッシュまたはライトをブループリントで作成した場合に固定ライトがビルドされないといういくつかの未解決問題があります。


####アニメーション / ペルソナ
* PhAT にはペルソナ スタイルのアニメーション ピッカーがあります。
* PhAT ボディのコンテキスト メニューでは、ボディタイプをデフォルトに設定したり、固定/固定解除 (fixed/unfixed) に設定できるようになりました。メニューはわかりやすいグループ分けで整理され、ボディの現在のタイプを示すようになりました。
* ペルソナでボーンを選択できるようになりました。これはビューポートでペルソナをクリックして行います (ボーンのレンダリングがオンになっている場合)。ブランク空間でクリックすると選択が解除されます。
* ペルソナに風の方向を追加しました。 


#### サウンド
* ルートのサウンド クラスはなくなりました。複数の独立したサウンド クラスの階層が存在可能であり、並行して使用できます。
* 最大サウンド制限に到達した場合に、新規サウンドを入れない、一番古いものを停止する、または一番遠くのものを止めるなどを指定できるようになりました。


####オンライン
* OnlineSubsystemNull が追加されました。これは、実際のオンライン バックエンドを使用していない場合に、オンライン機能のサブセットを提供します。これまで、セッションのみ (LAN 上で advertised) がサポートされています。


####コア
* コンソール変数の変更で関数を呼び出すように登録することが可能になりました (RegisterConsoleVariableSink)。
* クライアントとクック サーバーは、ゲームとエンジンのディレクトリをスワップし、その2 つで異なるレイアウトを実現します。 
* 新規レベルの統計情報システムです。
* Visual Studio のプロファイラ サポートを追加しました。 
	* SCOPE_PROFILE_INCLUDER を使用して遅いコード ブロックをラップしPAUSED ステートで外部プロファイラを開始します。 
* **プロファイラ**
	* イベントグラフに関数の詳細を追加しました。


####プラットフォーム
* ハイレベルな save game システム、`GenericSaveGameSystem` を追加しました。
	* `GFileManager` を使用して `GameSaveDir()` に保存します。
	* `IPlatformFeaturesModule` を追加しました。これは、save game クラスを戻すことができます (他の用途にも使用します)。 
	* SaveGame 自動化テストを Game set に追加しました。
* アンドロイドは NDK r9 と Clang 3.3 でビルドします。
* NVIDIAs デポから`PhysX-3.2_EPIC` ソースを更新します。


##アップグレード ノート

#### エディタとツール
* uproject ファイルの `GenerateProjectFiles.bat` を削除しました (UE4 ルートの `GenerateProjectFiles.bat`はそのまま残り、生成されません)。
	* これは .uproject ファイルを右クリックして Generate Visual Studio Files を選択して行うようになりました。
	* ビルド フォルダを`.uproject` ファイルに関連付けるには `Engine/Build/BatchFiles/RegisterShellCommands.bat` を使用します。一回にひとつのビルドのみを関連付けます。
* エディタ起動時に Perforce ダイアログが表示されなくなりました。ソースコントロールのワークフローが合理化されました。
	* ソース コントロールは、エディタの右上隅の色付きのインジケータ ボタンからログインできるようになりました。エディタ全体で様々なメニューにジャストインタイムでアクセスすることもできます。

####ブループリント
*ACharacter はデフォルトの移動入力のバインディングがなくなりました。
	* Character ブループリントが古いデフォルトのネイティブ キーのバインディングを入力に使用するか否かを決める bool、`bAddDefaultMovementBindingsForBlueprint` があります。デフォルトは true です。そのため、カスタム バインディングが必要な場合は、コンテンツはそれを false に設定すべきです。コンテンツを移行する機会があった後には、おそらくこれを取り除きます。
	* 入力軸イベントも移動関数もブループリントにエクスポーズされました。SideScrollerTemplate と ThirdPersonTemplate は例として更新されました。
* テンプレート デフォルト マップ : テクスチャ データを減らすために Atmospheric fog の高度の数を 32 から 2 に減らしました。
* Atmospheric fog - ブループリントで作成した Atmospheric fog のコンポーネントを事前計算したデータで維持することが可能になりました。
* ブループリントは無効な文字を含む名前変更はできません。これはブループリントの実行を阻むからです。
* `SceneComponent::AttachTo` のアタッチタイプは、ブールから列挙型変数に変更されました。
	* `KeepRelativeOffset` - 現在の相対的な変形を維持します。
	* `KeepWorldPosition` - 現在のワールドの変形を維持します。
	* `SnapToTarget` - 現在の相対的な変形をリセットします。
* `Actor::MakeMIDForMaterial` は非推奨になりました。CreateMID 関数がマテリアル ライブラリに追加されました。 
* CreateMID を使用する代わりに CreateMIDForElement または CreateMIDForElementFromMaterial を利用します。
* マテリアル パラメータ コレクションのブループリント関数は、キズメットの関数ライブラリにあります。
	[REGION:note]
	注記事項：これは以前のマテリアル パラメータ コレクションのブループリント関数を break します。既存のノードを置き換えなければなりません。
	[/REGION]
* シェーダー開発では、ConsoleVariables.ini で `r.ShaderDevelopmentMode` を有効にします。LogShaders はコンパイル エラーでリトライする方法ではなくなりました。


#### ゲームプレイとフレームワーク
* あるクラスのすべてのソースをその独自のファイルに入れるためのソース コードの再編成
	* `Actor`、 `Controller`、 `GameReplicationInfo`、 `PlayerReplicationInfo`、 `WorldSettings`、 `Character`、 `Pawn` に影響を及ぼします。
	* `ActorReplication.cpp`、 `ActorEditor.cpp`、 `WorldSettings.cpp` を追加しました。
	* `Script.cpp` を削除しました。
* PlayerController の入力コンポーネントはコンストラクタで作成されなくなりました。ポーンと同様に仮想関数の SetupInputComponent でもバインディングを行います。
* `PlayerController.GetInputAnalogStickState` は、未加工のハードウェア値の代わりにゲーム値 (反転とデッドゾーンの適用後) を戻すようになりました。
* `BIND_` マクロから ConsumeInput を取り除きました。マクロのバインド後にコードから `InputAction`/`InputAxis` を設定するには、以下のような方法で行うことができます。
		BIND_ACTION(InputComponent, "Fire", IE_Pressed, &AQAPlayerController::OnTriggerPressed);

		InputComponent->ActionBindings.Last().bConsumeInput = false;

* `MaxDrawDistanceScale` システム設定は新しい `r.ViewDistanceScale` コンソール変数に置き換えられました。
* `LocalMap` は取り除かれ、DefaultMap を指定するために使用する唯一の設定は `Map` になりました。 
* BeginPlay をリファクタリング
	* `PreBeginPlay`/`BeginPlayComponent`/`PostBeginPlay` は、以下のように名前変更されました。`PreInitializeComponents`/`InitializeComponent`/`PostInitializeComponents`
	* ブループリントの `ReceiveBeginPlay` イベントは、プレイヤーのスポーン後に発行されるようになりました。
	* `LevelScriptActor.BeginGame` イベントは ReceiveBeginPlay に変換されました。
	* サブレベルでストリーミングし、その配置したアクタは  ReceiveBeginPlay 呼び出しを受けます。
* 多くのカメラ関連の関数のシグネチャは、緩やかな location/rotation/FOV の値の代わりに、フルビュー ステートを含む `FMinimalViewInfo` を取るように変更されました。
* プロジェクトの最初のバッチ、エンジンとエディタの設定は、新しい Settings UI フレームワークを使用するようにリファクタリングされました。


####レンダリング
* StaticSwitchParameter マテリアル式はいずれかの入力が接続されない場合にエラーを出力するようになりました。これにより、既存のマテリアルがコンパイルされなくなることがあります。


####アニメーションとペルソナ
* `USkeletalMesh::Sockets` はプライベートになりました。ソケットのリストを取得するために、`GetActiveSocketList()` と `GetMeshOnlySocketList()` が追加されました。これはエディタのみのコードです。
* `FKSphereElem`/`FKBoxElem`/`FKSphylElem` はリファクタリングされて、フルの FMatrix ではなく最小限の位置、方向の情報を格納するようになりました。こうしたクラスを使用しているコードは変更する必要があります。


#### サウンド
* `ReverbVolumeToggleable` は `ReverbVolume` と結合されました。


####オンライン
* リファクタリングされたオンライン サブシステム、OnlineProfileInterface は OnlineIdentityInterface と結合されます。
	* 既存のOnlineProfileInterface 機能は削除できるように非推奨になりました。
* Http モジュールは起動時にインターネット接続をチェックしなくなりました。 
	* これは WinInet のブロッキング呼び出しであり、不要なものでした。いずれにせよ接続がなければ非同期要求は失敗するからです。
* Http モジュールは実際に http 要求をすることを実際に無効にするフラグを持ち、代わりとして単に完了デリゲートを呼び出します。
	* `DefaultEngine.ini`で :
		[Http]

			bEnableHttp=false

* Http WinInet は、INTERNET_FLAG_RELOAD を介してキャッシュされたデータに依存する代わりに常にサーバーからダウンロードします。


####コア
* `TPreallocatedArray<Type, Count>` は削除しました。代わりに `TArray<Type, TFixedAllocator<Count>>` を使用してください。
* エディタまたはブループリントで表示されていた非推奨プロパティはエラーになります。非表示にしてください。
* `AActor` からのナビゲーション関連の関数のリファクタリングのファースト パス。すべてのナビゲーション関連のアクタは `INavRelevantActorInterface` を実装する必要があります。
* `TAssetPtr` タイプはリビルドされており、アセット データの非同期ロードに使用できます。
	* `FStringAssetReference` はアセットの名前を含む構造体であり、ロードされていないデータを参照するために使用できます。
	* `TAssetPtr` は `TWeakObjectPointer` に類似していますが、現在ロードされていないデータの参照には使用できません。 
	* 以前の `TAssetPtr` の使用は機能しません。シリアル化に `FStringAssetReference` を使用するようになったからです。つまり、クッキングとリダイレクトで適切に機能します。`TAssetPtr` によって使用される `FStringAssetReference` に `.GetUniqueID()` でアクセスすることができます。
	* `FStringAssetReferences` と `TAssetPtrs` をプロパティとして使用し、エディタ UI で 常にロードされないデータへの参照を作成します。変換できます。
	* `FStreamableManager` には、 `FStringAssetReferences` を非同期にロードするための関数があり、完了時にはコールバックします。これを使用することにより、メイン スレッドを停止させることなくアセット グループのロードをリクエストできます。
* プラグインはプラグイン UI で切り替え、有効化、無効化できるようになりました。
	* ゲームでプラグインを使用している場合は、`+EnabledPlugins="YourPluginName"` を `DefaultGame.ini` の `[Plugins]` セクションに追加しなければなりません。
* ティック グループの名前を AsyncWork の代わりにPre/During/PostPhysics に変更します。
	* `bTickBeforePhysics` フラグを削除します。
* `IMPLEMENT_PRIMARY_GAME_MODULE` は生成された UELinkerFixup 関数の存在に依存しますが、この関数はすべてのモジュールで `IMPLEMENT_MODULE` が適切にセットアップされていることを必要とします。 
* アンリアルの列挙型変数を、`GetEnumString()` を使用する文字列に変換することは、コア (かつてはエンジン) から行えるようになりました。


####プラットフォーム
* UnrealBuildTool と IPhonePackager が使用する一部の環境変数名を変更/修正しました。Search `*.cs` for: `"ue`.
* Dangerously Fast モードを追加しました。これは実行可能ファイルを再コンパイルし、プロビジョンのようなものはコピーしません。Rebuild/Clean はひとつの slow モードのコンパイルを実行します。


## 継続事項と改善

####エディタ ツール
* **マチネ**
	* スレート通知が表示され、ユーザーに対してマチネ トラックに静的ライトを追加できないことを伝えます。
	* Matinee Reduce キー メニューが正確に表示されるようになりました。
	* マチネのイベント名テキスト ボックス エントリのウィジェットに最長幅を与え、たくさんのテキストを貼り付けた場合にアサートしなくなりました。
	* Editing Crosshair (クロスヘア (照準) 編集) 操作でチェックボタンを使用し、メニューでオンオフのステートを表示します。
* **Play In Editor/Simulate In Editor**
	* PIE GameplayViewport が有効な場合、UDK リモート入力はそのビューポートに対してのみスケーリングされ、ルーティングされます。
	* Play-In-Editor (PIE) 設定は Settings UI で設定できるようになりました。
	* シミュレーション中にeject (制御解除) から possess (制御取得) に切り替えた場合に、アクタは選択解除されなくなりました。
* **ビューポート**
	* 平面ワイヤーフレーム メッシュは正投影ビューで可視状態になります。
	* アンビエント オクルージョンをビジュアル化できるようになりました。これは、表示フラグ経由ではなく [Visualize Buffer ] メニューから行います。
	* レベル ビューポートのコンテンツ メニューにある **Attach To** オプションは検索欄のテキストを自動的にフォーカスします。
	* LevelStreamingVolume アクション、**Level Streaming Volume Previs** をビジュアル化するためのエディタのユーザー設定を追加しました。
* **ワールド ブラウザ** 
	* ランドスケープではないレベルに対してレベル境界によるスナップを追加しました (無効にするには、**Ctrl** を押します)。 	
	* **File > Open World...** コマンドをエディタのメインメニューからワールド ブラウザのメインメニューに移動しました。 
	* OS 標準の 'Browse for folder' ダイアログの代わりにカスタムの 'Open world location' ダイアログを追加しました。 
* **シーンアウトライナー**
	* シーン アウトライナーを使って、アクタの名前変更を元に戻すことができるようになりました。
	* シーンアウトライナーを変更し、アウトライナーで表示されていない場合、選択したものだけを表示しスクロールできるするようにしました。
	* SIE/PIE 中にレベルがストリームイン / ストリームアウトする場合にシーンアウトライナーが更新するようになりました。
* **ランドスケープ**
	* コピーとギズモの操作に元に戻す機能を追加しました。
	* レイヤーがない場合に [Gizmo Remove Layer] ボタンを無効にします。
	* ランドスケープ プロキシでレベルを直接ワールド ブラウザから作成する機能を追加しました。ランドスケープで事前に最低ひとつのロードされたレベルがあることを必要とします。
* **フォリッジ**
	* マップのリビルド通知に接続し、壊れた/不要になったコンポーネントが PIE をクラッシュさせるのを回避することに反応してフォリッジ インスタンスを BSP コンポーネント全体で移行します。
	* リビルドするジオメトリがオリジナルのターゲット BSP を取り除く場合にターゲットとなっていないフォリッジ インスタンスを削除しないでください。
* **メッセージ ログ**
	* メッセージ ログの API が合理化されました。メッセージ ログ出力がこれまでのエディタからだけではなく、すべてのモジュールから利用可能になりました。
	* 複数の重複メッセージ ログはエディタの起動時に表示されなくなりました。
	* メッセージ ログはレベル変更時、ライティングのビルドのマップ チェック実行時に誤ってポップアップされることはなくなりました。
* **自動保存**
	* 自動保存は、プロジェクトを何もロードしない状態で実行すると無効になるようになりました。これはプロジェクトのロード前に新規プロジェクト画面にいる場合の自動保存を回避するためです。
	* 単にメニューだけでなく、スライダー / スピンボックス / メニューとインタラクションする場合に自動保存通知を開くことをサスペンドします。
* **UI 全般における改善点**
	* 最近使用したレベルをサブメニューに移動しました。
	* 最近使用したプロジェクトは通常のメニュー アイテムを使用するように変更しました。
	* アイコンと可動性のインジケータはハイライトされたときにブラックに変わらなくなりました。
	* ScrollBox RMB のスクロールはリストビューと同じような挙動をします。
	* エスケープ キーを押して新規レベルのダイアログ ボックスを閉じることができるようになりました。
	* エスケープ キーを押してsave all (すべてを保存する) ダイアログ ボックスを閉じることができるようになりました。
	* エディタ起動時にフルフォーカスし、エディタ ウィンドウ内でクリックする必要なく、キーボードのショートカットが正確に機能するようになりました。
	* Settings Editor カテゴリで検索ボックス欄はデフォルトでフォーカスされるようになりました。
	* [Build and Submit] ウィンドウでパッケージをファイルに名前変更しました。
	* STextEntryPopup 引数に MaxWidth 引数を追加しましたが、デフォルトではバインドされていません。
	* ユーザーのデスクトップが右側のプライマリ モニターで設定されている場合、左側のモニターのサブメニューは右端から入ってくることはありません。
	* クックしたコンテンツの警告ダイアログには、実行の失敗理由がより詳細に説明されます。
	* **Build > Lighting Info > LightMap Resolution Adjustment** メニュー内のスタティックメッシュと BSP サーフェスのアイテムが正しいチェックボックス画像を使用し正しく表示されるようにします。
	* ブループリントのプロパティ タブにある [Collision Profile Reset to Default] ボタンの黒のボーダーを取り、他のものと同じように見えるようにしました。
	* インポート アセットのコンテキストメニューのための 16x アイコンを作成しました。
	* 新規アセットに対して複数のリクエストされたクラス アイコンの最初のWIP パス
	* プレースホルダー 16x アイコンを置き換えるために新規アイコンが作成されました。
	* 現在、16x アイコンであるすべてのメニュー アイテムについて新規 40px アイコンを作成しました。
	* 5 つのメイン エディタのツール アイコンの新規アイコンと、選択したステートに対して色を変更するアイコン作成しました。アイコンはコードの接続を必要とします。
	* デベロッパ ツール/モジュールのメニューアイテムに @ 16x の新しいビューメニュー アイコン。
	* すべてのウィンドウ メニュー アイテムに @ 16px の新規アイコンを作成しました。これは、メニュー タブでも使用します。
	* 欠落しているNavMeshModifier のプレースホルダー アイコンを 16x & 64x で作成しました。
	* 汎用コマンドと 512px ソース アイコン用に 40px アイコンを作成しました。
	* 複数のボリューム タイプについて 16px & 64px で新規アイコンを作成しました (コンテンツ/プレースメント ブラウザで使用)。
	* 様々な 128px プラグイン アイコンと 20px フォルダー アイコンに対してプラグイン ペインで使用するための新規アイコンを作成しました。
	* 最近使用したレベルと最近使用したプロジェクトの 16 px アイコンを新たに作成しました。
	* 多数のエディタ ウィンドウのタブとメニューにあるエントリにアイコンを追加しました。
	* プレースメント ブラウザにあるボリューム タイプのアイコンを追加しました。
	* プラグイン エディタでさらにアイコンのサポートを追加しました。
* 中央化されたプロジェクトと Editor settings UIの実装を継続しました。
* FGuidProperties の詳細ビューのカスタマイズを追加しました。
* リビルド モデルは、モデルのレベルを利用できない場合 (一定条件下で起こります) にワールドのカレント レベルを使用するようにフォールバックするようになりました。
* Copy component プロパティはインデックスのミスマッチを考慮するようになりました。
* テンプレート マップは、正しい名前を表示するようになりました。
* Swarm はレベルのビルド実行時にデフォルトで最小化で実行するようになりました。
* 新規エントリが追加すると、ユーザーがスクロールしなければ出力ログは一番下にのみスナップします。
* DefaultPath は Windows のファイル ダイアログではフルパスとして扱われます。これは、他のブランチとの混乱を回避します。
* **Alt + drag** のアクタの複製のパフォーマンスを改善しました。これは、エクスポータを登録し、レベルのような大きな UObject のシリアル化のパフォーマンスを向上させることで実現しました。
* ブラシとボリュームのクラスを適切にタグ付けし、自由に変換できるようにします。
* Select All Additive Brushes などのブラシ グループを選択する場合、以前のアクタ選択を破棄します。
* 被破壊メッシュエディタのユーザビリティの向上。
* アセット レジストリで見つかった長いパッケージ名に変換できない有効なパッケージ文字だけを持つファイルはスキップされるようになりました。
* ヒット プロキシにテンプレート HitProxyCast を追加しました。
* アンカーを持つローカル ドキュメントの URL はブラウザで正しく開くようになりました。


####ブループリント
* ブループリント エディタでは、変数、関数、グラフ、マクロ、およびデリゲートは、**My Blueprint** ウィンドウでインラインで名前変更されるようになりました。
* フォーカスに影響を与えるべきではないポップアップと通知は影響を与えなくなりました。
* ブループリント エディタのパレット ウィンドウからの欠落しているアクションが表示されるようになりました。
* アクタからブループリントを作成する場合、成果物のブループリントではすべてのコンポーネントを不自然に回転させません。
* コンテンツ ブラウザのブループリント サムネイルに小さな改善を数多く加えました。
* ブループリント エディタのコンポーネント モード内の詳細タブでネイティブ コンポーネントのプロパティに加えた変更は、ブループリントに基づきアクタのインスタンスに正しく伝搬されるようになりました。
* ブループリントのプレビュー シーンでアクタ / オブジェクトに対してスクリプトの例外 (例、ブレークポイント) はトリガーされなくなりました。さらにブループリントのプレビュー シーンは PIE/SIE セッションがアクティブな間はティックされなくなりました。そのため、スクリプトのデバッグ中にメッセージ ログが見えにくくなりません。
* ブループリント グラフの変数ノードは、プロパティが存在しないか非推奨である場合にコンパイル後に警告を表示するようになりました。
* ブループリント グラフで **Switch on Int** ノードのデフォルトの出力ピンを取り除いてもエディタを再度開いた後にブループリントがコンパイルに失敗することはなくなりました。
* ブループリントの diff グラフ リストはスクロール可能になり、その他の点でも改善を加えました。
* ブループリント エディタは、カスタム イベント ノードをコピー/貼り付け/元に戻す/貼り付ける場合にクラッシュしなくなりました。


#### ゲームプレイとフレームワーク
* 階層のパスファインド
* カスタムの navmesh 接続 (offmesh リンク) ：セグメント間。
* WorldSettings は`.ini` ファイルがマップで保存されているクラスとは別のクラスを示している場合は、新規クラスに移行されます。
* bPrintToLog とフラグ付けされるブループリントの PrintString メッセージは、コンソールおよびログで表示されるようになりました。
* 入力キー ノードはプロパティの詳細パネルから切り替えられるバウンド キーを持つことができるようになりました。
* 様々なスケルタル コントロール関数に DLL エクスポートを追加しました。
* 効力のなくなった UJsonObject クラスを削除しました。 
* 非推奨の USkeletalControl のパラレル階層を取り除きました。 
* ボックスのクエリ パラメータを Extents から HalfExtents に名前変更しました。ボックスの境界の代わりに半径を示すようにしました。 
* Interp プロパティの任意のネスティング (例、Component.Struct.Prop) およびマチネのトラック名のリダイレクション (INI マップの MatineeTrackRedirectsで) のサポートを追加しました。
カメラのシェイク強度からの切り捨て (整数 FRotator のレガシー) を取り除きました。 


####レンダリング
* エディタで実行しない場合、ウィンドウのリサイズ時にすべてのシーンのレンダリング ターゲットは再割り当てされます。これにより、より低い解像度に変更する際にメモリを回復できます。
* ParticleParameter の分布は GPU エミッタで様々なプロパティを選択できなくなりました。以前は、選択可能でしたが機能しませんでした。
* Random および Random_Blend 補間の方法は GPU エミッタで選択できなくなりました。.以前は、選択可能でしたが機能しませんでした。
* パーティクル エミッタのエディタ LOD 値はロード時に 0 に設定されます。
* **Texture Streaming** - テクスチャをどのようにストリーミングするか (またはしないか) を決める単純なロジックで、動的テクスチャ (ブループリントを含む) に対して修正しました。
* StaticSwitchParameter マテリアル式はいずれかの入力が接続されない場合にエラーを出力するようになりました。
* velocity バッファに描画するマテリアルを細分化しました。
* **SceneTexture** マテリアル式の出力マスク値を修正しました。
* ユーザーが別個の透過処理と _BLEND_MODULATE_ を合わせて使用しようとするとマテリアル エディタに警告メッセージが表示されるようになりました。
* メッシュに変更を加えたらスタティックメッシュ エディタが物理ジオメトリをリビルドするようにし、ビューから消えないようにします。
* トライアングルがないスタティックメッシュのセクションは、マテリアルのスロットを使い切らないようになりました。既存のコンテンツはロード時に修正されます。
* HQ ライトマップと距離フィールド シャドウの iOS からのストリッピングを追加しました。
* ES2 ブルームがより幅広くなりました。
* マテリアル エディタ内でインタラクションしながらマテリアル インスタンスのプロパティ変更のブロードキャストを遅らせます。これは、編集をはるかにスムーズに行うためのものです。
* マテリアルのシェーダのコンパイルは、ディスクに保存するためのサムネイルの生成前に完了するようになりました。


####アニメーションとペルソナ
* **PHAT EDITOR**
	* PhAT: BodySetup からコリジョン設定を取り除きました。しかし、コリジョン反応の有効/無効は追加しました
	* 他のすべての設定は OwnerComponent から派生します。
	* 被破壊物に対してデフォルトのポーンのコリジョンを有効にしました。
	* PhAT のツールチップをユーザーにとってわかりやすいものにしました。
* スケルタルメッシュの頂点はインポート中に再アレンジされ、よりキャッシュ フレンドリーになりました。
*スケルトンにソケットを追加、スケルトンからソケットを削除するための元に戻す/リドゥ (取り消しの取り消し) を修正しました。
* 軸のインジケータをペルソナ ビューポートに追加しました。


#### サウンド
* 子のサウンドクラスからサウンドクラス エディタを開くと、親を含む SoundClass 階層全体が表示されます。


####オンライン
* オンライン プラットフォームの安定性と堅牢性の改善努力は進行中です。
	* その他
		* キー値のペアに対して bool の FVariantData をサポートします。
      		* Identity インターフェースに CreateUniquePlayerId 関数を追加しました。
      		* UpdateSession API はデフォルトでバックエンドで更新します。
      		* セッション設定をビットフィールドの代わりに bool にしました。
	* クラウド
		* クラウドのヘッダーに追加の更新 
      		* 列挙リストにないローカルのキャッシュ ファイルを削除しました。 
      		* ユーザー ファイルの書き込み/削除後に列挙リストを更新します。


####コア
* 外部 CPU プロファイラ サポート (AQTime, VTune, VSPerf) を再記述しました
	* コマンドライン オプションを使用して特定のプロファイラ、`-AQtime`, `-VSPerf` and `-VTune` を選択します。 
	* 最初の有効なプロファイルはデフォルトで使用されます (通常は VSPerf)。プロファイラは検索パスでその DLL が見つかる場合のみ利用できます。 
* 多くのスレート コードが中に入っている大きな関数がある場合、BEGIN_/END_SLATE_FUNCTION_BUILD_OPTIMIZATION マクロ ペアにラップし、こうした関数を含むモジュールのデベロッパのビルド時間を改善することができます。
* 最初のページで back がクリックされると、SWizard がデリゲートを供給するオプションを追加しました。
* Base ini ファイルを調整し、保存した ini ファイルに追加データを保存するのを回避する支援をするようにしました。 
* config システムが直接 UObject 参照をロードできるため、TemplateMapInfo 構造体を単純化しました。
* アセット タイプ クラスにいくつかのコメントを移動し、ツールチップ メタデータに表示されるようにしました。これは、**New Asset** メニューがクラスの説明を描画する場所です。
* ビルド マシンは EditorGameAgnostic ini からロードしたり、EditorGameAgnostic ini に保存したりしなくなりました。また、ビルド マシンはプロジェクト ファイル自動ロードしなくなりました。
*  c++ クラス ウィザードでクラスの妥当性のロジックを更新し、ゲーム モジュールでクラスの拡張を可能にします。
* パス ピッカーは Classes フォルダを表示しなくなりました。また、選択は常に単独であり、従ってパスの選択解除は認められていません。
* visual studio を開くオプションをメインフレームのファイル メニューに追加しました。
* デバッグビルドでハードウェアの調査は行われなくなりました。 
*ビデオ設定をベースとする合成ベンチマーク (ハードウェア調査の一環としてコンソール コマンド `SynthBenchmark`) を開始しました。
* 詳細モードのシーン コンポーネントを追加し、r.DetailMode でもライトがカリングされるようにしました。
* デカールのステート変更を最適化しました。 
* JsonReader はホワイトスペースの前後を無視するようになりました。
* "Error" を含むローカリゼーション文字列がある場合、国際化で収集するログ出力を調整して、自動ビルドが失敗するのを防ぐ機能を追加しました。
* 国際化マニフェストとアーカイブ ファイルをユニコードのエンコードを使用して強制的に書き込むようにしました。
* エンジンとエディタのローカリゼーション ファイルを生成するための config ファイルを追加しました。
* ChunkID info を `FAssetData`, `FPackageFileSummary`, および `FBackgroundAssetData` にインストールするストリーミングを追加しました。
	* 将来のビルドでは、これはストリーミングする `.pak` ファイルの作成と個々のアセットのインストール状態を判断するためのパッケージャによって使用されます。


####プラットフォーム
* エンジンとエディタを Mac へ移植中です。
* GScreenWidth/Height を削除し、デスクトップではないプラットフォームのデフォルトの解像度を 0x0 に設定し、現在の解像度をデバイスに照会するようにします。

