INTSourceChangelist:2618148
Title:2013年9月リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **Label** | QA_APPROVED_UE4_BUILD_2013_09 |
| **Changelist #** | 1844454 |
| **VISUAL STUDIO VERSION** | Microsoft Visual Studio 2012 バージョン 11.0.60610.01 Update 3 |
| **DIRECTX** | 2010年6月 |
[/REGION]

## 重要情報

 * 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 修正されたバグ： [2013年9月 UE4 修正されたバグ](UE4_Fixed_2013_September.xlsx)
 * 周知のバグ： [2013年9月 UE4 未解決のバグ](UE4_Bugs_2013_September.xlsx)
 

## 主要な新機能

####エディタ ツール
* **範囲外のピクセルの視覚化**
	* オブジェクトの範囲外のピクセルを視覚化するために、表示フラグを新規に追加しました。 
	![](OutofBoundsPixels04.png)

####ブループリント

* **線形カラーカーブとグラディエント エディタ**
	* 線形カラーカーブ サポートがタイムラインに追加され、ユーザーはそれらにグラディエント エディタをつけることが可能になりました (カーブの直接編集もまだサポートされています)。これらはコンテンツ ブラウザで作成あるいはインポートされたり、また直接ブループリント タイムライン エディタで作成することができます。

		![](LinearColor01.png)
	* ユーザーがデフォルトでカラーカーブを開くと、キーの追加に使用するグラディエントが表示され、色が徐々に変わる様子が視覚化されます。

		![](LinearColor02.png)

		(オパシティ ストップを追加すると)

		![](LinearColor03.png)
	* グラディエント エディタでは以下の機能を使うことができます。  
		* グラディエントの上部または下部の暗い部分をクリックすると、新規カラーまたはオパシティ ストップがそれぞれ追加され、削除を押すと選択されたストップが取り除かれます。  
		* ストップ マーカーをダブルクリックすると、ストップするためのカラーピッカー (またはオパシティ用のスライダー) が開きます。
		* 左クリックしてストップ マーカーをドラッグすると、タイムラインに沿ってストップ マーカーが移動します。

		注記:ストップ マーカーを右クリックしても、この機能を使うことができます。
	* ユーザーはカーブを手動で編集し、グラディエント エディタを非表示することもまだできます。 

* **ブループリントのサーバーおよびクライアント RPC のサポート**
	* ブループリントのサーバーおよびクライアント RPC へのサポートを追加しました。 
	* これまでは、レプリケートされたすべてのイベントは、暗示的に信頼性のないマルチキャストでした。これまでにチェックが入れられて **レプリケートされた** ものはすべて、マルチキャストとして表示されるようになりました。 
	これらのイベントに対する機能性は何も変わりません。

		![](ServerBlueprints.png)
	* 3 つの設定が C++ ネイティブ キーワードである NetMulticast、Server、Client をミラーリングします。 
		* インプリメーションの観点からすると、レプリケート用にタグ付けされたブループリント関数 / イベントと `UFUNCTION()` ヘッダにレプリケートするためにタグづけされた C++ 関数は全く同じです。
	* ブループリントがクライアントからサーバーへ通信するためには Server RPC タイプが必要です。Server RPC はサーバー上でのみ実行されます。 
	* Server RPC はイベント グラフを実行するアクタを所有するクライアントによってのみ、呼び出されます。 
	* 完全を期すため、ここで クライアント RPC を選択することもできます。クライアント RPC は所有しているクライアントへのみ送信されます。 
	* 最後に、ブループリント RPC も信頼性をチェックすることができます。これも完全を期すために行いますが、若干ちゅうちょします。 
		* デフォルトで、ブループリント RPC は信頼性がなく、ほぼいつも信頼性はありません。 
		* 信頼性をもたせるべきだと確信する場合のみ、ユーザーは関数を信頼性のあるものにすべきです。
		* コンソール変数 `net.Reliable.Debug 1` は、信頼できるネットワーク トラフィックを印刷するように設定することができます。

* **ブループリント デフォルトへのインスタンスの適用 / リセット**
	* _Blueprint Actor_ インスタンスを選択すると、**レベル エディタ** の **[Details (詳細)]** タブの **[Blueprint]** セクションの **[Edit (編集)]** ボタンの隣に、新しく **[Apply (適用)]** ボタンと **[Reset (リセット)]** ボタンの 2 つができます。 
		* インスタンスを変更してデフォルトと異なる状態にすると、**[Apply (適用)]** ボタンが有効化されます。**[Apply (適用)]** をクリックしてインスタンスの変更を _Blueprint_ デフォルトに反映させると、これらのインスタンスがそれ自体 _Blueprint_ デフォルトの値から変化しない場合、 _Blueprint_ の他のすべてのインスタンスに代わりに継承されます。 
		* 同様に、**[Reset]** ボタンをクリックすると、選択されたインスタンスが_Blueprint_ デフォルトにリバートされます。

		![](ApplyResetBlueprintDefaults.png)

* **HUD のマウス Hit Box**
	* HUD に特別な _Hit Boxes_ を描画できるようになり、マウスと単純なインタラクションを持つことができる HUD とメニューのビルドが可能になります。

		![](MouseHitBoxes.png)

* **_Auto Insert_ ノード**
	* ピンを引き出してノードを追加すると、既存のチェーンに挿入されるようになりました。

		![](AutoInsertNodes.png)

* **Add Component ドロップダウンの改善**
	* 検索ボックス、 _ワンクリック_ での追加、アイコン、カテゴリを追加しました。

		![](AddComponentDropdown.png)             

* **アクタ リファレンスの変更**
	* _Level ブループリント_ のアクタ リファレンスを、現在選択されているものに簡単に変更することができるようになりました。

		![](ChangeActorReference.png)

* **複数選択したアクタの操作がしやすくなりました**
	* Kismet 1 の機能と似ていて、1 つの _コール関数_ ノードを接続された複数のアクタ リファレンスで追加します。

		![](BetterHandlingforMultipleSelectedActors.png)

* **新規のライブラリ関数** 
	* Blueprint Library 関数を追加しました！

		![](NewLibraryFunctions.png)

	[REGION:note]
	中には非常に負荷の高い関数もあるので、使用する際にはパフォーマンスに十分気をつけてください。
	[/REGION]

* **アクタ外の Latent 関数**
	* Latent 関数 (Delay など) はどんな _ブループリント_ においても使用することができます！

		![](LatentFunctionsOutsideActors.png)

* **インターフェース編集モード**
	* 必要なものだけ含まれるようにインターフェースを編集する特別なモードがあります。**Interface** モードといいます。
 
		![](InterfaceEditorMode.png)

* **作成したコンポーネントはどこにでもアタッチ**
	* 作成した _コンポーネント_ をドラッグ＆ドロップして、ネイディブ シーンのコンポーネント階層のどこにでもアタッチすることができるようになりました。 
	* さらに、子 _ブループリント_ に作成した _コンポーネント_ も、親 _ブループリント_ から継承した SceneComponent 階層のどこにでもアタッチすることができます。

		![](AttachCreatedComponentsAnywhere.png)

* **Default Scene Root Component**
	* _SceneComponent_ なしに _ブループリント_ をインスタンス化すると、これまではこのコンポーネントが暗黙的に作成されました。 
	* ユーザーが Actor ベースの _ブループリント_ を作成すると、 _SceneComponents_ がまだない場合 **Components** モードリスト内に表示されるようになるので、それにデフォルトを設定することができます。 

		![](DefaultSceneRoot.png)
	* 追加した _SceneComponent_ は新規 _コンポーネント_ に対してスワップアウトされて、新規ルートになります。

* **ノード用のショートカット**
	* キーを押したまま、ノードクリックすれば、ノードを素早く配置できます！

		![](ShortcutsforNodes.png)

	* 現在あるショートカットは以下の通りです。`UserSettings.ini` ファイルに更に追加可能です。 _ブループリント_ の **Keybindings** インターフェースが機能するようになりました！

		| ノード | 目的 |
		| --- | --- |
		| **ReceiveBeginPlay** | P |
		| **DoN** |	N |
		| **DoOnce** | O |
		| **Delay** | D |
		| **Branch** | B |
		| **Sequence** | S |
		| **Gate** | G |
		| **MultiGate** | M |
		| **ForLoop** | F |


* **Transform プロパティ上の 3D ウィジェット**

	* Vector プロパティのみならず Transform プロパティ用にもワールド内にウィジェットを作成できるようになったので、回転＆スケールをインタラクティブに編集できます。

		![](3dwidgetsonTransforms.png)


## 新規追加

#### エディタとツール
* マウス制御を使用したり解除する際に、**Play In Editor** ビューポートにオプションの通知ラベルが付きました。
	* 以下が [Preference (環境設定)] セクションの新項目です。**[Editor Settings (エディタ設定)] > Play In > Play in Editor**
	* **[Show Mouse Control Label (マウスコントロールラベルを表示)]** を有効にします。
	* ドロップダウン メニュー **[Mouse Control Label Position (マウスコントロールラベル位置)]** からビューポート内の好きな位置を選択します。
* サポートされているアセットに対して、アセットメニューから再インポート オプションが利用できるようになりました。
* コンテンツを保存するウィンドウで、Diff オプションがアセットに使用できるようになりました。
* 空のマップには、デフォルトの光源とプレイヤーの開始地点が含まれています。
* レベルをを削除すると、その状況に応じた警告メッセージが出され、抑制可能になりました。
* アクタの選択が **Play In Editor**/**Simulate In Editor** セッションで実施され、終了するとエディタへ戻るようになりました。
* アセット エディタ プラグイン拡張ポイントが全て状況に応じて変化し、編集中のアセットがどれかを意識するようになりました。
* **被破壊メッシュエディタ**:FBX ファイルを深度 1 被破壊性チャンクとしてインポートします。
* 線形カラー カーブを使用する場合に、線形カラー カーブへのサポートを追加し、グラディエントの分岐エディタをカーブ エディタに追加しました。  
* **スレート** 
	* テキスト スタイルを `STableViewBase` に追加し、デフォルト スタイルを更新し、 `FTableRowBrushes` は `FTableRowStyles` になりました。
	* コンテンツのない `SButton` は、スタイル イメージに応じたサイズになります。
* 変形とカメラの速度制御が、エディタが有効になったビューポート内に表示される新規ツールバーへ移動しました。   


#### ブループリント
* `ExpandEnumAsExecs` メタデータへのサポートを追加しました。これにより、関数列挙型変数パラメータを複数の実行入力として公開できるようになります。
* **GetAllActorsOfClass**、**GetActorArrayAverageLocation**、**GetActorArrayBounds**、**MoveActorToActor** を `GameplayStatics` に追加しました。
* コンポーネントの位置 / 回転を徐々に補間するために **MoveComponentTo** lLatent (潜行) 関数を追加しました。
* _ブループリント_ で `FText` のサポートを追加しました。
* **GetVectorArrayAverage** 、 **GetMinElement** 、 **GetMaxElement** を `MathLibrary` に追加しました。
* **RotateVector** 関数と **UnrotateVector** 関数をローテーターに追加しました。 
* 編集中 コンポーネントがプレビュー ウィンドウでリアルタイムに更新されるようになりました (レベル エディタと一致して)。
* ブループリント アクタ インスタンスへの変更がそのアセットの _ブループリント_ のデフォルトへ適用され、さらに _ブループリント_ アクタ インスタンスを _ブループリント_ のデフォルトに戻してリセットする機能を追加しました。
* 変形デフォルト、ネイティブまたは継承されたコンポーネント ノードのいずれかを親にもつ、ユーザーが作成したルート コンポーネント ノードの編集が可能になりました。
* **Play In Editor**/**Simulate In Editor** セッションが有効になっている間は _ブループリント_ のデフォルトの変更が可能になり、変更はセッションのアクタへ継承されます。
* **ブループリント エディタ** の **Components** モードの **[Details (詳細)]** ビューで変更のデフォルトのエクスポーズおよび編集がサポートされるようになりました。
* _ブループリント_ を _ブループリント_ インスタンスにアタッチできるようになりました。
* `bTraceComplexOnMove` を `PrimitiveComponent` に追加して、プリミティブを一度に移動させるための複雑なジオメトリ コリジョンを可能にしました。
* K2Nodes は固有の拡張ステップを定義し、使用するノード ハンドラを指定して、`KismetCompiler.cpp` を変更しなくてもプラグインとゲーム専用モジュールがカスタム仕様のノードを定義できるようになりました。
* 新しい **OpenWorld** _Level ブループリント_ の呼び出し可能関数で別のマップを開くことができます。

 
#### ゲームプレイとフレームワーク
* AI ロジック テクニックの基本クラスとして `UBrainComponent` を実装しました。
* 完了した移動リクエスト ID を結果と一緒に送信するために, `AIController` の "move finished" マルチキャスト デリゲートを拡張しました。
* `StaticMesh` が `AssetUserData` オブジェクトをサポートするようになり、エンジンを修正せずにプロジェクト固有のデータを格納できるようになりました。
* `FTransform` プロパティ上の 3D ウィジェットに対するサポートを追加しました。 
	* スクリーン空間で青いウィジェットダイヤモンドを固定のサイズにしました。
* シンプルにゲームを保存できるシステムを追加しました。ワールドのステート全体のキャプチャ用には作成されていません。 _ブループリント_ で利用可能です。
* スクリーンショットがビデオのように通知を表示するようになりました。
* Map Check がサマリを印刷するようになったので、ユーザーは完了したことが分かります。
* `PlayerController` と `GameInfo` が _ブループリント_ の [New Asset (新規アセット)] ダイアログのデフォルト タイプになりました。
* **ルート モーション** 
	* AnimMontages で提供されているルート モーションへのサポートが追加されました。
	* シミュレートされたプロキシがネットワーク化されました。位置修正、スムーズなエラー修正、バッファしないスムーズなアニメーションがサポートされます。 
	* クライアント側で予測と修正をする、クライアン トサーバー ネットワークの構想を実装しました。
		* ルート モーション時に必ず同じタイミングが使われるように、物理は物理を実行する前にアニメーション `TickPose()` を呼び出します。 
		* サーバー側では、クライアント側のタイミングがステート、通知、イベントに使われるようにするために `TickPose()` が `MoveAutonomous` から呼び出されます。 
* **プレイヤー移動のネットワーキング**
	* クライアント側はサーバー側と同じ方法で DeltaTime を計算するので、両者間の物理シミュレーションは正確です。さらに、クライアント側の TimeStamp は高精度を保つために一定の間隔でリセットされます。シミュレーションでは徐々にエラーが蓄積され、位置修正と使用する帯域幅の数が増えます。 
	* サーバー側の 1 つのフレーム内で複数の位置修正が必要な場合は、古いものではなく最新のものを送ります。 
* リプリケートされたイベントを使用するように`ReplicatedMovement` をリファクタリングしました。変更の有無を確認するため、静的変数を取り除きました。 
* ポーンの移動コリジョンに無視されるようにアクタの追加 / 削除のための `APawn::MoveIgnoreActorAdd` と `APawn::MoveIgnoreActorRemove` を追加しました。 
* `UCharacterMovementComponent::InitCollisionParams` が `MoveIgnoreActors` リストを取り入れるようになりました。
* Package Project がメインの [File] メニューのオプションになりました。 Windows のみがこのリリースに対応しています。
* **設定 UI** 
	* 新規セクションが追加されました。
	* ほとんどのセクションが Reset-To-Default をサポートするようになりました。
* `FUniqueNetIdRepl` というオンライン プラットフォーム FUniqueNetId にラッパーを追加し、 RPC/replication 経由のユニークな ID のトランスポートに使います。
* シリアライズ化はすべて 現状の `ExportTextItem` (ネットワーク/ファイル) を実行するので、`obj dump` と `displayall` が使用できます。
* `AttachRootComponentToActor` がクライアント側にアタッチメントをレプリケートし、アタッチメント中は移動のシミュレーションを停止するようになりました。
* ブループリント専用のゲームにおいてレプリケーション制御を強めるために、`bAlwaysRelevant` をブループリントで使えるようにしました。
* UDKRemote を UE4 に統合し、 iOS SDK 6.1 でコンパイルするために更新しました。
* 正投影ゲームプレイ カメラを改善しました。
	* `-WORLD_MAX` の代わりにカメラ位置をニアプレーンとして使えるように、正投影ゲームプレイ カメラを更新しました。
	* 正投影ゲームプレイ カメラの `OrthoZoom` を `OrthoWidth` (アンリアル単位での横サイズ) に差し替えました。 
* FCanvasBorderItem はタイル化されたフレームとタイル化されたバックグラウンドで 3x3 グリッド枠を描写することが可能なので、フレームとバックグラウンドのスケーリングをサポートします。 
	* タイリングの計算にシェーダーを使わないので、タイル化されたアセットには別のテクスチャが必要です。 
* 所有するアクタとその設定 / 破棄を決定するネットコード群をリファクタリングしました。


#### レンダリング
* Visualizetexture/vis がさらに多くのアイテムをフィルタし、ソート処理が遅くなりました ("vis ?")。
* 複数の拡張性コンソール変数を追加しました。
* DX11 と OpenGL RHI 用の Timer クエリを実装しました。
* 最も基本的な関数 (r.SSSSS 1) だけですが、スクリーン空間サブサーフェス スキャタリングを追加しました。
* GPUBenchmark が SynthBenchmark (既知の問題: 非常に遅い GPU 上だと対有無アウトする) の一部になりました。
* スクリーン空間のライトシャフト
	* ライトシャフトには、フォグ / 大気のみ影響を与えるオクルージョンと物理ベースではないブルームの 2 種類があります。
* **VisualizeOutOfBoundsPixels** 表示フラグを追加し、ストリップされたパターン内の領域外にあるピクセルに色をつけます。
* リフレクション環境キューブマップが DerivedDataCache にキャッシュされるので、取り込む度に再キャプチャする必要はありません。
* キューブマップ データがパッケージにクックされます。
	* 残念ながら、派生データは GPU でのみ生成可能なのでクック中は生成できないため、失敗する場合もあります。
* 可動透過間接ライティング キャッシュ上のディフューズ GI は、オブジェクトごとに単一の値を補間します。
* 透過光モード _TLM_Surface_ は、間接スペキュラに適用された直近のリフレクション キャプチャ キューブマップを取得します。
* UnrealBuildTool により、複数のインスタンスが別々のブランチを正しくビルドできるようになりました。
	* これまでは、UnrealBuildTool の新規インスタンスは、実行中のインスタンスが完了するまでブロックされていましたが、別のブランチ (異なる UE4 ルート フォルダ パスの) にあれば、複数のインスタンスの実行が可能になりました。
* **Film Post**
	* トーンマッパを変更し、ポストプロセス ボリュームにフィルムのポストプロセス制御を新しく追加します。
* `r.BloomQuality` コンソール変数を追加しました。
	* ブルームのポストプロセス操作に必要とされるポストプロセス パス数に増減がありました。


#### アニメーション
* 1 Parameter で新しいタイプの _BlendSpace_ を作成しました (_BlendSpace1D_ に対して、オリジナルの _BlendSpace_ で作成したものは 2D)。
* Skeleton Animation Notifies を表示 / 編集するために、新規タブ **[Persona]** を追加しました。
* Play Slot Node Animation
	* スロットノード上で再生するためにモンタージュを作成する必要がなくなりました。スロットノード上での再生には、 _AnimSequence_ または _AnimComposite_ を使用すればいいだけです。 


#### オーディオ
* ステートマシーン グラフとサウンドキューにコメントボックスを追加しました。
* Enveloper Sound ノードにより、ビジュアル カーブの編集と Curve Float アセットの使用が可能になりました。


#### コア
* Visual Studio 2012 で 32-bit ゲームをコンパイルできるようになりました。 
* FText メッセージ フォーマット機能が、引数の配列をサポートするようになりました。
* FText メッセージ フォーマット機能が、指定した引数をサポートするようになりました。IE: `"{PlayerScore}"`
* Linux プラットフォームへのサポートが追加されました (ゲームサーバーのみ)。
* プロジェクトのモジュールへのモジュール取り込み順序の決定に、UProject ファイルが使用されるようになりました。
	* 既存プロジェクトは以前として、元の時間で本来のゲーム モジュールを取り込みますが、起動中にプロジェクトのモジュールを異なる時間で取り込めるオプションができました。
	* `.upluigin` ファイル フォーマットは `.uplugin` ファイル フォーマットと非常によく似ています。 Module Descriptors 上で `LoadingPhase` プロパティを使って完了します。
	* `.uproject` ファイル [プラグイン](https://udn.unrealengine.com/docs/ue4/INT/Programming/Plugins/index.html) を参考にしてください。
	* `.uproject` ファイルがランタイム時に必要となり、Pak 形式のファイルに含まれるようになりました。
* UnrealBuildTool への GEXF グラフの出力を実装しました。 
	* 新しい `-graph` オプションにより、ActionGraph.gexf へビルド依存図式が出力されます。 
	* (このファイルは、エンジンの中間 BuildData サブディレクトリに保存されます) 
	* これにより、デフォルトで C++ インクルード ファイル依存ネットワークも出力されます。 
	* これらのファイルは Gephi にロードすることが可能です。ロードすると、グラフ ネットワークが興味深くビジュアル化されます。 
* `UE4PrereqSetup.msi` インストーラーを追加しました。
	* UE4Redist.exe の代わりに UE4 の実行に必要な前提条件をインストールしました。
* ビヘイビア ツリーをゲームからエンジンに移動し、ライセンシーが利用できるようになりました。
* ビヘイビア ツリーの基本エディタをエディタに追加しました。
* ナビゲーションをデバッグする目的で、コリジョン ジオメトリを (ビューの遷移ポイントから) OBJ ファイルへエクスポートするために、ナビゲーション データ エクスポータ (`ExportNavigation` コンソール コマンド) をエンジンに追加しました。


#### オンライン
* http 要求 / 応答ペアの IOS 実装を追加しました。
* Online Achievements Interface を作成し、Game Center を使って IOS の実装を追加しました。 
* 成績の実装を提供するためにすべての OSS が使用する `IOnlineAchievements` インターフェースを作成しました。
	* 既存するすべての OnlineSubSystem に `OnlineSubSystem::GetAchievementsInterface` を追加しました。今のところ、IOS 以外はすべて NULL を返します。 
* アチーブメントのオンラインテストのために `TestAchievementsInterface` を追加しました。これにより、アチーブメントがゲットされ、説明がゲットされ、アチーブメントを書き出し、ロック解除されたアチーブメントが処理されます。  
* Game Center セッションのサポートを追加しました。
* Game Center の友達のサポートを追加しました。 
* Game Center のリーダーボードのサポートを追加しました。 
* Game Center の ID / プロフィールのサポートを追加しました。
* マイクロトランザクション用のプラットフォームを提供するために、 Online Subsystems に Store インターフェースを追加しました。
* App 購入サポートに IOS を追加しました。
* 検索結果を与える接続をするために `GetResolvedConnectString` を追加しました。
* `CreatePlayerUniqueId` を変更して、安全のために size パラメータが含まれました。



## 更新ノート

#### エディタとツール
* **Play In Editor** ビューポートはプレイ中のエディタからすぐにではなく、最初のクリックでフォーカスするようになりました。
	* 新規リファレンス ページが **[Editor Settings] > [Play In] > [Play in Editor]** に追加されました。
	* マウス コントロールをすぐにオンにするには **Game Gets Mouse Control** を有効にします。
* デバイス上で起動するための基本的な機能を実装しなおしているので、 **[Launch On]** ボタンは現在非表示になっています。
* ブランチ別にミューテックスに名前をつけて、複数のブランチを同時に実行できるようにしました。 
* **スレート**
	* **Slate** コンテキスト ウィンドウの終了順序を変更して、メニュー スタック型ではないウィンドウが破棄される前に入力フォーカスのハンドオーバーを行うようになりました。 
	* `InArgs._Style` が有効な場合、`SInlineEditableTextBlock` を変更して `InArgs._Style` から `SEditableTextBox` フォントをオーバーライドして、できるだけ Styles が一貫性を保てるようになりました。
	* ロックされたレベルへアクタを追加する際のユーザー通知を **Slate** UI 通知に変換しました。 
* **スタティック メッシュ エディタ** でのソケット作成にアンドゥ / リドゥを使用できるようになりました。
* **マチネ** でトラック名とグループ名の変更にアンドゥ / リドゥを使用できるようになりました。
* `LocalizeUnrealEd` コールを `LOCTEXT`/`NSLOCTEXT` に変更し、`UE_LOG` などのローカリゼーション手法が使われている様々なコールをリファクタリングしました。
* **[Grid]** メニュー オプションを **[Advanced (詳細)]** からメインの **[Show (表示)]** メニューに移動しました。
* LOD (Level of Detail) ポップアップの [OK] メッセージを通知に変更しました。
* Copy/paste of collision in **スタティック メッシュ エディタ** でコピー / ペーストしたコリジョンが、ビューポートに正しく反映されるようになりました。
* レベルを追加すると、最後に追加したフォルダが記憶されるようになりました。
* Hide UI トグルをビューポートから [View (表示)] ツールバーへ移動しました。
* **[Select all with same Archetype (同じ Archetype をすべて選択)]** メニュー オプションを削除しました。
* **レベル エディタ** ビューポートのアクタをダブルクリックすると、カメラはその選択対象をフォーカスします。
* アクタ名がブランクだとエラー通知が表示されます。
* アンドゥ / リドゥ機能が **マテリアル インスタンス エディタ** に追加されました。
* [**PhAT** Body Physics Type] メニュー オプションがラジオボタンに変更されました。
* `SWindow` は、ウィンドウ サイズではなく希望するクライアントの領域サイズを構造パラメータとして受け取るようになりました。


#### ブループリント
* ヘルス値をポーンから削除し、デス (機能停止) をエンジンから削除しました。
	* ゲームがヘルス値変数を独自の Pawn クラスへコピーする必要があります。
	* ヘルス値とデスを使う全てのサンプル ゲーム (QAGame, ShooterGame ) は、それぞれのヘルス値 / デスを実装するように更新されました。
	* 関連するイベントが削除されました (OnDeath、 OnPlayDying)。ゲームがこれらを単純にコピーする場合もあります。
* ブループリント用に C++ で作成されたキャラクター移動入力バインディングを削除しました。
	* 今までは、キャラクター上のブール変数 bAddDefaultMovementBindingsForBlueprint によりこれらはデフォルトで有効になっていました。
	* ブループリントは、それぞれ独自のバインディングを追加しなければならなくなりました (ThirdPersonTemplate_BP プロジェクトでサンプルをご覧ください)。
* OnNodeCommentTextCommitted で大文字小文字を区別するように文字列比較を変更したので、ノード コメントのテキストの編集や修正に大文字と小文字を使用できます。
* ブループリント エディタの Variable Get/Set グラフ ノードに変数を表示する機能を追加しました。
* ブループリント エディタのコンテンツを移動せずにコメントを移動できるように、モディファイアのキーステート (L/R Shift) を追加しました。
* Filemenu Addtofavourites UI のツールチップ テキストを「Add to favourite files」ではなく「add to favourites levels」に修正しました。
* メッセージ ログ エントリ アイコンと一致するようにメッセージ ログ フィルタのボタンを変更しました。
* ShapeComponent :シェイプ タイプを元にする場合、不均等のスケーリングをサポートします。 
* DrawDebug 関数がサポートする時間のオプションが増えました (DrawOneFrame 、DrawDuration、DrawPersistent) 


#### ゲームプレイとフレームワーク
* シンプルな MoveToLocation 関数と MoveToActor 関数が意味のある値を返すように更新しました。
* DynamicBlockingVolume DynamicPhysicsVolume と DynamicTriggerVolume を削除しました。
* デザイナが見やすいように、幾つかのランタイム時の警告を 'Message Log' に移動しました。
* HUD に ReceiveHitBoxRelease を追加し、 ReceiveHitBoxClick から InEventType を削除しました。
* 機能探知のターゲット プラットフォーム を単純化しました。`ITargetPlatform::SupportsFeature()` を参照してください。
* 設定 API が若干変更されました。必要な編王については既存の使用方法を参照してください。
* ネットワーク上でのメッセージを有効にするためには、追って通知があるまで `-Messaging` コマンドライン スイッチが必要になります。
* `AActor::Owner` が private 変数になりました。access/set には Get/SetOwner を使います。
* ゲームパッド キーのクリーンアップ
	* `EKeys` 列挙型変数で定義されているゲームパッド キーはく XboxTypeS_ ではなく Gamepad_ と呼ばれるようになりました。
	* XBox 特有のキーである `A`、 `B`、 `X`、 `Y`、 `Start`、 `Back` が一般的な名前に変わって、それぞれ `FaceButton_Bottom`、 `FaceButton_Right`、 `FaceButton_Left`、 `FaceButton_Top`、 `Special_Right`、 `Special_Left` となりました。
	* Epic Labs 機能により、ゲームパッドのコンソール固有のラベルがドロップダウンと _ブループリント_ ラベルで表示されます。
	* ゲームパッド サムスティック用のバーチャルな上下左右のイベントが結合されました。
* `FObjectFinder` はクラス コンストラクタ外では使用できなくなりました。他のコードでの使用を試みると、アサートされる結果になります。
* **物理**
	* コリジョン トレース タイプを [オブジェクト タイプ] と [トレース タイプ] に分けました。オブジェクト タイプは、これまでの `MovementChannel` ( Object Type という名前に変更されました) として使用できるようになりました。
		* カスタム仕様のチャンネルの場合
			* そのタイプをオブジェクトの Object Type として使用できるのであれば、それをオブジェクト タイプとして示さなければなりません。
			* そのタイプがコードでトレースに使用される場合、次の例のように Trace Type として示します。 

			+DefaultChannelResponses=(Channel=ECC_GameTraceChannel1, Name=Weapon, bTraceType=true)

		* この変更により、"Trace for objects" API がサポートされるようになりました。これにより、"所定のオブジェクト タイプ" をもつオブジェクトの検索ができるようになります。 
		* オブジェクトが移動したり衝突すると、オブジェクト タイプに対する応答が使用されます。


#### レンダリング
* Material Property **RefractionBias** が **RefractionDepthBias** という名前になりました。


#### アニメーション
* _SingleAnimSkeletalComponent_ が削除されました。_SkeletalMeshComponent_ を使って AnimationMode と同じ事ができるようになりました。
* _SkeletalPhysicsActor_ が削除されました。_SkeletalActor_ で同じ事ができるようになりました。 
* SlaveComponent が **マチネ** と **AnimTrack** でサポートされました。


#### コア
* プロパティへ書き込みたくない場合に保存した config ファイル (`.ini`) に保存できるように`SaveConfig` 機能を更新しました。
* 初期化されていないオブジェクトを挿入するための `TArray` の int32 コンストラクタは、使い方を間違えやすいので削除しました。  
	* 代わりに、以下の明示的な形を使用します。

			TArray<int> Vals;
			Vals.AddUninitialized(Num);

* Globalization の名前をより正確に *Internationalization へ変更しました。
	* これらのクラスへのすべてのリファレンスとコンフィギュレーション セクションを更新しました。
* `FText` メッセージのフォーマット機能は、コメント化されたパラメータをサポートしなくなりました。IE: `"{0?PlayerScore}"`
	* その代わりに、指定されたパラメータを使用します。IE: `"{PlayerScore}"`
* `EAxis` 列挙型変数が `EAxisList::Type` という名前に変更されました。この変更を反映させるには、クライアント コードを変更する必要があります。
* `FMatrix`/`FTransform` 軸関数は軸の特定に整数ではなくEAxisList::Type を使用するようになりました。全ての使用を変更する必要があります。
* Visual Studio 2012 がデフォルトで使用できるようになりました (2010 のサポートも継続します)。
	* すべてのゲームとプログラムで Visual C++ 11 コンパイラが使用されるようになりました。
	* UE4 ソリューションとプロジェクト ファイルは、デフォルトで 2012 ネイティブのフォーマットで生成されるようになりました。
	* 必要であれば、 Visual Studio 2010 も引き続き使用できます (今のところ！)。
		* `UEBuildWindows.cs` に `WindowsPlatform.Compiler = WindowsCompiler.VisualStudio2010` を設定します。 
		* `-2012` を `GenerateProjectFiles.bat` に渡します。
	* VS 2012 の変更に対して、サードパーティの *.Build.cs ファイルを更新する必要がある場合があります。
		* `bUseVisualCPlusPlus11` が UnrealBuildTool の `WindowsPlatform.Compiler` に変更されました。
* Visual Studio プロジェクト レイアウトが新しくなりました。
	* 1 つのゲームに対しプロジェクトが 1 つだけになりました。 
	* Build & Run プロジェクトを取り除きました。Fake ターゲット プロジェクトを取り除きました。 
	* [Solution Configuration] ドロップダウンを使って _ターゲットのタイプ_ を選択できるようになりました。 
		* クックされたゲームあるいはプログラムのビルドと実行には、Debug or Development (サフィックスなし) を使います。 
	* プロジェクト ファイル生成と、通常 UBT ビルドの実行が速くなりました！ 
	* デフォルトにすべてのプラットフォームは含まれず、Win64 か Mac のいずれかのみ取得します。 
	* 他のプラットフォームをビルドする必要がある場合は、新規の`GenerateProjectFiles_AllPlatforms.bat` ファイルを使います。 
	* ソリューションは上位 4 つのフォルダになりました。 
	* コードはすべて、ゲームのプロジェクトの下にディスク上と同じように整理されて置かれるようになりました。 
	* その他の注記 
	* シッピングとテスト コンフィギュレーションがデフォルトで削除されました。これらを取得するためには `-ShippingConfigs` を渡します。 
	* Rocket ターゲットは、デフォルトでプロジェクト ファイルに含まれなくなりました。これらを取得するためには、 `-RocketTargets` を渡します。 
	* Non-English UDN ファイルがプロジェクト ファイルから削除されました。これらを取得するためには、'-AllLanguages' を渡します。 
	* Visual Studio を終了するたびに、 `UE4.sln` の上書きを求められなくなりました。 
	* 必要に応じて、 `-NoIntelliSense` での IntelliSense 生成をスキップできるようになりました。 
	* WinRT は UBT に対して _デスクトップ プラットフォーム_ とみなされなくなりました。 
	* エディタの Shipping config と Test config は UE4 ではサポートされていないので、UI から削除しました。 
* 削除されたアクタ上の SceneComponents にアタッチされている SceneComponents のみをデタッチするように DestroyActor を変更しました。 
* コード ブロック、スパン、クオートの変数とメタデータ参照を無視したままにするように、マークダウン プロセスを変更しました。 
* PUBLISH タグの処理に使用する regex を改善して、タグの後の同じ行に空白文字を入れられるようになりました。 
* ゲームタイプのリファクタリング
	* ゲーム関連の幾つかの基本クラスを名前変更しました。
		* GameInfo は GameMode になりました。
		* GameReplicationInfo は GameState になりました。
		* PlayerReplicationInfo は PlayerState になりました。
	* ReplicationInfo 基本クラスは削除されました。
	* リダイレクタが導入され、これらのクラスを使用するとすべてシームレスで更新されるようになります。
* CRU で発生すべきでない (実際は発生している) エラーに対し、例外チェックを追加しました。 
* 不明瞭なクラッシュを見つけやすいように、ドメイン例外ハンドラを追加しました。
* **UE4Redist が UE4PrereqSetup に置き換えられました**
	* Windows プラットフォームでの UE4 実行の必須条件をインストールすｒために、新しい `UE4PrereqSetup.msi` プログラムを使用するようになりました。 `UE4Redist.exe` は使用しなくなり、P4 から削除されました。  
	* UE4PrereqSetup は現在 Perforce の `//depot/UE4/Engine/Extras/Redist/en-us/UE4PrereqSetup.msi` にあります。
	* UE4PrereqSetup をインストールする必要は全くありません。他のプログラムと同様、削除したい場合はコントロール パネルを使ってください。
 

#### オンライン
* Online Stats を更新して、統計情報の Leaderboard (成績表) の一部を独自のクラスへ抽出しました。 
* **Base OnlineSubSystem**
	* OnlineSubSystem ログのプレフィックスを追加しました。 
	* アイデンティティ インターフェイスへのプロファイル インターフェースをリファクタリングしました。 
* **Facebook OnlineSubSystem**
	* PC 用に Facebook を初めて実装しました。 
	* ブラウザ ウィンドウ経由でアクセス トークン取得のログインができるようになりました。 
	* 有効な場合、トークンを使って基本/自分の情報をリクエストできます。 
	* Facebook PC OnlineSubSystem 友達追加機能の実装しました。 
* **MCP OnlineSubSystem**
	* アカウント マッピング要求以外のすべてのものに、同じユーザー認証方法を使用します。 
	* サーバー権限をクライアントとサーバーの設定に分類しました。 
	* すべてのホスト (リッスン / デディケイテッド サーバー) が、 Mcp リクエストを行う代わりに認証方法の代わりににサービス権限を強制的に使用するようにしました。 
	* 同じ認証方法で同時に行ったログインを検出するために使用する起動 API を追加しました。 
	* 外部のアカウント情報をユーザーに問い合わせるために必要な OnlineSubSystem MCP 機能を追加しました。 
		* Epic のアカウントから名前を表示するために使用することができます。 
	* 自動ログインをすると、ID と認証チケットが与えられた、キャッシュされたユーザー アカウントが作成されます。 
	* Epic のアカウント情報を取得するための `QUERYACCOUNT` が追加されました。 
	* `ACCOUNTCREATION` exe を `CREATEACCOUNT` に変更しました。 
	* ダウンロードした mcp ファイルのディスクへのキャッシュ処理を無効にするconfig オプションを追加しました。 
	* mcp config セクションをコマンドライン `-MCPCONFIG=<name> ` でオーバーライドしました。
* **Http**
	* WinInet
		* 既に送信途中にあるリクエストを完了させるための WinInet の `CancelRequest` を実装しました。 
		* リクエストをキャンセルしても、全ての completion デリゲートを呼び出します。 
		* 利用できる場合は、キープアライブ機能を使って、接続を開いた状態のままにします。 


## 今後の追加事項と継続事項

#### エディタとツール
* エディタからゲームへの切り替え時にうっかり相互作用してしまわないように、 **Play In Editor** ビューポートのウィンドウ内をクリックしても、1 回目はゲームへ継承しません。
* BSP サーフェス reslove にダブルバッファリングが使われるようになりました。
* タブが付けられたアセットエディタを使うために **Curve Editor** を更新しました。
* 他のアプリの全面にポップアップ表示されないように、通知をリバートしました。
* ユーザーが使いやすいように、ロードのエラーメッセージのログ出力を改善しました。
* マップチェックは、ライトがビルドされるたびにログをポップアップ表示するのではなく、通知を追加しました。
* Pr**Play In Editor**/**Simulate In Editor**モードでアクタを選択する際にクラッシュしないようにしました。
* プロジェクトがソール管理下にない場合、共有のコレクションは作成することができません。
* NULL ポストプロセス カメラ コンポーネント上でクラッシュが起こらないようにしました。
* 使用が許可されていないキャラクターを更新して、プロジェクトのパス名の制限が緩くなるようにしました。
* アクタのドラッグ / ドロップが、ドラッグではなくドロップでのみ選択されるようになりました。
* 追加されたパッケージがコンテキスト メニューのパス・ビュー・コンテキスト・メニューにより、ソース コントロールに追加される前に保存されるようになりました。
	* これにより、Perforce でのファイルの破壊を防ぐことができます。 
* ストライプの背景を削除するために **Level Browser** カラーピッカーを親にしました。
* ドラッグ＆ドロップで BSP に適用しているマテリアルがビューポートのフォーカスを正しくリストアするようになりました。
* ウィジェット モードの切り替え時には、必ず HitProxy がリフレッシュされるようにしました。
* マテリアル エディタのアンドゥ / リドゥ操作は 2 回実行しません。
* **Map Check** がライトのリビルドが必要だということを間違って報告をしないようにしました。
* シャットダウン時にディレクトリ ウォッチャーのクラッシュが起こらないようにしました。
* 読みやすさ / ユーザビリティを改善しやすいように、メッセージログを少し変更しました。
* ビデオ キャプチャの動作が止まらなくなったことを確認しました。
* サポート対象のすべてのツールバー/メニューバーに対して拡張デリゲートを追加しました。
* 選択を変更すると、、正しい親がプロジェクト ウィザードに表示されるようになりました。
* シャットダウンが既に実行されていると、タブの終了が承認されます。
* null ノードが見つけやすいように、ensure 条件を追加しました。
* 無効化された **Context Sensitive** を含むノードからドラッグすると、すべての可能なアクションが表示されます。
* 情報が複製でないことを表すために、 **Map Check** ドロップダウンがその代わりにワールドの名前を表示するようになりました。
* **Save Layout** がユーザー設定をディスクに書き込むようになりました。
* **Matinee** コンボボックスのスペース使用が減りました。
* **レベル エディタ** の **ツールバー** がビューポート上で表示されるようになりました。
* デフォルトのライトは、少しだけ視界が遮られているだけで、オリジナルに近くなりました。
* コンテキスト メニューにおけるデタッチの扱い方を修正しました。 
* プロパティ スライダーの使用中に通知のスパムが起こらないようになりました。
* 記録をアンドゥして動画を実行してもクラッシュしないようになりました。
* **Buffer Visualization** コマンドがなければ、エディタが継続できるようになりました。
* 相当する _SkeletalMesh_ の再インポート時に、 _PhysicalAssets_ の `DefaultSkeletalMesh` メンバがリストアされます。
* レベルにアセットをドラッグすると、非表示のアクタが考慮されるようになりました。
* **Matinee** ビューポートが `Tick` が呼び出されるように `IsVisible()` を使用するようになりました。
* レベルを削除する時は null グループ ポインタを防ぎます。
* **[New Level]** ダイアログのスクロール バーがサムネイルにオーバーラップしなくなりました。
* `Source` フォルダがないと、 **Generate Visual Studio Files** を早めに出してユーザーに警告します。
* **Crash Reporter** が UE4 のクラッシュに対するチェンジリストとコールスタックを正しく報告するようになりました。
* デフォルトのマップ設定名を変更し、正しく保存するようになりました。
* Template マップがエディタに自動的にロードされるようになり、不注意による上書きを防ぐための起動時の保存が必要なくなりました。
* ドロップダウン メニューが大きすぎてアンカー ウィジェットの上あるいは下に入りきらない場合、正しく表示されるようになりました。
* ウィンドウ モードで **Alt + Enter** を押すと、フルスクリーン モードからリストアする場合にウィンドウが移動したり、リサイズされなくなりました。
* **[Message Log (メッセージ ログ)]** タブが **[Output Log (出力ログ)]** タブのようなノマドタブになりました。
* **[Editor Settings (エディタ設定)]** の **[Source Control (ソース コントロール)]** ダイアログが、すぐにソース コントロール接続に反映されるようになりました。
* **レベル エディタ** における _アクタ_ の複製を最適化しました。
* 正投影ビューで BSP ブラシを編集する時に **Alt + マウスボタンのホイール** による回転軸の移動が正しく行えるようになりました。
* _Spotlight_ を配置すると、正しいデフォルト回転が付くようになりました (既に置かれている _Spotlights_ には影響しません)。
* **テクスチャ エディタ** でカラーチャンネルを 1 つ選択すると、チャンネルの色による調整ではなく、グレースケールで表示されるようになりました。
* **被破壊メッシュエディタ**:
	* ビューポートでチャンクを選択し、選択されたチャンクのプロパティが編集できるようになりました。 - 簡単な解説 1
	* ビューモード **Buffer Visualization** と **[Refresh (リフレッシュ)]** ボタンのアイコンを更新しました。
* エディタのほとんどのダイアログの見かけを標準化しました。 
* **Vertex Paint** ツールにおける LOD でメッシュのワークフローを改善しました。
* エディタで **Simulate** を実行すると、裏側で **Play In Editor** 、次に **Eject** が実行されるようになりました。これにより、シミュレートされたワールド内のすべてのアクタ上への `ReceiveBeginPlay` の呼び出しが可能になりました。
* **スタティック メッシュ エディタ** での _ソケット_ 名の変更がインラインで行われるようになりました。
* **その他の UI の更新**
	* MapCheck アイコンを16px と 40px で作成しました。コード合わせを必要とします。 
	* 接続中および未接続のアニメーション ピン用にティント可能なアイコンとアニメーション結果ノード用に 1p28x アイコン (ティント可能) を作成しました。PNG アセットのみで、コード合わせが必要です。 
	* 現在の **[Clear All (すべてクリア)]** 配列ボタン アイコンを変更するためのゴミ箱を作成しました。現在の PNG もこれに変更されます。 
	* **[Destructible Mesh Editor]** リフレッシュ ボタン用に 40px アイコンを作成しました。 
	* カメラメッシュからバックビュー LCD を取り除いて、ソースアセットを追加しました。 
	* 今回実際にカスケードに使用するアンドゥ アイコンとリドゥ アイコンを交換しました。単純な png の交換であり、破壊的なものではありません。 
	* [Save All Levels (すべてのレベルを保存)] アイコン用の 16px と 40px アイコン サイズを修正しました - チェンジリストは PNG アセットの更新のみになりました。 
	* _AimOffset1D_ と _BlendSpace1D_ 用にアイコンを追加しました (両方ともコード合わせが必要です)。PNG の更新のみです。 
	* アイコンを _f_ 関数の記号に切り替えました。既存の PNG アセットのみを上書きします。 


#### ブループリント
* **ブループリント エディタ** 内の _コンポーネント_ の名前変更がインラインで行われるようになりました。
* _Level ブループリント_ のタイトル バーに現在のマップが反映されるように変更しました。
* **Promote to Variable** によってユーザーは [MyBlueprint] ウィンドウでインラインで名前設定ができるようになりました。
* ピン選択ウィジェットの Exec ピンが配列として切り替えできなくなりました。
* _User Defined Enums_ の UI をつくりかえて、詳細なカスタマイズが使えるようにしました。
* ピンタイプの参照および配列への切り替えが、ポップアップ メニュー外で行えるようになりました。
* 折りたたまれたグラフは、グラフ ノードで名前変更ができます。
* **ブループリント エディタ** の **[Component]** タブ ビューポートがパーティクルをティックするようになりました。
* **タイムライン エディタ** の使いやすさを改善するために、右クリックのコンテキスト メニューを追加しました。
* ルート コンポーネント ノードが **ブループリント エディタ** の **Components** モードで選択されると、変形ギズモがプレビュー ウィンドウは表示されなくなりました。
* **ブループリント エディタ** の **Components** モードで、 _ブループリント_ プレビュー アクタへより効率よくアクセスできるようにしました。
* Multifonts を削除しました。
* _ブループリント_ を開いた時のデバッグ インスタンスの選択を改善しました。アセット メニューから _ブループリント_ を編集すると、デバッグするインスタンスがある場合はそれを検出します。さらに、後続の _ブループリント_ インスタンスを編集する時に、デバッグ インスタンスが正しく更新されるようになります。
* **FloatToString** キスメット関数が余分なゼロを取り除くようになりました。
* 関数の呼び出しにより、アンドゥ / リドゥが正しく行われるようになりました。
* **Ctrl + K** は、_ブループリント_ 内のアクタ リファレンスの検出にも使用することができます。
* **ブループリント エディタ** のコンポーネント モードの UI を改善しました。
	* さらに簡単に使えるようにしました。
	* クラス アイコンによるユーザーへのフィードバックを改善し、レイアウトにゆとりをもたせませました。
	* 検索ボックスでコンポーネントがすぐに検出できます。
	* コンポーネントが _カテゴリ_ へ分類されました。
* 複数のアクタを選択した時の、 _Level ブループリント_ 内のコンテキスト メニュー オプションを改善しました。
* 数字の検索時における false positives を防ぐために _ブループリント_ の検索結果を改善しました (検索条件から必要のないノード インデックスを削除して)。 
* _リッチ ツールチップ_ 形式のドキュメント (徐々に追加されていく) を自動検索するために、現在あるすべてのタイプのグラフ ノードを接続しました。
* アクタだけではなく、潜在ビヘイビアを、どの _ブループリント_ でも可能にするために、潜在アクション マネージャを一般化しました (そうでない場合はティックしないアクタ上でも機能します)。潜在アクションは関数ライブラリで宣言することもできます。
* Touch enter/leave event とデリゲートをアクタとプリミティブ コンポーネントに追加しました 
* _State Machine_ entry ノードが conduit (現在ランタイム時にサポートされていません) に接続されないようにしました。
* ソースの _ブループリント_ にコンパイル エラーある場合、 _AnimBlueprint_ インスタンスが初期化を完了しないようにしました 
* _ブループリント_ グラフ配列 から NULL リファレンスを取り除くクリーンアップ コードを追加しました(_State Machines_ の削除後に保存していて、ロード時にクラッシュを引き起こしてしまう、かなり古い Animation アセットを修正しました)。 
* 互換性のないスキーマのグラフ内では変数ノードをドロップできないようにしました。 
* ノードまたはピン上にカーソルを当てていない場合でも、カーソルを当てているグラフを照会するグラフのドラッグ＆ドロップ操作機能を追加しました。 


#### ゲームプレイとフレームワーク
* ビヘイビアツリー システムは WIP のままです。
* スクリーンのロードは進行中です。
* **ワールド ブラウザ**
	* ワールド合成を使ってクライアントとしてホストに加わるためのサポートを追加しました。
	* ワールド合成に入っているレベルに対して `ALevelBounds` アクタを追加しました。これによりレベル バウンディング ボックスが定義されますレベルアクタの変更時に自動的に更新、または修正されたバウンドと使用することができます。
	* プログレス バーをレベル タイルに追加しました。 
	* **Play In Editor**/**Simulate In Editor** モードにシミュレーション ユーを追加しました。
	* `WORLD_MAX` より大きいバウンドを持つレベルは、レベル バウンドがワールド バウンドと交差する場合に表示されます。 
	* 下側にステータス バーを追加しました (マウス位置、マーキーの長方形のサイズ、 ワールドのサイズ)。 
* 現在の _SkeletalMesh_ をデフォルトとして維持するために _スケルトン_ を保存する必要がある旨の通知は、常時ではなく、変更があった場合にのみ表示されるようになりました。
* ゲーム ビューポートが、別々の _Player Controller_ を制御する複数のゲーム コントローラーから入力を受け取ることができるようになりました。
* コンポーネント アセット ブローカーを拡張可能にしました。 
* `AActor::bFindCameraComponentWhenViewTarget` を追加して、アクタがビューターゲットの時に使用可能な _Camera コンポーネント_ の使用をやめることができるようにしました。 
* 引き続き **Unreal Automation Tool** の開発中です。
	* **UnrealBuildTool** と **UnrealAutomationTool** ロギング システムを統合しました。
	* プログラムのビルドに対するサポートを追加しました。 
	* プラットフォーム抽出レイヤーを追加して、 `AutomationScripts.dll` を複数の (プラットフォーム) DLL に分割しました。
* **物理**
	* プレイヤー / 物理のインタラクションプレイヤーは物理オブジェクトの移動中にプッシュすることができます。
		* プレイヤーは、ブロックしている物理シミュレートされたオブジェクトを押しのけて、オーバーラップしている物理シミュレートされたオブジェクト上にわずかな力を生成することができます。 
		* プレイヤーがオブジェクトに適用する力は _CharacterMovementComponent_ で設定することができます (Category=Player Physics を参照)。


#### レンダリング
* **DOFOverrideTexture** 機能を取り除きました。代わりに、UI エレメントの裏側のコンテンツをぼかすことができる **BlurUI** 機能が付きました。 
* 統合が遅い場合 NVIDIA のパフォーマンス GPU が高くなるように NVIDIA 固有の注釈を追加しました。  
* シャドウ手法は、新手法が既にデフォルトになっている場合が多いので、旧手法は削除しました。
* バウンディング ボックスの _+1_ を削除しました (かつて物理に必要でしたが、もう必要なくなりました)。バウンディング ボックスを拡張して使うと、シェーディングに問題が生じました。
* lit（ライティング有り） でないビューの大気エフェクトを無効にしました。
* エディタ内の **ランドスケープ** スプラインの Z-fighting を減らし、正しいワールドの Z 軸によるスプライン曲線をレンダリングしました。
* **Lightmass** のバックフェイシング トライアングルによって、写真がブロックされることがなくなりました。 
* **Lightmass** における指向性ライトの重要度の評価を改善しました。
* OpenGL ES2 レンダラーにガンマ空間の出力を追加しました。
* OpenGL ES2 に対する EnvBRDF の分析近似値を追加しました。
* レンダリング スレッドから直接コンポーネント プロパティへアクセスするレース コンディションを作成しずらくするために、`UPrimitiveComponent` ポインタをレンダラー構造体から削除しました。
* **カスケード** でエミッタを操作する時の LOD に関する警告がより明確になりました。


#### アニメーション / ペルソナ
* **コンテンツ ブラウザ** で使用するために _[1D Blend Space]_ アイコンをエディタに追加しました。
* **ペルソナ** でソケットを複製すると、アタッチされたアセットも複製されるようになりました。
* **ペルソナ** 内にアタッチされたメッシュをキャッシュして、モードが変更しても残るようにしました。
* _MID_ と _MIC_ のインスタンス名を、ユーザー (_MaterialInstanceDynamic_ と _MaterialInstanceConstant_) に相応しくなるように変更しました。
* アニメーション シーケンスのスケルタルメッシュへの追加をアンドゥできるようになりました 
* bones/sockets/wind に対する **ペルソナ** の回転 / 平行移動ウィジェットが正しく表示および動作するようになりました。
* **ペルソナ** の **Skeleton Tree** タブでアイテムを選択する時に、ビューの一番上へ強制的にスクロールされてしまうことがなくなりました。
* **Skeleton Tree** でソケットを **Alt を押しながらドラッグ** すると、そこにドロップしたボーン上にはオリジナルではなくコピーが置かれます。
* ワールド / ローカル空間のアイコンが **ペルソナ** で黒の四角としてレンダリングしなくなりました。
* **Copy Bone Names To Clipboard** 機能は、ボーン名にアンダースコアと数を付けなくなりました。
* **Persona** での _ソケット_ 名の変更がインラインで行われるようになりました。
* **ペルソナ** のデフォルトのレイアウトを変更して、**[Compiler Results (コンパイラの結果)]** タブと **[Find in Blueprints (ブループリントを検索)]** タブのホームを作りました。 
* **レベル エディタ** のソケット サポートへのスナップを一般化して、 _Skeletal Meshes_ と _Skeletons_ だけではなくて、ソケットを含むすべての _SceneComponent_ 上で機能するようにしました。

	[REGION:note]
	現在は、本物のソケットのみを使うビヘイビアを維持しており、ボーンのスナップは行われません。
	[/REGION]
 

#### オーディオ
* ビューポートで右クリックすると、 _Ambient Sound_ が **Add Actor...** リストに表示されるようになりました。


#### コア
* テンプレート化されたネイティブの基本クラスが `UCLASS` 定義で使用できるようになりました。以下が例です。

		UCLASS()
		class UMyClass : public UObject, public MyNativeClass<int>
		{
		};

* 関数オブジェクトあるいは lambdas と合わせて使用するために、`TArray` に `FindByPredicate()` メンバー関数が含まれるようになりました。

		void Func(const TArray<int>& Ints)
		{
			// Try to find an odd number (偶数を検索)
			const int* Result = Ints.FindByPredicate([](int N) { return (N % 2) != 0; });
		}

* 列挙型変数のスペーサーがエディタのダイアログで非表示になりました。
* `TAssetPtr` が `nullptr_t` で機能するようになりました。
* **Lightmass** が再度モジュラー アプリケーションとしてビルドされました (**Swarm** は **Core** と DLL ベースでのビルド時に作成する **SwarmInterface** DLLに依存します)。 
* Root セットにはない有効なパッケージへのリセット ローダーのみクック中に呼び出します。 
* 異なるワードラップ ビヘイビアを、1 つの整合した再利用可能なアルゴリズムに統一しました。
* `GIsUnattended` を `FApp::IsUnattended` に置き換えました。無人サーバー上での実行が可能なコードがある場合は、適宜更新する必要があります。
* すべてのポインタに対して、より適切なハッシング関数を使用するようにしました。64-bit の実行ファイルのポインタの下位 4 ビットはいずれにせよゼロになるので、無視されるように関数を若干調整しました。
* `GetObjectsOfClass()` と `GetDerivedClasses()` を `ObjectHash.h` に追加しました。
	* これらの関数は、 _ブループリント_ でのロード時間のパフォーマンス問題を解決のために使用されるようになりました。
* プラグイン名を変更するために、`PluginNameRedirects` を追加しました。
* フォント エディタに再インポート ボタンを追加しました。
* **Asset Registry** の API を変更して、`UClass` ポインタではなく `FName` クラス名を受け取るようにしました。
* `RequiredAPI` をもつクラスのみが `SNewClassDialog` に含めることが可能になりました。 (多少の例外はあり)。
* Perforce のログ、警告、エラーがログ ファイルの中で区別されました。
* エンジンとエディタを Mac OS にポートします。
* Windows XP のコンパイル機能と Visual Studio 2012 へのリンクを追加しました。 
	* `WindowsPlatform.SupportWindowsXP` フラグを追加しました (今のところデフォルトはオフ)。 
	* Visual Studio 2012 Update の 1 以上をインストールする必要があります。 
	* [](http://blogs.msdn.com/b/vcblog/archive/2012/10/08/10357555.aspx ) に従って操作してください。
* UnSetup と UEDocsURLHandler プログラムを削除しました (使用することがないため)。
* モジュールとプラグインをロードする際に発生するエラー処理を改善しました。 
	* ゲーム プラグインを有効にしたので、ロードに失敗するとエラーが報告されるようになりました。
* **GeneratePackagingManifest()** を `ITargetPlatform` に追加しました。
	* **アセット レジストリ** の **ChunkIDs** を含んだパッケージ情報を生成しました。主に、チャンク ベースのインストール用の `.pak` ファイル リストの生成が目的です。
* アセットの可用性と優先順位づけに関する関数を `IAssetRegistry` に追加しました。
	* これらは基本的に、 `FAssetDatas` に保存された ChunkID を使ったプラットフォーム チャンク インストール コードへの呼び出しを単純化したものです。
**統計情報**
	* メモリ使用が改善されました。
	* `STAT NONE` が新しい統計システムで正しく機能するようになりました。
	* ブループリントから統計キャプチャの開始と停止ができます。
* **UnrealFrontend (UFE)**
	* UnrealAutomationTool を使っているランチャーが初めて実装されました。
	* UFE を非モノリシックに切り替えました。
* UnrealAutomationTool (UAT) がプリコンパイルされたフォールバックから機能できるようになったので、Visual Studio や MSBuild のないマシンからも実行できるようになしました。
*「XGE」を使用する時に明確に含まれていなくても、 UnrealAutomationTool が UnrealHeaderTool を作成するようにしてください。
* FMonitoredProcess により、エディタまたはエンジンで監視できる外部プロセスの作成が可能になりました。
* Unreal Build Tool ホットリロードを必要なモジュールとソースの処理だけになり、時間が短縮されました。
* 内部例外を継承するために Unreal Build Tool の BuildException のすべての使用を変更しました。


#### オンライン

* Steam/Null の Achievement インターフェース。

