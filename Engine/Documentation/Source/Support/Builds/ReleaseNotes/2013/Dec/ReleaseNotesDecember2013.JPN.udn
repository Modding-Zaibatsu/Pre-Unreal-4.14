INTSourceChangelist:2615097
Title:2013年12月リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Template:ReleaseNotes.html

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **Labels** | [INCLUDE:#labels] |
| **Built from Changelist #** | 1945305 (//depot/UE4-QA/Promotable-CL-1945305) |
| **Branched from Changelist #** | 1923033 (//depot/UE4/Promoted-CL-1923033) |
| **Visual Studio Version** | Microsoft Visual Studio 2012 Version 11.0.60610.01 Update 3 |
| **DirectX** | June 2010 |
[/REGION]

<!--
[EXCERPT:Labels]
QA_APPROVED_UE4_BUILD_2013_12  
QA_APPROVED_UE4_BUILD_CURRENT  
QA_APPROVED_UE4_BUILD_MINIMUM
[/EXCERPT:Labels]
-->

## 重要情報

 * 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 修正されたバグ： [UE4 Fixed Bugs December 2013](UE4_Fixed_2013_December.xlsx)
 * 既知の問題: [UE4 Known Issues December 2013](UE4_Bugs_2013_December.xlsx)
 

## 主要な新機能

#### エディタとツール
* **新規マテリアルエディタはデフォルトで有効です**
	* 新規マテリアル エディタはデフォルトで有効になりました！

		![](NewMaterialEditor2.png)

	* 何らかの理由で旧バージョンを使用したい場合、コマンドラインに「-oldme」を追加しなくてはいけません。

* **スケールのスナップ：不均等なスケーリングを維持します** 
	* スケールのスナップの新機能:Preserve Non Uniform Scale がビューポート内のスケーリングに追加されました。
	* この新オプションはスケールのスナップメニューから使用できます。ビューポートに組み込まれたツールバーからアクセスが可能です。

		![](ScaleSnapping.png)

	* このオプションをアクティベートすると、スケールのスナップは、不均等なスケーリングでオブジェクトをインタラクティブにスケーリングした結果と微妙に異なる挙動となります (つまり、X、Y、Z コンポーネントのスケール係数が異なります)。
	* スナップのスケーリングは通常は、各コンポーネントはグリッドのインクリメントに個別にスナップされます。結果としてスケーリング時にオブジェクトに多少変形が生じます。このオプションを有効にすることにより、スケールをスナップするグリッドへ一番大きなコンポーネントをスナップしながら各コンポーネントの割合を保つことによって変形を回避することができます。

* **Play-In-Editor:複数のワールド** 
	* この機能は PIE ネットワークの動作方法を変更します。ユーザーの PIE ゲームへ接続するために UE4 の新規インスタンスを起動する代わりに、既にロードした UE4 のインスタンス内で、エディタが複数のワールドをスポーンするようになりました。
		* **Shift-Tab と Ctrl-Tab** キー操作で PIE が焦点とするウィンドウを循環することができます。

	* **デバッグ作業**	
		* 複数のワールドから成るシナリオを実行時に、デバッグ作業を行うワールドを選択するための追加のドロップダウン ボックスがブループリント エディタに追加されました。

			![](PIENetworking02.png)	

		* 動作中の最終スクリーンショット：		

			![](PIENetworking04.png)

* **コンテンツ ブラウザに表示されるフォルダ**
	* コンテンツ ブラウザの「Asset」ビューにフォルダを表示する機能が追加されました。

		![](ContentBrowserFolders01.png)

	* フォルダ表示を有効にするというこは [Show Only Assets In Selected Folders] を有効にすることを意味します。ツリービューでルートを選択すると全てのコンテンツが表示されなくなることにご注意ください。
	* フォルダは以下のように表示されます。フォルダはコンテンツ ブラウザの全ビューモードで表示されます。

		![](ContentBrowserFolders02.png)

	* フォルダは、Windows Explorer とほぼ同じ挙動をします。ドラッグ＆ドロップ、名前の変更 (F2) 、削除オプションは全て機能します。
	* [Asset View] へ新規フォルダを作成することもできます。
	* 新しく [Up] ボタンが追加されました (ナビゲーショントレールの左)。このボタンをクリックするとディレクトリへ移動します。 [Alt+Up] キー操作でも移動可能です。	

		![](ContentBrowserFolders03.png)

	* アセットの検索時は、フォルダは非表示となり、アセットは再帰的に表示されるため、以前のワークフローと同じです。

	* **フォルダの色**
		* コンテンツ ブラウザのフォルダの色分けが可能になりました！	

			![](FolderColors03.png)

* **パッケージ自動保存の復元**
	* 前回の編集セッションの自動保存からパッケージが復元できるようになりました。
	* 不適切なシャットダウンをエディタが検知すると、立ち上げ時にダイアログが表示されて、復元するパッケージを選択することができます。

		![](PackageAutoSaveRestoration.png)

	* この機能はディスクに書き込みが可能なパッケージの復元のみに限定されます。つまり、新規に作成された未保存のワールドなど、まだディスクに保存されていないパッケージは、この方法で自動復元を実行することができません (しかし、手動で復元が可能な自動保存ファイルをディスクに作成します)。
	* ソース コントロールが原因で読み取り専用のパッケージを復元する場合、復元処理を開始する前にこのプロセスによりパッケージ ファイルがチェックアウトされます。
	* デバッガを起動しながらエディタの実行時、またはエディタをオートメーション モードで起動している時は、この機能は完全に無効となります。

* **インタラクティブ アクタ ピッカー**
	* アクタから派生したオブジェクトを取り込むプロパティは、インタラクティブ ピッカーを利用した編集が可能になりました	

		![](InteractiveActorPicker01.png)

	* 「ピック可能な」アクタにマウスをかざすと、カーソルがスポイトで表示されます。

		![](InteractiveActorPicker02.png)

* **カスタム仕様の UV**
	* 頂点シェーダーでマテリアルの UV チャンネルのカスタマイズを有効にする新しい機能がマテリアル エディタに追加されました。  
	* 任意の計算をコストが高いピクセル シェーダーから頂点シェーダーへ移動させることができるため、強力な最適化ツールとなります。
	* 左の図は 8x8 頂点グリッドを持つメッシュ上の CustomizeUV を介して計算した「中心からの距離」です。右は、ピクセルシェーダーの同計算です。  

		![](CustomizedUVs.png)


####ブループリント
* **ブループリント通信**
	* ブループリントは別ブループリントの関数および変数へアクセスが出来るようになりました！
	* パブリックへ公開している関数の変数は、インターフェースを使用せずに、デフォルトで別のブループリントでアクセスが可能になりました。  
	* コードで定義された変数と、ブループリントで定義された変数の違いはなくなりました。全ての変数を利用できます。
	* 以下のブループリントには OpenTheDoor という名前のカスタムイベントがあります。

		![](BlueprintComms02.png)

	* OpenTheDoor イベントは、今後正規の関数呼び出しノードと一緒に呼ばれるようになりました。 

		![](BlueprintComms03.png)

	* **インターフェースからの移行**
		* ブループリントは、以前は関数の呼び出しや別のブループリントの変数へアクセスができなかったことへの対処法として、ブループリント インターフェースを使用していました。もうこの回避策を利用する必要はありません。今後はインターフェースを使用せずに、ブループリントの通信を直接利用した移行を選択されるでしょう。ユーザーのブループリントからインターフェースを削除する新しい機能が追加されました。関数はそのまま使用できます。
		* [Find in Blueprints]（ブループリント エディタでは [Ctrl + F] キー）で、移行を簡単にするメッセージ関数の全ての用途を検索することができます。 


####Animation
* **アニメーション リターゲット**
	* このたび、アニメーション リターゲットのサポートが追加されました！ 
	* アニメーション リターゲットとは？
		* アニメーション リターゲットとは、特定キャラクター用に作成したアニメーションを使用して、比率の異なるキャラクターでこれを再生する機能です。重要な点は、正しく機能させるために、共通のスケルトンを使用しなくてはいけないことです (同一ボーン名と階層)。パインド ポーズのみが異なります。
	* ペルソナ (Persona) の [Skeleton Tree] ウィンドウに設定が可能なボーン移動のリターゲットは 3 種類あります。
		* **スケルトン：**ボーンの移動はターゲット スケルトンのバインド ポーズに由来します。
		* **アニメーション**:ボーンの移動は、不変のアニメーション データに由来します。
		* **アニメーションスケーリング**：ボーンの移動はアニメーション データに由来しますが、スケルトンの比率でスケーリングされます。これはターゲット スケルトンのボーンの長さ (アニメーションが再生中のスケルトン) とソース スケルトン (アニメーションが作成されたスケルトン) 間の比率です。				

			![](AnimationRetargeting01.png)		

		* ビューポートの [Snow] メニューから、「NonRetargeted Animation」と「Bones」をチェックすると、オリジナルアニメーションとリターゲット アニメーションの比較ができます。		

			![](AnimationRetargeting02.png)

		* この視覚化は単一アセットに作用するものですが、アニメーション ブループリントにも作用します。	

			![](AnimationRetargeting03.png)



## 新規追加

#### Editor and Tools
* DragDropEvent.GetOperationAs<FMyDragDrop>() で、ドラッグ＆ドロップ操作タイプを簡単にチェックする方法が追加されました。
* ツール ヒントのスコープおよびカスタム設定処理を有効にする OnVisualizeTooltip() イベントが追加されました。
* ブランチ間の頻繁な切り替えが発生した際に、レベルエディタへプロジェクト名を明示的に付与するための「ini」オプションがエディタのユーザー設定に追加されました。
* マテリアル サムネイルにカスタム メッシュ プレビューが追加されました。マテリアル エディタの [Details] パネルでプレビューするメッシュを選択してから、コンテンツ　ブラウザをサムネイル編集モードへ切り替えて、マテリアルのプレビュー　プリミティブをティーポットへ変更します。
* Rocket ユーザーは、エディタからすぐにフィードバックの送信が可能になりました。
* スナップ時に不均等なスケーリングを維持するオプションが追加されました。
* クックパスは、ゲームごとのエディタ環境設定に置かれました。
* コンテンツ ブラウザにフォルダが追加されました。
*  [Slate] ウィンドウに細い境界線が追加されました。
* シーン内のアクタをピックするために、インタラクティブなアクタに「スポイト」ピッカーが追加されました。
* ノード上の既存グラフ アイコンをクリックすると、グラフビューに単独に表示されます。
* 個々のキーを既存トラックへコピー / 切り取り、貼り付けする際に選択キーが考慮されます。
* フォルダの色を設定するための新規のオプションがコンテンツブラウザにあります。 
* ContentBrowserリストとカラムビューは色を表示するようになりました。
* クラッシュ後のエディタの再起動時に、自動保存からの復元オプションが表示されます。
* マテリアル エディタのスレート グラフ バージョンの使用が可能になりました。
	* コマンドラインに「-oldme」と入力して、旧エディタへアクセスするオプションがデフォルトで有効になっています。
	* 表現式とコメントの位置が一時的に入れ替わります。
	* Static Bool 表現式はプレビュー ウィンドウを表示しなくなりました。
	* Material Input ノードを移動できるようになりました。
	* [ctrl+drag] キーでマテリアルの接続を移動できるようになりました。
	*  [Enter] キーを押すと検索結果を循環します。
	* マテリアル表現式に代替の検索結果が追加されました。「lerp」と入力して線形補間の検索、[One Minus] には「1-x」、 [Square Root] は「sqrt」と入力します。
	* ノードのタイトルバーから、パラメータ名のブループリント スタイルの編集を有効にします。
* ノードの線をドラッグしなくても接続ができるように、ブループリント スタイルのエディタで [Shift-Click] キー操作によるピンの接続が可能になりました。
* SCC Provider プラグインをオーバーライドするために、コマンドラインへ「-SCCProvider=ProviderPluginName」を追加できるようになりました。
* 高度なグリッドスナップ設定が、 [EditorSettings->General->Preferences->Snap] へ追加されました。
* **UnrealDocTool** 
	* ページのパブリッシュを回避するために、「NoPublish」オプションが追加されました。
	* 特定のUDNドキュメントパスに対し、正確で相対的なターゲットパスへレンダリングさせるために 「`[RELATIVE:path]`」タグが追加されました。 


#### Blueprints
* **ブループリント通信**  
	* ブループリントへ関数を呼び出したり、別のブループリントのパブリックメンバーへのアクセスが可能になりました。別のブループリントで生成されたクラスの変数を作成することができます。また、その他のクラス同様にこれらのメンバーへアクセスすることができます。この機能をもって、2 つのブループリント間の通信にブループリント インターフェースを使用する必要はなくなりました。不要となったブループリント インターフェースの削除を目的に、ブループリントの [Blueprint Properties] タブからインターフェースを削除する時に、インターフェースと関連のある全ての関数およびイベントをオプションで保存できるようになりました。この操作を行うことによって、実装しているブループリントからインターフェースを削除、インターフェースと関連のある関数とイベントの状態を保つためのオプションを選択、そしてインターフェースに使用している Message ノードを直接 Function Call ノードに接続することができます。全てのインスタンスが更新された後に、ブループリント インターフェースを削除してもかまいません。Message ノードを利用した検索を簡単にするために、 [Find in Blueprints] 機能を使用してください。
* [Find In Any Blueprint] に、[Ctrl+Shift+F] キーバインディングが割り当てられました。
* [Blueprint Components] モードで、ソケット / ボーンを通じてコンポーネントをネイティブ コンポーネン トへアタッチするサポートが追加されました。
* Enumeration (列挙型) をName (名前) またはString (文字列) へ変換することができます。 
* Get number of entries in <Enum> ノードが追加されました。
* Behavior Tree ブループリント ノードが音を立てるように、APawn へ BlueprintCallable PawnMakeNoise 関数が追加されました。
* ブループリントで呼び出しが可能な関数を SceneComponent へ追加しました。Get Num Children Components()、 Get Child Component (インデックス)、 Get Children Components ([Include All Descendants] チェックボックスと一緒に)、そして Get Parent Components　が追加されました。
* ブループリント タブにカテゴリが追加されました。
* BlueprintNativeEvents にサポートが追加されました。コールチェーンにネイティブ実装される点を除いて、BlueprintImplementableEvents と似ています。インターフェースで使用すると、BPNE の機能は限定されることに留意してください。これについては今後のリリースノートで言及していきます。


#### ゲームプレイとフレームワーク
* 結合が可能な Begin/End Cusor Over Events を HUD HitBox で利用できるようになりました。
* ブループリントの Input イベントを、イベントノードのプロパティに指定できるようになりました。親クラスのイベントのバインディングをオーバーライドすべきかどうかを指定します。
* ブループリントの変数、関数、マクロは、参照を格納しているクラスが読み込まれていない間に名前変更がされた場合、参照メンバーの検索に使用される内部 GUID に格納出来るようになりました。GUID ベースのシステムを従来のコンテンツに作用させるには、アセットを再保存しなくてはいけません。
* マルチプレイヤー対応 PIE (Play in Editor)：1 つのプロセスに複数のワールド
* UE4 の 1 つのインスタンス下でマルチプレイヤープレイを行うことができます (接続のために別のインスタンスを起動する代わりに)。
* [Play In Settings] の [Multiplayer] オプションで「Single Process」を選択して有効にします。
* Visual Studio 2013 (VC12)に対する仮サポートを追加しました。
	* WindowsCompiler.VisualStudio2013に WindowsPlatform.Compilerを設定しました（実験的です！
	* VS2013のネイティブプロジェクトを取得するために、「"-2013"」を「GenerateProjectFiles.bat」へ渡します（オプション）。 
	* Visual Studio 2013のコンパイル時は、Windows SDK 8.1 を使用します。
	* サードパーティによるビルドスクリプトはVS2013ライブラリのパスへ更新されます。
	* 今でもWindows XPをターゲットにすることができますが、これは実験的な試みです（WindowsPlatform.SupportWindowsXP=true）。
	* 重要:現時点におけるUE4はVisual Studio 2012のみをサポートしています。コンパイルするにはVisual Studio 2012をインストールしなくてはいけません。2013バージョンは初期試験のためのテスト予備段階です。
	* 重要:サードパーティライブラリはまだVS2013へコンパイルされていないのでリンクできません。 
* UStructs から / へ Json オブジェクトを変換するユーティリティ、JsonUtilities モジュールが追加されました。 
* BodySetup とインスタンスあたりの基準両方で「歩行可能」と判断されるフロア法線をオーバーライド出来る機能が追加されました。有効な設定は以下の通りです。
	* Default (デフォルト) (動作に変化はありません)
	* Increase walkability (歩行範囲の拡大) (通常よりも急斜面な法線を有効にします)
	* Decrease walkability (歩行範囲の縮小) (通常よりも緩やかな法線を無効にします)
	* 注記:現時点の AI navmesh はこれらの設定を無視します。
* カスタム AI ナビゲーションリンクは、次のパスに作用します (ドア、はしごなど):USmartNavLinkComponent.
* ANavLinkProxy のカスタム AI ナビゲーション リンクにブループリント サポートを追加しました。
* 詳細なパス ファインディング デバッグを ANavigationTestingActor へ追加しました。
* AI リソースのロックに、ソースのロックを表示する一般的なメカニズムを追加しました (動作と頭脳のようなものです)詳細は IAIResourceInterface を参照してください。
* アニメーション リターゲットの向上：スケルトンは、リターゲットとなる複数の基本ポーズをサポートします。
	* 基本ポーズは、スケルトンの別の参照ポーズです。 例えばメッシュの異なるサイズからなど。
	* ユーザーのシステムでリターゲットが使用されると、正確なリターゲットを処理するために、一部のアニメーションは正しい基本ポーズが必要となります (アニメートされたメッシュに基づきます)。  


#### Rendering
* HZB オクルージョン カリングを追加しました。新規のシステム スケーリングは、以前の HW オクルージョン クエリーに基づいたシステムよりも高いオブジェクト数に適しています。現在はデフォルト設定で無効になっています。「r.HZBOcclusion 1」を有効に設定します。
* 拡張性のために GetRenderingDetailMode() 関数をブループリントに追加しました。
* コンポジットおよびポストプロセス グラフの「r.CompositionGraphDebug」へデバッグ エクスポートを追加しました (yWorks を使用)。グラフはファイルをスクリーンショット フォルダへエクスポートします。  
* **適応サンプリングを用いたライトマス GI ソルバ**
	* 困難なライティング状況でノイズとノイズ漏れを削減します。
	* GI ソルバのアーティファクトを示すマップのソルバ品質を強化するために使用可能な、 IndirectLightingQuality ワールド設定を新規に追加しました。
* **カスタム仕様の UV**
	* 新しいマテリアル プロパティ、NumCustomizedUVs は、頂点シェーダーで実行されるマテリアル入力を公開します。
	* Customized UV 入力は、演算を頂点シェーダーへ移動することによりマテリアルの最適化に使用します。
* 各拡張グループの CVar は、「ini」ファイルに格納されるようになりました (BaseScalability.ini)。 
* DOF (Depth of field: 被写界深度) と別の透過処理を適用前にマテリアルを描画するために、ポストプロセ スマテリアルの切り込み点として BL_BeforeTranslucency を追加しました。
* より実用的な代替 x および y スケール値として、ワールド単位で定義されたおおよその TextComponents サイズが使用できるようになりました。
* 現在の EyeAdaptation 値は、ポストプロセス マテリアルをマテリアル表現式で公開するるようになりました。 Utility->EyeAdaptationSM5 のみでサポートされています。
* マテリアル インスタンスで OpacityClipMaskValue、 BlendMode、 TwoSided そして LightingModel プロパティのオーバーライドが可能になりました。
* MaterialQualityLevel がマテリアル表現式で公開されるようになりました。
* [Rendering Detail] モードをパーティクルごとに指定できるようになりました。
* Axis Lock モジュールが GPU パーティクル エミッタでサポートされるようになりました。
* SetEmitterEnable 関数を使用して、 パーティクル サブエミッタをブループリントから有効または無効にできるようになりました。
* r.UpsampleQuality コンソール変数を追加しました。
	* より小さなスクリーンからアップスケーリングする時の 4 つの品質値の範囲です。
* **Automatic Lightmass Importance ボリューム**
	* LightmassImportanceVolumes が存在しない場合、ユーザーのシーンと結合する合成ボリュームが使用されます。
	* ユーザーが ALightmassImportanceVolume をごく簡単なシーンへ配置しないことが目的です。
	* 「automatic volume」の範囲は 100m にクランプされます (MinimumImportanceVolumeExtentWithoutWarning)。
	* Importance Volume が存在しない場合は警告の記録をログに取りますが、シーンがこの閾値を超えた場合は UI 警告のみを表示します。
	* MinimumImportanceVolumeExtentWithoutWarning の extent 値を 50m から 100m へ増加しました。


#### Animation
* [Ctrl-C/Ctrl-V] キー、またはスケルトン ツリーのコンテクスト メニュー アイテムから、ソケット用のコピーおよび貼り付け機能をペルソナに追加しました。複数のソケットを一度にコピーして、ボーンへ貼り付けることができます。
* フロアを上下に移動させる [Floor Height Offset] ボックスがペルソナの [Viewport] メニューに追加されました。メッシュごとに保存します。


#### Core
* TAssetPtr -> UObject から負荷時に自動変換が追加されました。
* TMap と TArray には設置サポートに制限があるため、コピーせずにコンテナへ直接エレメントを構築することができます。
	* 単一引数コンストラクタと一緒にクラスを処理する際は、コピーのコンストラクタ呼出しを回避するために、「.Add」の代わりに「Map.Emplace」と「Array.Emplace」を使用します。 
* TMap 値は演算子を利用して読み出すことができます[]。
	* ValueType& Val = Map[Key];
	* 「std::map」とは異なり、これは const コンテナで使用が可能で、キーが存在しない場合は新しいエレメントを挿入しません。その代りアサートします。
* 複数の文字列を簡単に可視化するために、 FName と FString が [string view] ダイアログをサポートするようになりました。
* ラムダと一緒に使用ができる、新しい関手ベースの関数が TArray に追加されました。
	* IndexOfByPredicate: 述語でエレメントの見出しを検索します。
	* ContainsByPredicate: 述語と一致するエレメントがあるかテストします。
* デバッガビジュアライザは「GenerateProjectFiles.bat」で自動的にインストールされます。
* UFUNCTION 指定子がデリゲートの UFunction へ渡されるように UDELEGATE が追加されました。 
	* UDELEGATE がない古いタイプもまだサポートしています。
	* 例:
	* UDELEGATE(<specifiers>)
	* DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam( FDelegate, float, Var );
* DOREPARRAY と TArrays は連携しなくなりました。
	* 代わりに DOREPTARRAY を使用します。
* FVector::Dot2D の名前が変更されました。
	* この関数の名前は、関数の動作を適切に表現していませんでした。
	* FVector::CosineAngle2D を代わりに使用します。
* 空の TArray へインデックスを付けると常にエラーとなります。
	* &Array[0] の回避策が原因で一部のエラーは報告されていません。
	* この種の使用法は、Array.GetTypedArray() と置き換えなくてはいけません。


#### Platforms
* ライブラリのバッチの再コンパイルを単純化するために BuildThirdPartyLibs UAT スクリプトが追加されました (全てのライブラリが有効にされたわけではありません。バッチファイルの設定方はスクリプトを参照してください)。
* 「.uplugin」ファイルへホワイトリストとブラックリストを追加しました (WindowsMoviePlayer.upluginから例を確認してください)。
* **Android**
	* メインブランチの初期のAndroidサポートは、DXTと PVRTCデバイスをサポートします。
* アンリアル プロジェクト ファイルに Mac OS X Services インテグレーションを追加しました。 「.uproject」ファイルの選択時に [Service Menu]、もしくは Finder のコンテクスト メニューからゲームまたは生成した Xcode プロジェクト ファイルを起動できるようになりました。 
* UE4 の共有コンテナと文字列タイプに LLDB データフォーマッターを実装しました。ユーザーの「~/.lldbinit」へ「command script import UE4/Engine/Extras/LLDBDataFormatters/UE4DataFormatters.py」を追加します。

#### Networking
* **ネットワークアクタリスト**                                           
	* 単独のネットワークアクタリストで、向上したパフォーマンスのネットワークに関連したアクタを追跡するようになりました。
* **レプリケーションの最適化**                           
	* パフォーマンスとセキュリティを考慮して、下層のプロパティ レプリケーション ロジックを徹底的に書き直しました。
* **接続全域に渡るワークシェアー**              
	* 接続全域に渡って共有するレプリケーション ロジックの能力
* Lifetime プロパティ                                        
	* パフォーマンス向上のためにプロパティを登録する新しい方法。
* **ライフタイム プロパティの条件**                     
	* ライフタイムにレプリケートされたプロパティに二次的な条件を適用する能力。
* **プロパティ チェックサム**                                       
	* クライアントとサーバーの非同期状況を診断するためにプロパティ チェックサムをトグルする能力。


#### Online
* 別のサブシステムが利用不可、または意図的にオフにされている時は、OnlineSubsystemNULL がフォールバックです。 
	* ゲームコードはオンライン関数を継続的に呼出し、実際のオンラインコミュニケーションをせずにコールバックを取得します。
*  オンライン サブシステムに新規の OnlineMessage インターフェースを追加しました。
	* ユーザーのインボックスに列挙型のメッセージを有効にします。
	* ID でメッセージをダウンロードすることができます。
	* あるユーザーから別のユーザーへメッセージを送信することができます。
	* 個々のメッセージは削除できます。
	* 順応性のあるペイロードを有効にするために、メッセージペイロードはバリアント データ タイプへ文字列のキー値ペアとして符号化されています。
	* 現時点では Mcp OSS のみに実装しています。
*  オンライン サブシステムの OnlineUser インターフェースのリファクタリングです。
	* Mcp OSS 実装を追加しました。
* オンライ ンサブシステムの OnlineFriends インターフェースをリファクタリングしました。
	* 従来の OSS 実装を更新しました。Steam PC、 PS4、 Facebook iOS/PC、 Gamecenter iOS、 Amazon PC
	* Steam 実装は各読み込み時にフレンズリストをキャッシュするようになりました。
	* 新規の Mcp OSS 実装を追加しました。
		* 名前が付けられたフレンズリスト上で操作が可能です。
	* デフォルト設定のフレンズリストに招待を送信するために、ユーザー ID のリストを受け取る exec コマンドを追加しました。
* Engine モジュールの依存を削除するために OnlineSubsystem をリファクタリングしました。 
	* エンジン依存は全て OnlineSubsystemUtils モジュールにあります。
* ソースファイルからMcpコンフィグをリファクタリングしました。


## Upgrade Notes

#### Editor and Tools
* [World Settings] に独自のタブができました ([Details] タブとは別です)。
* **スレート** 
	* スレートのサウンドは、 FName のよりはむしろ FSlateSound を使用するようになりました。スレートにサウンド名を格納するための Fname の使用は非推奨となりました。
	*  FSlateSound::FromName_DEPRECATED を利用して一時的にコードを修正することができます。
	* 正規の修正は、スレートで再生するサウンドを保持するために Slate Widget Style を使用します。
	* SHyperlink のテンプレートが廃止されました。ユーザー データを渡すにはデリゲート ペイロードを使用します。
* const らしさを強調するためにスレートの TAttributes の機能が向上しました。スレート TAttribute の内部に決して副作用をもたらさないでください。 
* SPropertyEditorNumeric、 SSpinBox、 SNumericEntryBox が一般となり、任意の数値型でパラメータ化することができます。
* [Viewport Transform] ツールバーのアイコンと色を変更しました。
* Texture2D から Slate Brush Asset を作成するために、コンテンツ ブラウザにコンテンツ メニュー アクションを追加しました。
* プロパティ エディタに WYSIWYG SlateBrush プレビューが追加されました。
* マウスの中クリックでコンテンツ ブラウザ フィルタの削除が可能になりました。
* **UnrealDocTool** 
	* 自動生成されるヘッダIDとブックマークの名前が小文字になって、「'_'」に代わって「'(' and ')'」を使用します。
* **プラグイン**
	* プロジェクト プラグインのリストは、「Game.ini」ファイルから「Engine.ini」ファイルへ移動しました。


#### Blueprints
* ブループリント マクロが、重複した変数名をチェックするようになりました。
* 初めにコメントを非選択にせずに、広範囲にわたるブループリント ノードをコメント ボックスにアタッチできるようになりました。
*  [My Blueprint] から [Graph] へマクロをドラッグできるようになりました。
* 新しいエレメントを追加する前に [MyBlueprint] 検索フィルタをリセットするコールが追加されました。新しいエレメントは一度作成されると表示されます。
* Vector2D ブループリント グラフ アクションは、標準のベクタークラスから分離して Vector2D カテゴリへ移動しました。 
* カラーピッカーのアルファ セクションがブループリント グラフのカラーピン上で有効にされました。
* セクション付近にコメントを作成する機能が、エディタのノード コンテクスト メニューに追加されました。
* ソケットコンポーネント用の [Details] ビューは、正しくカテゴリを配置してブループリント エディタで常に表示されるように更新されました。
* 変数をベースとしたノードに使用する変数を配置する機能が、ブループリント エディタのコンテキスト メニューに追加されました。
* グラフの一般ノードカリングは、より正確性を増して、ノードの幅 / 高さを考慮するようになりました。
* より大きく展開するためのクラスピッカー ダイアログが作成されて、デフォルトのクラス選択領域の折りたたみが可能になりました。
* Blueprint 関数とイベントはより記述的な名前を使用し、フォーマット化されました。 
* タイトルが既に可視出来る場合、Blueprint ノードの名前を変更しても選択しているノードを中心に置きません。


#### ゲームプレイとフレームワーク
* USpringArmComponent の一部の挙動は、サブクラスでオーバーライドが簡単に出来るように複数の仮想メモリに分割されました。 
* フラッシュ時にファイル階層と比較しないために、 config の書き込みを有効にする新規のクラスフラグが追加されました。
* DrawHUD 外部で使用した時の警告の代わりに、 HUD ドローコールから BlueprintProtected を削除しました。
* FPostProcessSettings の多数のプロパティへ BlueprintType と BlueprintReadWrite が追加されました。 
* UPlayerInput::ExecBindings が DebugExecBindings へ名前変更されて、出荷ビルドからコンパイルされます。
* UWorldFromContextGetter::GetWorldFromContextObject は、オブジェクトのクラスが渡された先が未対応、またはサポートしているオブジェクトが単に NULL の UWorld ポインタを返しているかを区別するために、 bool 型の参照変数を受け取ります。
* AActor::CustomTimeDilation は全てのコンポーネントに渡される DeltaTime へ正しく適用されるようになりました。CustomTimeDilation を手動で適用しているコンポーネントは、これを 2 度適用するようになりました。 
* **UEngine 関数の変更**
	* GEngine->GetNetMode() の代わりに AActor::GetNetMode() もしくは UWorld::GetNetMode() を使用します
	* GEngine->GetNetDriver() の代わりに AActor::GetNetDriver() または UWorld::GetNetDriver() を使用します。
* **他にも数多くの GEngine 関数が必須の UWorld を使用するようになりました。**
	* GEngine->GetLocalPlayerIterator( GetWorld() );
	* GEngine->GetGamePlayers( GetWorld() );
	* GEngine->GetGamePlayers( GetWorld() );
	* GEngine->GetGamePlayer( GetWorld(), PlayerIndex );
	* GEngine->GetFirstGamePlayer( GetWorld() ) const;
* Pathfollowing のデフォルトの動作が改善されました。最も重要なことに、デフォルト設定の「許容半径」は、現在も有効で以前使用されていた「0.0」の代わりに、 Agent の半径を使用するようになりました。


#### Rendering
* ライティングは全マップで再ビルドする必要があります。
* 減少した LOD の拡張制限がより実用的になりました (一部のデフォルトは更新が必要かもしれません)。


#### Animation
* 別の位相 ValidateAnimNodePostCompile を anim graph ノードに追加しました。このノードは、ノード (最終クラスに関係するノードのみ) が最終 CDO に対して何かしらの正当性を確認する際に、コンパイルの最後に呼ばれます。 
* transition pose evaluator ノードを配置するオプション表示をメニューから外して、誤ったグラフにうっかり配置された場合、削除が出来るようになりました (必要に応じて自動生成されます)。
* トグル可能な anim ピンにオブジェクト参照のサポートが追加されました。


#### Core
* ログ出力が UTC タグを使用するように変更されました。
	* ログ出力をパースする全てのツールは、この変更に注意してください。
	* 旧フォーマットは今もサポートされており、コマンドラインで「-logtimesincestart」を渡して使用します。
* レプリケートしたパラメーターが変更しました。
	* 非 const 参照の TArrays は、結果のレプリケートが戻されていないことを示すために、 const 参照で渡されなくてはいけません。
	* FStrings は、値ではなく const 参照で渡されなくてはいけません。 
* UCLASS 宣言の「配置可能な」指定子は削除されました。
	* クラスはデフォルト設定で配置が可能になりました。
	* 派生クラスの配置を防ぐために、クラスへ「notplaceable」指定子を追加することができます。
	* 「abstract」のマークがついたクラスも配置不可ですが、その派生クラスの配置性には影響しません。
* アーカイブ カスタム バージョンの明示的な登録が必要になりました。
	* 特定のクラスが Serialize 関数で Ar.CustomVer(Guid) を使用する場合、オブジェクトがカスタムバージョンに依存していることをアーカイブに伝達するために、 Ar.UsingCustomVersion(Guid) を最初に呼ばなくてはいけません。
	* Guid は、 FCustomVersionRegistration グローバル オブジェクトを通じて予め登録しなくてはいけません。

		例えば:

			void MyObject::Serialize(FArchive& Ar)
			{
				Ar.UsingCustomVersion(MyGuid);
				Ar << Member;
				if (Ar.CustomVer(MyGuid) >= EMyObjectCustomVer::ThingAdded)
				{
					Ar << Thing;
				}
			} 

* CustomVer 利用前に Ar.UsingCustomVersion が呼ばれない場合、アサートが生じます。
* Num の増加時に、 TArray::SetNum はデフォルト設定のコンストラクタを使用するようになりました。
	* このコールを継続して使用するには、Types はデフォルト設定のコンストラクタを持たなければいけません。 
	* 旧出力ゼロ化の動作は、新規の SetNumZeroed 関数で実行することができます。
* FCrc::MemCrc、 FCrc::StrCrc と FCrc::StrCrcCaps は非推奨となりました。
	* 可能であれば FCrc::MemCrc32 を使用します。CRC32 アルゴリズムで一般的に得られる結果となります。 
	* FCrc::MemCrc_DEPRECATED と FCrc::StrCrc_DEPRECATED は、ユーザーが前の結果に依存している場合に使用します。
	* FCrc::StrCrc32 は、今でも文字列に char タイプの独立した CRC を与えるため、必ずしも期待通りの結果ではありませんが、新規の文字列テーブルを使用します。 
	* FCrc::StrCrcCaps(*Str) は FCrc::StrCrc_DEPRECATED(*Str.ToUpper()) に置き換えることができます。
* AVolume は抽象クラスで作成されています。
	* マップ内部の既存ボリューム インスタンスは、ロード時に確実に失敗します。
	* インスタンスのクラスを変更するために、エディタの Convert 機能を利用して、非抽象クラス (例えばBlockingVolume) に変換しなくてはいけません
* IncrediBuildの使用時は、XGEの64-ビットバージョンが利用可能であると予想されます（今も32ビットバージョンを使用しているユーザーはCL # 1892517を取り消してください）
* LTCG は、出荷と Windows ターゲット テストでデフォルトで有効になりました。
	* 無効にするには、ビルド コマンド ラインへ「-noLTCG」を渡すか、「BuildConfiguration.bAllowLTCG=false」を設定します。
* UObject C++ ヘッダは、「Classes」サブ ディレクトリに必要なくなりました！
	* Classes ディレクトリは必要なくなりましたが、上位互換性となります。
	* 「Classes」外部の UObject ヘッダが「*Classes.h」で生成されたグループ ヘッダに含まれることは決してありません。  
		* このヘッダは常にユーザー自身で格納してください！(「*Classes.h」ファイルの非推奨化を進めています)
	*「Classes」または「Public」フォルダの UObject ヘッダは、プライベートな UObject クラスに依存できません。
	* モジュールの「*.generated.inl」ファイルを格納する前に、手動で UObject ヘッダを格納する必要がなくなりました。
		* 「Generated.inl」ファイルは、このファイルに依存している UObject ヘッダを自動的に含むようになりました。 
	* プライベートのモジュール ソース ファイルは、「Private」フォルダ配下に配置する必要がなくなりました。
		* 「Public」フォルダ配下に位置しない限り、全てのソースは Private であると仮定されるようになりました。
		* つまり、ゲームソースを全て単一フォルダに格納することが可能です。
* 「ObjectVersion.cpp」と「Version.h」ファイルは、他のビルド製品とPerforceへチェックインされなくなりました。「build.properties」ファイルのみが最新のエンジンバージョンで更新されます。
	* つまり、ローカルビルドの「GEngineVersion」は常に0に設定されます。機能することを確認しました。0設定で保存されたエンジンバージョンのパッケージは、エンジンに問題なく読み込まれ（この時ローディングコードから警告が出ます）、その他全てと互換性があると仮定されます（パッケージは最新のパッケージバージョンで保存されることに留意してください。ロード時にこのパッケージと比較してチェックされます）。
* checkAtCompileTime と STRUCT_OFFSET が更新されました。
	* checkAtCompileTime は全てのプラットフォームに対して static_assert を使用します。
	* Clang により良い診断メッセージを提供し、より安定感のある標準サポートを活用します。
	* STRUCT_OFFSET は全てのプラットフォームに対して offsetof を使用します。
	* 可能な限り標準のサポートを使用します。
	* -Wno-invalid-offsetof は全ての GCC/Clang プラットフォームに与えられます。
	* non-POD タイプのエンジン全域で offsetof の使用と、実質的にこの動作に依存するためです。


#### Platforms
* **iOS**
	* IPP協調設計機能（中間pemsの紛失）の修復をして、pemsが紛失した時のためにより詳細なメッセージを追加しました。
	* エンジン/ビルド/IOS/リソースから全てを取り込むためにアイコンディスカバリー機能を変更しました。ゲームは、必要時にいつでもオーバーライドが可能になりました。
	* iPhone5のアスペクト比が有効になりました！
	* 予想されるアイコン全てをエンジン/ビルド/IOS/リソースへ追加して、一致させるためにEngine/Build/IOS/UE4Game-Info.plistを更新しました。既存の名前は全て変更されました！
	* ゲームに「.plist」ファイルが無い場合、Engine/Build/IOS/UE4Game-Info.plistへフォールバックして、実行可能な名前をBundle識別子へ置きます。
* Steam SDK はバージョン 1.26 へ更新しました。
* クッカの PackagesToAlwaysCook デリゲートを FCookModificationDelegate と置き換えました (GameDelegates.h 参照)。
* 「-onethread」を「-nothreading」へ名前変更しました (-singlethread はそのままです)。


## 今後の追加事項と継続事項

#### Editor and Tools
* サイクルごとの秒統計が「ue4stats」ファイルで正しく記録されるようになりました。別のマシーンでプロファイルを開いても、同じ番号が表示されるようになりました。
* uprojectsは非エディタビルドで正しく読み込まれるようになりました。 
* Linuxでクラッシュする前にログがフラッシュされるようになりました。
* アセット ディスカバリー時間が多少早くなりました。
* 一部のビルド環境で問題の要因となっていた、深層部のパスの例外的に長い名前のプレースホルダ―クラスを削除しました。
* アセット レジストリに上位クラス名のクエリー サポートを追加しました。いずれかの親クラスがロードされたか否かを示すリストが作成されました。
* PREFETCH と PREFETCH_CONSOLE マクロを新規の platform 関数と置き換えました。FPlatformMisc::Prefetch.
* Visual Studio のデバッグ ビジュアライザーが、モノシリック ビルドで FNames と機能するようになりました。
* RecastのBuildThirdPartyLibはLinuxのビルドも可能になりました。
* リダイレクタがロードされていないマップに修正中に参照された場合、エラーメッセージを表示して、参照しているマップを報告します。コード パッケージも同様です。
* 非同期リキャスト navmesh ビルドは、ターゲットごとに基づいて有効または無効にすることができます。
* クックのためにUATを使用時に、複数のクライアント/サーバーターゲットを指定できるようになりました。
* アクタの Tick 関数は、破壊直後に登録削除されるようになりました。破壊されたアクタは RF_PendingKill を持っているため、いずれにせよティックしません。
* 非従来型のP4クライアントルートを構成しました。
* サーバーの自動入力と Perfoce ログインのユーザーネームを復活させました。
* チュートリアルシステムにウィジェットのオーバーレイ表示を新規に追加しました。
* 新しいアセットとフォルダがクラス フォルダに作成できないようにしました。
* 空のプレビューメッシュパスがAutomationTest警告を出さないようにしました。
* 無効のワークスペースが指定された時に、ソースコントロール ログインは正しく拒否されるようになりました。
* 主要ウィンドウの z オーダーが通知に影響を受けないようにしました。
* 他者によってチェックアウトされたアセットは、「Submit to Source Control」で正しく処理されるようになりました。
* [depot->p4 workspace] から手動マッピングへの依存をなくしました (history & diff で問題を修正) 。
* 可能な場合、移行ファイルはソース コントロールへ追加されるようになりました。
* コンテンツ ブラウザの使用時に、ソース コントロールがファイル ステータスをスパムしないようにしました。
* サブミットするファイルを正確にチェックするバックグラウンド タスクを追加しました。
* ソース コントロール ログイン ダイアログをより利用しやすい表示にしました。
* 内蔵パッケージに対して、コンテンツ ブラウザが SCC ステートの要求をしないようにしました。
* スクロール時にサブミット ダイアログがサイズ変更をしないようにしました。
* アクタ プロパティの「Use Selected」はサブメニューへ移動しました。 
* いつでも Perforce 操作の停止を有効にします。
* **ワールド ブラウザ**
	* ワールド基点の移動は、物理アクタの移動にPhysX3.3関数を使用するようになりました。
	* ストリーミング レベルに LOD サポートを追加しました。
	* レベルタイルに[Details] パネルを追加しました。[Details] パネルが同様の機能性を提供するため、ストリーミング レベルのビューは削除されました。
	* ワールド フォルダを再スキャンしてワールド ブラウザのキャッシュされたデータを更新する「Refresh」コマンド (F5) を追加しました。
	* タイルのソート順序を定義するレベルタイルプロパティへZOrderを追加しました。
* クラスのドラッグ時にコンテンツブラウザの「Move」、「Copy」メニューを表示しません。
* ロード中のスクリーンメッセージにフリッカーが発生しなくなりました。
* ワールド/ローカル座標ボタンにツールヒントが表示されるようになりました。 
* 再入力をチェックして円形がポーズにリンクしているかチェックします。
* AddEvent が正確なアクタ ラベルを表示するようになりました。
* ヘッダから FColorTheme 実装を移動させて、前回のチェックインのマージが原因で発生した不良タブを一掃しました。 
* 追加のデータはスタティックメッシュエディタでアイコン表示されるようになりました。
* さまざまな細かい改善と微調整がテクスチャエディタのユーザビリティに追加されました。
* 誤ったエディタモードが原因で発生するエラーは、その理由と表示方法を指定できるようになりました。
* ベース マテリアルへリセットされた時に、 OnResetToDefaultClicked デリゲートが発行されるようになりました。 
* コマンドラインで「 -interactivetutorials」と一緒に起動されない限り、InteractiveTutorialsはnullです。
* マップのライティングの再ビルドが必要な場合、マップはダーティとマークされなくなりました。
* タブ表示する子がない時は、タブ表示を防ぎます。
* スパムによるスタティックメッシュのスポーン時に、クラッシュを回避します。
* 新規のコード プロジェクトの作成時にエディタが閉じなくなりました。
* 平行して挿入するタブが見つからない場合、 InsertDocumentTab がタブをスポーンするようになりました。 
* エディタからソリューションを開くときに、確実に絶対パスを使用します。
* 焦点を失った時に提案ボックスが非表示になります。
* エミッターのカラー ピッカーはモーダルではなくなりました。
* Color Theme がドロップダウン リストに適切なテキストを表示するようになりました。
* 不具合のあるタブや ID がエディタをクラッシュすることはなくなりました。
* ソース コントロール「エラー」が原因で「Convert メッシュ」がエラー フラグを表示することはなくなりました。 
* MessageLog はユーザーが表示した最初の入力、もしくは最後のログへデフォルト設定されます。
*  [Enter] キーを押した時点で Asset Picker で何も選択されていない場合、自動選択と単独または最初のアセットののアクティベート機能が追加されました。
* フォルダパスがプラットフォームに対して有効にフォーマットされていることを確認するため、 [New Project] ウィザードが追加されました。
* マテリアル選択:素早く入力するとフィルタリングが壊れてしまうため、bShouldNotifyNextAssetSyncフラグを削除しました。 
* [Choose Files to Save] クリック時の Asset Saving 通知がエラーによく似ていたので、Notification(通知) に変更しテキストが明確になるよう修正しました。 
* [Favorites] からレベルの削除は困難でした。お気に入りリストへの入力はレベル リストが開かれた時のみ追加/削除ができました。この必須条件を取り除いて Open/Removing オプションをサブメニューへ移動しました。また、一貫性にかけた内部のエントリ名のバグを修正しました。
* Normal Map Texturesの自動再インポートは、DXT5n法線マップのDefer Compressionとcompatibilityモードの併用が原因で破損していました。圧縮されていないディファード法線マップに対しXGXR8が追加されました。 
* ウィンドウ管理：新規タブの作成時、またはウィンドウ配下の別のタブを選択して更新します。常に「"map - Unreal Editor"」のネーミングスキームを維持するマスター/ルートウィンドウでない限り、タブラベルのタイトルを変更します。
* オートセーブ進捗ウィジェットに [Cancel] ボタンをオプションで追加しました。
* コンテンツ ブラウザ:Shared または Private コレクションを有効にするテストが評価されるのは、コレクション コンテクスト メニュー (右クリック) の作成のみなので、 Shared または Private コレクションを作成することができます。
* 複数回適用された平行移動、回転、スケーリングはデルタを使用しているため、アタッチされているグループ化されたアクタは正確に平行移動しませんでした。親アクタがグループ アクタで修正されないようにチェックを追加しました。
* Factory からアクタを追加するために、レベル エディタ コンテキスト メニューを更新しました。アクタは Factory で bShowInEditorQuickMenu フラグを使用します。
* クロス プロジェクトから移行したレベルのワールド設定が原因のクラッシュを、現行プロジェクトに新たなワールド設定を作成して回避しました。
* レベル ブラウザのサブレベルの可視性の変更により、サブレベルの「umap」ファイルがダーティになりました。エディタ内部のレベルの可視性の変更のみを行っている場合、ダーティ フラグをリセットします。
* 参照オブジェクトからコンテンツブラウザへコレクションを作成すると、指定パスにあるNullフォルダが要因となり、"u_pattern_syntax_error"の権限を持つコレクションが作成されていました。このパスの構成を訂正しました。
* ヘッダのサブカテゴリの一部をより記述的にしました。
* [Details] パネルに、可視のメニュー項目として「Expand All Categories」と 「Collapse All Categories」があります。
* [F1] キーはアセット エディタ上でコンテキスト感受性の動作をするようになりました。
* シーンアウトライナーのソートが可能になりました。
* **スレート**
	* SComboBox と SComboButton は Slate ウィジェットスタイルを使用し、 FEditorStyle 依存ではなくなりました。
	* 必要に応じてタブをフラッシュできるようになりました。
* PIE または SIE セッションが一時停止、再開、または停止された時にデリゲートの利用が可能になりました (既存の再生と停止に追加)。
* 新規のアセットのネーミング時に無効なキャラクターに対して警告が表示されます。
* 最後の自動保存から変更があった時のみに自動保存が実行されます。
* アセット SCC とダーティステートを表示するためにコンテンツ ブラウザ カラムビューが更新されました。
* 非モーダル カラー ピッカーが改善されました。
	* 元に戻す / やり直す操作が完全にサポートされました。
	* カラー プロパティの変更はオブジェクト上でインタラクティブにプレビューできます。
* コアなスレートウィジェット全てから FEditorStyle を削除しました。
	* 進行中の作業ですが、いくつかのウィジェットクラスは作業が完了しています。
* 以下の領域にエディタの使用状況を追跡する新規のエンジン分析が追加されました：
	* PIE（Play-in-editor）の使用量
	* ブループリントの作成（親クラス、タイプ、作成手法）
	* タブとウィンドウの使用の結合
	* レベルへポーンを直接追加
	* ブループリントコンテキストメニューの使用量
	* BSP（バイナリ空間分割）ブラシの使用量
* SoundCue エディタの Result ノードを Output へ名前変更
* SoundWave をダブルクリックしてプロパティを表示
* カーブ エディタが前回選択したキーの位置を、新たに選択したキーに適用させないようにしました。
* Sound Classes と Sound Mixes の潜在的に危険な組み合わせが作成された時に警告が表示されます。
* 従来の接続の入力へ追加された Sound ノードが自動的に接続するようになりました。 
* ライブ更新が有効な時は、 Material Editor ノードはリアルタイムで更新されます。
* スレート マテリアル エディタのパフォーマンスが向上しました。
* Material Editor ノードが以前よりも圧縮されました。 
* マテリアル エディタへのドラッグ＆ドロップ操作を取り消せるようになりました。
* Material Result ノードは正確な入力を表示するようになりました。
* Material ノードと Comment 位置の変更により、ユーザーは変更の適用を促されるようになりました。
* 変更時に動的パラメータ名が更新されるようになりました。
* Material Input ノードのグレーアウト表示されたピンのテキストもグレーアウト表示されるようになりました。
* サウンドの再インポート時にカスタム設定が保持されます。
* イタレーションするアクタの検索に TActorIterator は GetObjectsOfClass を使用します。
* Allow Translucent Selection がデフォルトで使用できるようになりました (ユーザビリティ フィードバックに基づいて)。
* デフォルトの template マップは (エディタで [File -> New] の選択時に利用可能) 以前よりも簡略化されました。 
* 国際管理化のために終了ロジックを追加しました。システムからメモリリークの誤検出がなくなりました。
* 国際管理化システムは、常にゲームデータのロードをしなくなりました。
* 非 Windows プラットフォームは、ローカライズされたフォーマット形式の文字列で、グレイヴ・アクセント (`) と アポストロフィ (' ) を適切にサポートします。
* アセット機能から収集したローカリゼーションデータにより、コリジョンのレポートが改善しました。
* Settings UI のナビゲーションメニューが改善しました。
* **Play-In-Editor** 
	* マルチプレイヤー PIE でスクリーン空間をより効率良く使用するために、ウィンドウ レイアウト アルゴリズムが改善されました。


#### Blueprints
* [My Blueprint] パネルでアイテムにマウスをかざした時、また Get ノードにマウスをかざすと変数のツールヒントが表示されます。
* 入力配列ピンをドラッグ時に、Make Array ノードの追加がユーザーに提示されます。
* 検索ワードにスペースを挿入することで [Find in Blueprint] 機能の検索問題が解消されました。
* [MyBlueprint] ウィンドウで親グラフをダブルクリックしても、ウィンドウを折りたたんだり展開しません。
* ブループリント グラフのナビゲーション方法を調整しました。
	* グラフパネルで関数またはマクロ グラフをダブルクリックすると、現在のタブを再利用する代わりに新規のタブが開きます (もしくは既に開いているインスタンスにフォーカスします)。
	* [Find Results] ウィンドウをダブルクリックすると、現在のタブを再利用する代わりに新規のタブが開きます (もしくは既に開いているインスタンスにフォーカスします)。
	* グラフパネルで折りたたみグラフをダブルクリックすると現在のタブが再利用されます。
* ネイティブ バージョンのいくつかの Make/Break Struct ノードを非表示にします。
* 親と子のブループリント間のタイムライン名、メンバ変数名、関数グラフ名が重複しないようにする対策を増やしました。
* スケルタル メッシュからスケルトン、またテクスチャからマテリアルを作成すると、デフォルトで新規のアセットに固有名が与えられます。
* 選択したアクタからブループリントを作成すると、ダイアログに名前を入力するオプションが与えられます。
* 全てのコンポーネント クラスにツールヒントが追加されました。
* ブループリント パレットに MakeとBreak の構造体ノードが追加されました。
* 必要箇所でコメントが検索できるようにブループリントの検索機能が改善されました。
* より望ましい結果を提供するために、ブループリント パレット / コンテキストを自動選択するコードを修正しました。
* ブループリント コンテキスト メニューのキーボード処理を改善しました。
* 検索ワードにスペースを挿入することで [Find in Blueprint] 機能の検索問題が解消されました。
* ブループリント コンテキスト メニューに [open in new tab] を追加しました。

#### ゲームプレイとフレームワーク
* ゲームフレームワーク エンジン クラスのコメントをクリーンアップしました。
* ゲームフレームワーク エンジン クラスから廃止されたプロパティとメソッドが削除されました。
* 廃止された UWorld プロパティの RealTimeToUnPause が削除されました。
* 廃止された PlayerController プロパティの MaxResponseTime が削除されました。
* 廃止された PlayerController メソッドの ConditionalPause() が削除されました。
* PlayerState から廃止されたネットワーク統計関連の数多くのプロパティを削除しました。
* HUD と HudSettings クラスから未使用の HUDCanvasScale プロパティを削除しました。
* UEngineMessage から未使用の FailedSpawnMessage プロパティを削除しました。
* GameMode から StreamingPauseIcon プロパティを削除しました。クライアントがこのプロパティの使用を試みるとクラッシュします。
* GameModeとPlayerState から未使用の GameMessageClass プロパティを削除しました。 
* **入力システムの改善**
	* 入力デリゲートは、単一フレーム内部でキーが押された / リリースされた順序での実行が保証されるようになりました。
	* 単一フレーム内部で押下、リリース、そして再度押下された場合、入力デリゲートを単一フレーム内で複数回ディスパッチすることができます。
	* ペアの入力アクション (押下とリリースが結合したアクション) は、ダウンステートを管理するようになりました。複数キーがアクションと結合する場合、最初に押されたキーがアクションをキャプチャー、非キャプチャキーによって押下もしくはリリースされたイベントは、キャプチャされているキーがリリースされるまで無視されます。A と B がアクションにマッピングされている例は、押下デリゲートおよびリリース デリゲートの結合の両方の場合に存在します。 
		* 例 1:
		* A が押下されてアクションをキャプチャして、押下デリゲートがディスパッチされます。 
		* B が押下されて、押下デリゲートがディスパッチされないように A がキャプチャされます。 
		* B がリリースされて、リリース デリゲートがディスパッチされないように B をキャプチャしません。
		* A がリリースされて、リリース デリゲートがディスパッチされるように A がキャプチャされます。
		* 例 2：
		* A が押下されてアクションをキャプチャして、押下デリゲートがディスパッチされます。
		* B が押下されて、押下デリゲートがディスパッチされないように A がキャプチャされます。
		* A がリリースされて、リリースされたデリゲートがディスパッチされるように A がキャプチャされます。
		* A が再度押下されて、 A がキャプチャして押下デリゲートがディスパッチがされるようにキャプチャはありません。
		* 前回のリリース デリゲートがディスパッチされたように、 A がリリースされます。
		* B がリリースされて、リリース デリゲートがディスパッチされないように B をキャプチャしません。
* [Load Stream Level] と [Unload Stream Level] は、レベルブループリントのみに限らず、任意のブループリントから呼び出すことができます。
* レベルのストリーミングに配置されたポーンのコントローラーはパーシスタント レベルではなく、ストリーミング レベルでスポーンされるようになりました。
* BeginPlay 中の操作を可能にするため、HUD は BeginPlay の前に初期化されるようになりました。 
* **Oculus Riftの統合**  
	* Oculus Rift のサポートに対して、いくつかの改善とバグ修正がされました。ステレオ スコピック ビューで以前レンダリングができなかった特定のポストプロセスとスクリーン空間エフェクトに対する修正が含まれています。
* 全ての新規のゲーム テンプレート プロジェクトのソース ファイル レイアウトを簡略化しました。
* コードベースの「SampleGames」ディレクトリテストとして、Platformergameを「Samples」へ移動しました。
	* メインディレクトリから「Samples」配下の「Games」サブディレクトリへ、全てのコードベースのゲーム例の移動に取り組んでいきます。「Games」は現在の「SampleGames」フォルダを名前変更したフォルダです。(例：現時点では  //depot/UE4/PlatformerGame/ ? //depot/UE4/Samples/SampleGames/PlatformerGame/ ) (最終的なフォルダ位置は恐らく次のようになります。//depot/UE4/Samples/Games/PlatformerGame/)
* RPC Client/Server 関数から値を返すと、コンパイルエラーとして検知されるようになりました。
* **コンポーネント移動の最適化**
	* 度重なる MoveComponent の呼び出しは、 FScopedMovementUpdate() オブジェクト内に MoveComponent コールをカプセル化するため、移動シーケンスがコミットされるまで大部分の動作を保留にします。
	* スコープ内の移動は、移動がコミットされるまで (スコープが文脈を離れた時に発生)  UpdateBounds()、OnUpdateTransform()、 UpdatePhysicsVolume()、 UpdateChildTransforms() などの更新を回避します。 
	* 大量のスコープの更新がサポートされています。最終スコープが終了まで移動はコミットされません。
	* 現在の移動スコープは元の状態に戻すことができます。つまり、スコープ開始時に位置は元の位置へ修復されます。
* **CharacterMovementComponent の最適化**
	* UCharacterMovementComponent で実行される移動に対してスコープ内の移動更新を有効にしました。キャラクター移動のパフォーマンスがほとんどのケースで 2 倍から 3 倍に向上しました。
	* 傾斜に沿った移動にもはや StepUp() を使用しませんが、その代りにサーフェスと平行に移動します。所要スイープの数が削減されました。実用的な場面において、傾斜は階段に推奨されるコンテンツ ソリューションです。
* **CharacterMovementComponent の改善**
	* StepUp() の機能性により一貫性が増しました。
	* フロアチェックの観点から、シミュレートした移動が実際の移動とさらに一致するようになりました。
	* シミュレートした移動は、歩行可能な傾斜を垂直なバリアとして処理せずに、スムーズにスライドするようになりました。
	* ベロシティは即座に最高速度にクランプせずに、全移動モード (外力から) で最高ベロシティを上回るようになりました。ベロシティが最高速度を上回った時点で、摩擦とブレーキが適用されます。
	* 非水平面上の地上移動をあたかも水平面上のような移動を維持するベロシティ、またはサーフェスに対して平行移動を維持するベロシティをコントロールするパラメータを追加しました。　
* BP blend ノードを使用時にテキストが正しくトリム　(装飾) されるようになりました。
* デフォルト設定のボーン アタッチメント座標空間をワールドからローカルへ変更しました。
* アタッチされていないパーティクルのスポーンをサポートするためにパーティクル anim notify UAsset を修正しました。
* PHat のウィジェットは編集後に消滅することはなくなりました。
* アタッチポイントの編集時に、通知がドロップダウン リストをサポートするようになりました。
* ペルソナで保存すると、修正されたアセットのみが保存されるようになりました。
* Kismet InitとUpdateAnim イベントにツール ヒントが設定されました。
* 通知によるカスタム通知の削除を有効にするため、メニュー エントリを新たに追加しました。
* Behavior Trees コアとツールは以前として WIP に位置します。
* アニメーション システムの改善
	* 物理アニメーション：BlueprintCallable Physics Weight 関数 SetPhysicsWeight/AccumulatePhysicsWeight を追加しました。
	* BlendSpace ノードは、ピン経由で Position と Looping の設定を有効にします。
	* IK ノードは、エフェクタとジョイント位置を表示します。
* 物理：ラグドール処理を改善するためにデフォルト設定が微調整されました。
* 最適化：物理 / ティックを無効にすることによりデディケイテッド サーバーの最適化しました。


#### Rendering
* HardwareSurvey へ GPUIndex を追加しました (高速設定のため信頼下限で簡単実行)。
* スペキュラを切り離すために、アルファシーンカラーのアルファ チャンネルを利用して実験的なスクリーン空間のサブサーフェススキャッタリングを採用しました。大部分のレンダリング パスには最少限のコストが発生しますが、32 ビット フォーマットの仕様時は、実験的なスクリーン空間のサブサーフェス スキャッタリングを有効にしません。
* cvar が拡張オプションとして使用できる場合、ECVF_Scalability がドキュメントに追加されました。
* r.TonemapperQuality スケーラビリティを追加しました (高スペックのためにノイズをカラー量子化に対抗させるため)
* RT と GT で使用時に、パフォーマンスの向上とスレッドセーフのために型付のコンソール変数を追加しました。
* テキストをレンダリングするアクタに、簡単選択のためにアンカー スプライトが追加されました。
* [Exposure] メニュー オプションを整理しました。ポストプロセスの露出コントロールは、「Auto Exposure」配下に名前変更および再グループ化されました。
* エディタは、中間ではなく精度の高いモードで起動するようになりました。
* 「r.SceneRenderTargetResizeMethod」を追加しました。
	* シーンのレンダー ターゲットのメモリー使用法をコントロールします。
* デフォルト テクスチャが選択されたテクスチャを含めた material expression ノードを作成しています。
* UIBlur レンダリングを最適化しました。
	* リクエストされたセクションのみをレンダリングします (全スクリーンの代わりに)。
* 迅速なアクセスのために、大部分の CVars を新規の特定タイプのフォーマットへ移動しました。
 
 
#### Animation
* ユーザーがスケルトンの代わりにアセットをメッシュソケットへドロップしメッシュへアタッチするとペルソナがこれを検知します。 
* 全ての Skeletal Control と Blend Pose Blueprint ノードに記述的なツールヒントが追加されました。
* PhAT でシミュレーション中、[Ctrl-右マウス] 操作でオブジェクトとのインタラクションが可能なことを示すがオンスクリーンメッセージで表示されます。
* 未使用なコードは、skeleton compression 関数から削除されました。


#### Core
* エンジン バージョンに基づくように、バイナリ ファイルのバージョン付スキームを修正しました。
* #プラグマ領域などに接触した際に拒絶しないように、 UnrealHeader ツールは、認識しない全ての# プラグマを無視するようになりました。
* HeaderGroups は徐々に機能から削除される方向に進んでいます。 headergroups の継続的な使用は中止しなくてはいけません。
* **ビルドシステム** 
	* bPrintPerformanceInfo 診断変数を UnrealBuildTool へ新たに追加しました。
*  ULevel へ AssetUserData サポートを追加しました (カスタムペイロードと一緒にレベルを拡張するプラグインを有効にしました)。 
* C++ コードの Hot Reload の信頼性がより高まりました。 


#### Platforms
* Linuxサポートを改善しました（正しいコールバックを取得するためDWARFがパースするようになりました。プラットフォームの抽象レイヤーはプロセス管理をカバーするように拡張されました。HTTPモジュールの追加機能） 
* 全 [Editor] ウィンドウが、Mac OS X の [Dock] メニューにリストされるようにしました。
* Mac OS X Mavericks の Space でディスプレイごとのマルチモニタ モードでセカンダリ モニタ上にエディタ ウィンドウを配置した時に、エディタ ウィンドウが消滅しないようにしました。 
* スナップとハイパーアクセラレーションを削減するために、一部の [Editor] モードでマウスドラッグ処理を改善しました。
* Mac OS X 上でダブルクリック操作で Unreal プロジェクトを開くサポートを追加しました。
* Subversion の Xcode のコピーを利用して、 Mac OS X に対応する Subversion のサポートを有効にしました。 
* マチネにムービーファイルを作成するために Mac OS X サポートを実装しました。
* 別の実装のようなサウンドとなるように、Mac OS X の CoreAudio reverb を微調整しました。
* Direct3D バージョンに従って、スレートにスタンドアローンの OpenGL レンダラーを導入しました。
* シミュレーターに対する早期サポート、次の QA ビルドによりこれらの切り替えが簡単になります。


#### Networking
* セキュリティの改善
* Lifetime プロパティ
* レプリケーション パフォーマンス


#### Online
* オンラインのビーコンコードの安定性が向上しました。
* もはや必要がなくなってもビーコンアクタは破壊されませんでした。
* ビーコン コミュニケーションが潜在的に無限のアクタをスポーンする弱点を修正しました。
* オンラインのセッション API の安全性が向上しました。
* 「ending/ended」ステートと差別化するために、セッション API に「Destroying」ステートが追加されました。
* 一般的なオンライン非同期タスクをクリーンアップしました (templatized functions / code reuse)。
* オンライン インターフェースの全シェアードポインタがスレッドセーフになりました。
* LAN による Steam への接続が正しく機能するようになりました。
* 既存の設定キーを所有する冗長したオンライン検索キーを削除しました。
* FOnlineKeyValuePairs<FString,VariantType> データにネットワーク バイ トオーダー シリアライズ サポートを追加しました。
* Mcp OSS
	* mcp アカウントマッピングテストを追加しました。
		* "QUERYMAPPINGS <list of ids>" 経由の exec
	* Mcp コンフィグを組み込みソースファイルへリファクタリングしました。                                                   
		* 開発に「defaultengine.ini」ファイルの ini 値をまだ使用することも出来ます。
		* ゲームはコールバックデリゲートを使用してコンフィギュレーションをオーバーライドすることができます。
* Http
* 要求された completion デリゲートがトリガーされた後に http request ポインタが破壊される問題を修正しました。
	* teh completion デリゲートから同リクエストを繰り返し再利用出来ないことによる、http リクエストのチェーンの破損がありました。


## 既知の問題
* パフォーマンスキャプチャテストに表示される警告
* インポートした「.APB」被破壊性メッシュをフラクチャ (破砕) すると、期待以上の数のフラクチャが発生します。 
* FOLIAGE (フォリッジ)：可視化出来るブラシはありません。
* ウィジェットでスケーリングすると 0 で停止してこの値に留まります。
* ELEMENTAL（エレメンタル）：断崖のマテリアルが黒で表示されます。
* Error Failed import:EdGraph /Engine/EditorBlueprintResources/StandardMacros.StandardMacros:Do N
* PLATFORMERGAME:プレイヤーがゲームの途中に差し掛かると、 2 番目のエレベーターがジャンプします。
* QAGAME:CRASH:「TraceTest.umap」を開きます。
* SHOOTERGAME:Bot AIが原因で、敵はある期間中に武器を発砲することなく逃げ回ったり静止することができます。
* SHOOTERGAME:ENSURE:botsと共にマッチを開始します。
* XboxOne:全てのTextRenderActorsにアーティファクトが生じています。
* ROCKET:Mac:Xcode:「Game.app」ファイルを起動することができません。
* ROCKET:Mac:CONTENT EXAMPLES:Blueprint_HUD上のマップの外側にスポーンします。



