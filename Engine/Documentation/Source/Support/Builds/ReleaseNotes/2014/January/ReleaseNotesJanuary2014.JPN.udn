Title:2014 年 1 月リリースノート
Crumbs:%ROOT%, Support/Builds
Description:
Availability:Licensee
Template:ReleaseNotes.html

[TOC(start:2 end:2)]

## ビルド情報


[REGION:simpletable]
| アイテム | 情報 |
| ---- | ---- |
| **Labels** | [INCLUDE:#labels] |
| **Built from Changelist #** |  (//depot/UE4-QA/Promotable-CL-1986836) |
| **Branched from Changelist #** |  (//depot/UE4/Promoted-CL-1973917) |
| **Visual Studio Version** | Microsoft Visual Studio 2012 Version 11.0.60610.01 Update 3 |
| **DirectX** | June 2010 |
[/REGION]

<!--
[EXCERPT:Labels]
QA_APPROVED_UE4_BUILD_2014_01  
QA_APPROVED_UE4_BUILD_CURRENT  
QA_APPROVED_UE4_BUILD_MINIMUM
[/EXCERPT:Labels]
-->

## 重要情報

 * 現時点のエンジン開発ロードマップ: [UE4 Roadmaps](https://udn.unrealengine.com/questions/topics/roadmap.html)
 * 修正されたバグ: [UE4 Fixed Bugs January 2013](UE4_Fixed_2014_January.xlsx)
 * 周知の問題: [UE4 Known Issues January 2013](UE4_Bugs_2014_January.xlsx)
 

##主な新機能

####ブループリント

* **Format Text Node** 
	* 新しい Format Text ノードがブループリントに追加されました。	

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode01.png)

	* 「Format」テキストはリテラルあるいはピン接続が可能です。リテラルを使用すると、フォーマット用の引数が自動生成されます。 

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode02.png)

	* これらの引数はリテラルとして、または変数から入力することが可能で、出力テキストは引数をピンに接続している値に置き換えます。	 

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode003.png)

	* 「Format」ピンは接続された場合、変数のため解読は不可能です。この場合、ピンを自分で追加し、可能性のある引数に因んだ名前を付けます。このように、Format Text ノーの使用設定は、複数の可能性に対して行うことができます。引数が Format の引数に一致すると、与えられた情報を利用します。	

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode04.png)

	* ピンの名前は [Details] パネルで変更、追加、削除することができます。

		![](Support\Builds\ReleaseNotes\2014\January\FormatTextNode05.png)

* **ノード スタイルの変更と Append Array 機能**
	* 1 つの配列のコンテンツを別の配列の終わりに追加する Append Array 機能がつきました。	

		![](Support\Builds\ReleaseNotes\2014\January\AppendArray.png)

	* ブループリントのレベル アクタ リファレンスを見つけやすいデザインに変更しました。	

		![](Support\Builds\ReleaseNotes\2014\January\References.png)

	* 配列機能ノードも新しいデザインになりました！！	

		![](Support\Builds\ReleaseNotes\2014\January\ArrayFunctionNodes.png)


#### エディタとツール

* **サウンドキュー エディタ**
	* サウンド ノードのパレットがサウンドキューのエディタに追加されました！

		![](Support\Builds\ReleaseNotes\2014\January\SoundPalette.png)

* **イベントのリスト出力**
	* グラフのサブイベントリスト出力が [My Blueprint] タブに再度追加されました。イベント ノードのフォーカス、名前の変更 (カスタム イベント用)、検索、削除はここで行えます。						

		![](Support\Builds\ReleaseNotes\2014\January\EventListing.png)

* **ドキュメント**
	* それぞれのノードを分かりやすく説明するために、ツールチップが多数追加されました。

		![](Support\Builds\ReleaseNotes\2014\January\Documentation.png)

* **Scalability インターフェース**
	* 拡張性に対し新しいユーザー インターフェースがエディタに追加されました。	

		![](Support\Builds\ReleaseNotes\2014\January\scalability.png)

* **シーン アウトライナーにおけるアクタの可視性**
	* 各アクタの脇に表示される目のアイコンを使って、シーン アウトライナーからアクタの可視性の切り替えが簡単にできるようになりました。
		![](Support\Builds\ReleaseNotes\2014\January\ActorVisibility.png)


* **レベル ビューポート**
	* レベル ビューポートで、例えばカメラを選択すると、カメラから見えるものを現在のビューポートの [Picture-in-Picture] ボックスでプレビューすることができます。カメラの選択を解除すると、プレビューがなくなります。  

	* レベル ビューポートの Actor Previews にこれらに対するボタンを追加したので、別のオブジェクトを選択しても表示されたままになります。

		![](Support\Builds\ReleaseNotes\2014\January\LevelViewport01.png)

	* 見ての通り、これは加算なので、ピンしたプレビューに加えて、選択した他のプレビュー アクタも見ることができます。 

	* この機能の便利な使い方としては、カメラ視点のプレビュー中に、 Matinee や複数のビューポートを使用せずにカメラショットによるアクタの移動があるでしょう。	

		![](Support\Builds\ReleaseNotes\2014\January\LevelViewport02.png)

#### レンダリング
* **Sky Light と事前計算されたベント法線**
	* Sky Light アクタと Sky Light コンポーネントがブループリントに追加されました。

	こちらは、SSAO のみの Ambient Cubemap です。	  

	![](Support\Builds\ReleaseNotes\2014\January\Skylight01.png)	

	そしてこちらは、ベークされたシャドウイングのある Sky Light です。	

	![](Support\Builds\ReleaseNotes\2014\January\Skylight02.png)	

	**ユーザビリティ**	
	 
	* Sky Light はレベルの遠い部分 (Sky Distance Threshold 以遠全て) をキャプチャし、それをライトとしてシーンに適用します。  
	  
	使用するキューブマップを手書きのコードによって指定することもできます。		

	![](Support\Builds\ReleaseNotes\2014\January\CubeMap.png)	
	* これまでは、Lightmass の環境色を通過するスカイ ディフーズに異なる定数を与えながら、スカイを反射させる Ambient Cubemap を選択しなければなりませんでした。 

	 
	* Sky Light は完全に環境色に変わり、やがては Ambient Cubemap に変わります。 

	* ただし、現時点では、ライティングを再ビルドまたは手書きのコードによる指示では Sky Light はシーンを再キャプチャするのみです。 
	 
	**ベークされたシャドウイング**		

	* 現在サポートされている Sky Light は Stationary Mobility のあるバージョンのみです。つまり、 Lightmass からベークされたシャドウイングがあります。	

	* レベル内に Sky Light を置いたら、ベークされたシャドウイングを取得するために再度ライティングをリビルドする必要があります。  

	Sky Light によってのみリットされます。	

	![](Support\Builds\ReleaseNotes\2014\January\Skylight05.png)

* **実験的な新機能：DBuffer Deferred Decals**
	* ベークされた / lightmass ライティングで Deferred decals が使えるようになりました。	 
	負荷があるので、全てのプロジェクトがベークされたライティングを使用するわけではなく、適切なデカールが必要です。プロジェクト設定としての有効化が可能で、デカール ブレンド モードを変更する必要があります。	

		![](Support\Builds\ReleaseNotes\2014\January\DBufferDeferredDecals01.png)	

	右側は、従来のデカール (no DBuffer) のあるベークされたライティングのライティングは壊れます (左側のように見えるべきです)。
	* 機能をアクティベートするには以下を行います。
		* ローカルで DBuffer を試すには、 [SystemSettings] の BaseEngine.ini に置きます。
		* r.EarlyZPassMovable=1
		* r.EarlyZPass=2
		* r.DBuffer=1
		* 新しい DBuffer decal blend モードを使用します。
	* プロジェクトでその機能を使用したい場合は、同じ変更をプロジェクト設定で行うことができます。


## 新機能の追加 

#### エディタとツール
* 1 つのフィルタを分離し有効にするために、新しいアセットブラウザ フィルタ　コンテクストメニューを入力します。
	* アクティブなフィルタのリストの中の 1 つのフィルタ上にコンテクスト メニューを表示させて、[enable this only: `<filtername>`] を選択することでアクティベートします。
* LODs タイトルを折りたたんでも、LOD Distance が表示されるようになりました。
* プロパティ マトリックス ビューでサポートするアセットに対し [Asset picker] ボタンが表示されるようになりました。
* 選択されたグループ化されたアクタ上を Ctrl ＋クリックすれば、グループ全体の選択が解除されるようになりました。
* フィルタ メニューの一番下にフィルタリセット用のボタンが追加されました。
* サブメニュー入力上でボックスとアクションが切り替えられるようになり、サブメニューを使用するための CB フィルタ メニューが修正されました。
* Dirty maps/assets が名前の横のドックタブにアスタリスクを表示するようになりました。
* コンテンツ ブラウザのアセットを右クリックと、Explore コンテンツ メニュー オプションが追加されました。
* シーン アウトライナーに可視性の切り替えが追加されました。
	* クリックにより複数の可視性アイコンをスワイプできるようになりました。
* サウンド ノードのパレットがサウンドキュー エディタに追加されました。
* マテリアル エディタ 表現式と関数リストが 1 つのパレットにまとめられました。
* サウンドキュー エディタの Sound ノードをダブルクリックするとそのノードが再生されます。
* マテリアル関数がマテリアル エディタの右クリック コンテクスト メニューに追加されました。
* Material ノードの Particle Direction、Particle Speed、Particle Position、Particle Relative Time がメッシュ パーティクルで機能するようになりました。
* UTF-8 のサポートが Perforce プラグインに追加されたので、ユニコード サーバーが使用可能になりました。
* インスタンス化されたスタティック メッシュ コンポーネントが [Blueprint Components] ビューで編集可能になりました。
* Engine API ドキュメントが CHM フォーマット (Engine\Documentation\CHM\API.chm に格納) で利用可能になりました。 
* ランドスケープでハイトマップとウェイトマップのインポート / エクスポートに .png フォーマットがサポートされるようになりました。
* [Change component size] ツールがランドスケープ エディタに追加されました。
* ランドスケープ スプラインに Cut/Copy/Paste サポートが追加されました。
* ソース メッシュのコリジョンが変更されると、スプライン メッシュ コリジョンが自動的に再ビルドされるようになりました。
* ランドスケープ スプライン上に投影されているシャドウを無効にするオプションが追加されました。
* スプライン メッシュに MaterialOverrides が追加されました。
* GetMorphTarget ブループリント呼び出し可能な関数が追加されました。

#### ブループリント
* ブループリントに接続しデディケイテッド サーバー上で起動する TimelineComponents を認識するために、Blueprints.Find Timelines On Server エディタ自動化テストが追加されました (Timelines はティックしパフォーマンスに影響を与えることができます)。
	* このテストはどのタイムラインがノンコスメティック (サーバー) イベントにより実行される可能性があるかを見つけるために実行チェーンを後ろから辿って、ログ内にこれらをエラーとしてフラグします。
	* マクロが StandardMacros ("Can Execute Cosmetic Events") に追加されました。自動化テストはこのマクロを明示的にチェックします。
* GetStreamingLevel BP ノードが追加されました。ブループリントのレベル ストリーミングをよりよく制御する ULevelStreamingKismet オブジェクトを返します。
* コンポーネントの可動性を表すアイコンがブループリント コンポーネント リストビューのコンポーネントに沿って表示されるようになりました。
* イベント ナビゲーションが再度 [My Blueprints] タブに追加されました (グラフで実行されたイベントがツリーでリスト化されるようになりました)。
* ブループリント内部では、移動性の強いコンポーネントが移動できないコンポーネントを親にすることはできなくなりました。
* ブループリント内部では、エディタのみのコンポーネントの下のゲーム コンポーネントを親に持つことはできなくなりました。
* ブループリントで利用可能なオブジェクト上で (ProhibitedInterfaces メタデータ経由で) インターフェースが実行されるのを禁止できるようになりました。
* Blueprint ノード上で、オブジェクト ピンが入力タイプから派生したオブジェクトを直接受け取れるようになりました。
* 任意のリビジョンに加えて、任意のブループリントをお互いに diff できるようになりました。
* Append Array 機能をブループリントに追加しました。
* Format Text ノードがブループリントに追加されました。
* テキスト変数をリテラルとして処理することができるようになりました。
* Number ノードに対し、様々なテキストがブループリントで利用できるようになりました。

#### レンダリング
* パフォーマンスと品質のバランスを取るためにエンジン設定が簡単に制御するコンソール コマンドのスケーラビリティが新しく追加されました。コンソールに「scalability」とタイプし、使用方法に関する全てのドキュメントを確認します。
* 新しい UI が [View] -> [Engine Scalability Settings] に追加されました。Scalability コンソール コマンドが提供するのと同じ機能へアクセスできます。
* スタティック メッシュおよびスケルタル メッシュの LOD 計算のスケール係数が追加されました。
* 2D シーン キャプチャ コンポーネントに対しポストプロセスのオプションが追加されました。
* スタティック メッシュ上に SetRenderCustomDepth(); と呼ばれる bRenderCustomDepth プロパティを切り替えるブループリント機能が新規に追加されました。
* エフェクトのソース アクタでコリジョン チェックを有効にする新規チェックボックスがコリジョン パーティクル モジュールに追加されました。相互作用させたいメッシュとパーティクルでブループリントを作成する場合に便利です。
* 透過処理がされたサーフェスに対する頂点フォグの使用を切り替えるマテリアル チェックボックスが新規追加されました。
* **Sky Light 機能**
	* ディフューズとスペキュラとユーザーが直接見ている物の間でスカイライトは統一されます。
	* スカイライト コンポーネントは距離ジオメトリを自動的にキャプチャし、それをライティングとしてシーンに適用します。
	* Lightmass はベント法線アンビエント オクルージョンをベークし、それにより指向性シャドウイングが生じます。
	* この機能は新しく、まだ完全には機能していません。例えば、透過アイテムにはキャラクター シャドウが全く適用されません。
* Particle light モジュールを透過アイテムに影響するように選択することができます。
* 全ての間接ライティングにマテリアル アンビエント オクルージョン出力が適用され、ボリュメトリック パーティクルに有益です。
* **事前計算されたビジビリティの改善点**
	* より完全に可能性のある再生エリアをカバーする新しいセル配置ヒューリスティックが追加されました。ただしビルド時間は増えました。
	* ビルド時間に対して様々な最適化が行われました。
	* 事前計算されたビジビリティの信頼性が向上しました。モバイルには重要なことです。
* **カスタム仕様の UV** 
	* 負荷が大きい操作をピクセル シェーダー マテリアル入力を補間する頂点シェーダーへ移動できるようになりました。
	* [Customized UVs UDN Page](https://udn.unrealengine.com/docs/ue4/INT/Engine/Rendering/Materials/CustomizedUVs/index.html)
* **適応サンプリングを用いたライトマス GI ソルバ**
	* 同じビルド時間での、状況が悪い方 (小さい窓から明るい光が差し込む) に高品質が提供されます。
	* 新しい World Settings lightmass プロパティ：必要とするマップに対するソルバ品質を高めるために使用する IndirectLightingQuality です。
* ini: r.EarlyZPassMovable=1   r.EarlyZPass=2  r.DBuffer=1 から有効化される DBuffer deferred decals (実験的な機能、ピクセル GPU メモリにつき負荷が 10bytes プラス、ライトマップによるデカールが可能、色、法線、ラフネス、分離したオパシティに対応 ) が追加されました。

#### ゲームプレイとフレームワーク
* LogVisualizer の改善点： ログ カテゴリのフィルタリング
* CharacterMovementComponents はポーンが立っているオブジェクトに力を適用し、PlayerPhysics が有効な場合オブジェクトにそれをオーバーラップさせるように一定の反発力を生成します。
* Physical Asset Tool (PhAT) の凸包サポート
* ナビゲーション クエリにカスタム仕様のフィルタを渡す方法が追加されました。
* GameplayDebuggingComponent を LogVisualizer と結びつけたので、AI がシミュレーション モードで LogVisualizer が存在すると、 LogVisualizer が選択された AI の表示ログを切り替えます。
* ReferenceViewer が EpicLabs ではなく、メイン エディタの一部になりました。
	* 既存のリファレンス ツールがリファレンス ビューアーのノードの右クリック メニューに移動しました。
	* グラフをより健全にするために、深度と幅の制限に対するサポートが追加されました。履歴も追加されました。
* CameraBlockingVolume が追加されました。このシンプルなボリュームは、 ECC_Camera コリジョン チャネルをブロックします。 
* KillZVolume が追加されました。このシンプルなボリュームに触れられたポーンは殺されます。
* MemReport コマンドは、Saved/Profiling/MemReports に対し包括的なメモリ レポートを出力します。動作は UE3 での memleakcheck と同じです。それが実行するコマンドは ini ファイル内で変更できます。
* **ForceFeedback**
	* ForceFeedbackEffect アセットがコンテンツ ブラウザで作成できるようになりました。エフェクトには、カーブと、そのカーブに影響を受けるサーボを示す boolean を含むエントリの配列が含まれます。
	* エフェクトの再生 / 停止は、 PlayerController の関数呼び出しによって実行されます。
* **SoundGroups**
	* SoundWave は SoundGroup に割り当てられます。サウンドグループは異なる解凍プロパティを持つことが可能です。今後サウンドグループは、ストリーミングするサウンドにフラグを立てるために使用されます。
	* カスタム仕様のゲームの SoundGroups はカスタム仕様の Collision Profiles と幾分似たように指定することができます。
* AnimNotify UI を手直ししたので、通知がトラックにクランプしてドラッグ＆ドロップがしやすくなり、トラック表示のズーム化を自動的にパンします。
* AnimNotifies をリファクタリングしたので、以前は使用が許可されていなかった時間 (0、シーケンスの長さ、セクション時間) の設定が可能になりました。
* アニメーションをリターゲットするスケルトンがコンテンツ ブラウザに追加されました (NULL スケルトンでアセットを開くと自動的にトリガーされます)。
* モーフ ターゲットの LOD のインポートが追加されました。
* ペルソナに UV 表示が追加されました。
* 頂点法線、接線 、従接線のビューがペルソナに追加されました。
* **ボイス**
	* 新規ボイス キャプチャ インターフェースの初回パスです。
		* DirectSound ボイス キャプチャの実装 (125ms 通知) が実装されました。
		* 適切な列挙方変数の不足 / マイクのプラグインとアウトの探知 (差し当たり起動時はプラグインのまま)。
	* 新規ボイス コーデック インターフェースの初回パス (opus 1.0.3、まもなく 1.1) です。
	* ボイス コーデックのタイミングに統計情報が追加されました。
* **スケルタル メッシュ** 
	* Simplygon を使用したボーン削減をサポートします。 
	* Simplygon によるメッシュ削減を実行する前に、選択したボーンを LOD から削除します。


#### コア
* Added hierarchical stats 表示が追加されました (stat groupname+、詳細は stat コマンドを使用)。
	* スレッドセーフ バージョンの FMemStack が追加されました。
* The UnrealHeaderTool マニフェスト (UHT の実行に使用する「レスポンス ファイル」) が中間フォルダに書かれるので、ビルド エラーの診断あるいは UHT のデバッグに使用できるようになりました。
	* マニフェストが JSON フォーマットになり、人間にとって読解が、またコンピュータにとってはパースがしやすくなりました。
* 診断を変更しやすいように、ホット リロードのコンフリクトは生成されたヘッダ ファイルの横に書き込まれます(.generated.h.conflict ファイルとして)。
* UnrealHeaderTool が UTF-8 BOMs のファイルをサポートするようになりました。
* Play-In-Editor(PIE) 用に複製されると、プロパティがシリアル化のみされるように、NonPIETransient プロパティ指定子が追加されました。 
* 追加のパッケージ ファイル位置を指定できるように -pakdir=dir コマンドライン パラメータが追加されました。
* ゼロ エンジン バージョンのサポート - エンジンは 0 エンジン バージョン (ローカル ビルド) パッケージのロードが可能になりました。
* NULL (None) アクティブ クラス リダイレクトのサポート
* リファレンスの除外が AddReferencedObjects でサポートされるようになりました。
* asymetrical キーでパッケージ ファイルに署名する機能が追加されました。

#### プラットフォーム
* コントローラのバージョンが追加されました (現在は PS4 のみサポート)。
* ハイレベルな Game DVR コントローラが追加されました (現在は PS4 のみサポート)。
* スレートでのセーフ ゾーン サポートが追加されました (SSafeZone ウィジェット内部にウィジェットをおきました。例は ShooterGameLoadingScreen または SSafeZone.h の一番上をご覧ください) (現在は PS4 のみがセーフ ゾーンを指定)。
* **Mac**
	* Mac OS X のエディタ用に C++ シンボルのロードが実装されました。
	* エディタ内から Xcode のファイルをもっと開きやすい方法が実装されたので、新規のコード ファイルは Xcode プロジェクト内で開きます。

#### オーディオ
* オーディオ コンポーネントが整数のパラメータを持てるようになりました。
* サウンド キュー用のスイッチ ノード
* オーディオ コンポーネントで整数のパラメータを使用すると、多岐分岐の実施が可能です。

#### アニメーション
* アニメーション シーケンスの編集時、オーディオのミュート機能が [Viewport] メニューに追加されました。 

#### ネットワーキング
* ライフタイムにレプリケートされたプロパティのアクティブ ステータスをオーバーライドする機能。
	* DOREPLIFETIME_ACTIVE_OVERRIDE during AActor::PreReplication 中は DOREPLIFETIME_ACTIVE_OVERRIDE が使用されます。     
* ネットワーク パフォーマンスにいろいろな機能が追加されました。
* 接続を通じレプリケーション作業の共有化がデフォルトでオンになります (パフォーマンスの向上)。
* FNetworkGUID ack logic が簡素化されました (レベルのロード時にロードのログ スパムを削減します)。


## アップグレード ノート

#### エディタとツール
* Landscape ES2 :ランドスケープ UV が 2 から 3 に増え、LocalVertexFactory と同じになりました。
* Collision プロパティが正確に複製されるようになりました。
* サブレベルはレベルに追加される時、ダーティとマークされなくなりました。
* WorldSettings ラベルが非表示になりました。
* [Collections] ボタンをクリックするとソース コントロール ステートが更新されるようになりました。
* ブループリントをデバッグする際、新規の PIE ウィンドウがグレーアウトしなくなりました。
* [FBX Import] オプションが記憶されるようになりました。
* 幾つかのマテリアルで不足しているツールチップを追加しました。
* コリジョン チャネルがビルドされると コリジョン プロファイルがアップデートされます。
* アンロードされたマップに属するアセットはメニュー アセット ピッカーにより排除されるようになりました。
* Collections は再度保存するようになりました。
* 「Press Escape」メッセージは自動保存の場合にのみ表示されます。
* LocalizeError の使用を廃止しました。
* カラーテーマのアルファ値が使用中のカラーピッカーのタイプに応じて正確に表示されるようになりました。
* DestructibleMesh プロパティが折りたたまれなくなりました。
* non-code などソリューションが欠けている場合、Debug はパッケージ オプションから削除します。
* 復元された名前とツールチップをアセット エディタに保存します。
* Cascade Module の警告がダイアログから通知に変更されました。
* UFortUIFeedbackBank プロパティへの修正が期待通りに機能しています。 
* プロパティ マトリックス欄の幅がオブジェクト選択の間で維持されるようになりました。
* アセットと同期すると、ContentBrowser アセット ビューがキーボード フォーカスを受け取るようになりました。
* ContentBrowser ビューモードのレイアウトが永続的になりました。
* 同期したアセットにロックされたコンテンツ ブラウザが開かないようにしました。
* ローカルおよびワールド座標システムで不足している小さなアイコンが追加されました。
* 作成中に名前の変更によりフォーカスを失っても、コレクションが削除されなくなりました。
* コンテンツ ブラウザ カウンタの「アセット」を「アイテム」へ名前変更しました。
* ユーザーがコンパイラを持っていない場合、[add code to project] オプションは無効化されます。
* [invalid collision] ダイアログを通知に置き換えました。
* スプライト カテゴリのローカリゼーションの処理方法をリファクタリングします。
* コレクションをデフォルトで展開表示できるようになり、リサイズが可能になりました。
* 保存メッセージを Matinee に言い換えました。
* 不足していた小さな [Phat] アイコンを追加しました。
* タブ上にアセットをドラッグすると、その後すぐにアクティブになるようになりました。
* キーボードのショートカットで作成された Copy/Pasting ノードがクラッシュしなくなりました。
* 環境設定のエクスポート時にレイアウトも保存されるようになりました。
* PIE の自動再コンパイル ブループリントのオプションが [Editor Preferences] から制御可能になりました。 
	* カスタム仕様の *.ini files referencing Kismet.AutoRecompileOnPIE は全て関連する EditorUserSettings ini の /Script/UnrealEd.LevelEditorPlayInSettings.AutoRecompileBlueprints を使用するように変更してください。
* ALevelGridVolume アクタが削除されました。
* GetOverlappingActors は呼び出されてもアクタを返さなくなりました。
* ブループリント関数の位置に対し Position と Translation が変更されました。これにより影響を受ける C++ 関数があります。
	* UPrimitiveComponent::AddImpulseAtPosition() はUPrimitiveComponent::AddImpulseAtLocation() となります。
	* UPrimitiveComponent::AddForceAtPosition() は UPrimitiveComponent::AddForceAtLocation() となります。
	* UMovementComponent::ConstrainPositionToPlane() はUMovementComponent::ConstrainLocationToPlane() となります。

#### レンダリング
* テキストレンダリングでアクタを垂直のアライメントに平行移動させる際の計算エラーが修正されました。この操作により、正しくない位置に置かれてしまうテキストが発生する恐れがあります。その場合は手作業での修正が必要になります。
* **エンジンの拡張機能**
	* GetRenderingDetailMode が Kismet へ追加されました。
	* GPUIndex が HardwareSurvey へ追加されました。
	* エンジン拡張機能に磨きがかかりました。
	* cvar が拡張オプションとして使用できる場合、ECVF_Scalability がドキュメントに追加されました。
	* ブループリントの GetRenderingMaterialQualityLevel を追加し、ヘルプを追加し、別のヘルプをクランプしました。
	* r.CompileShadersForDevelopment を追加して、設定が 0 の時は早めの出荷用ビルドが出来るようになりいました (未完成の機能のため、手動でアクティベートする必要があります)。
	* MaterialQualityLevel を拡張性設定に追加しました。JonL の提案は 0/1/1/1 ですが、コンテンツによっては 0/0/1/1 の場合もあります。
	* Fortnite に対し非常に低いスペックのレンダリング負荷に調整し、UI Blur バックグラウンドが無効化されました。
	* r.earlyzpass はモードが 2 の時 (画面上でマスクされているか小さい場合) 、移動しない全てのオブジェクトをレンダリングするようになりました。
	* PF_R8G8 UNORM テクスチャ フォーマットが追加されました。
* **ポストプロセス**
	* 自動露光の最低速度をクランプして、人間がこのパラメータで自動露光を無効化してしまわないようにしました。
	* FastBloomThreshold は目立っていたので再度有効化しました。
	* Toe Factor を削除しました。トーンマッパではどのみち使用しませんし、古いトーンマッパはもう存在しません。
	* グラフをより見やすくするために、グラフへのデバッグ エクスポートが追加されました (yWorks を使用) r.CompositionGraphDebug は好くリーションショット フォルダにファイルをエクスポートします。
	* ビデオ オプションのネイティブなフルスクリーンを再度有効化しました。
	* スペキュラを切り離すために、アルファシーンカラーのアルファ チャンネルを利用して実験的な機能としてスクリーン空間のサブサーフェス スキャッタリングを採用しました。大部分のレンダリング パスには最少限のコストが発生しますが、32 ビット フォーマットの仕様時は、実験的なスクリーン空間のサブサーフェス スキャッタリングを有効にしません。当社はスクリーン空間のサブサーフェス スキャッタリングを有効化して使用する予定であり、それが高品質には必要です。スペキュラのあるサブサーフェス マテリアルについては r.SSSSS 150 をご覧ください。
	* (メインとレンダリング スレッド) cvar の読み込み時、パフォーマンスをあげるためにコンソール変数の vars をタイプしました。
	* インターフェースが DrawDenormalizedQuad() に改善され、名前が DrawRectangle() となり、デフォルトで従来型のクワッドを使用して、トライアングルとなることが可能になりました。
	* vis SceneDepth@0 を使用して EarlyZPass コンテンツの可視化が可能になりました。

#### ブループリント
* ネストされたブループリント コンポーネントは、親の可動性の方が大きい場合、可動性を変更させる場合があります。
	* 親よりも可動性が低いサブ コンポーネントにフラグが付かないようになりました。
* ブループリントのゲーム コンポーネントは、エディタのみのコンポーネント下にすでにネストされている場合は、ネストされません (あるいはルートの場合はスワップされます)。
	* ゲーム コンポーネントがエディタのみのコンポーネント化にネストしないようになりました。

#### ゲームプレイとフレームワーク
* ナビゲーション システムの API を const FNavigationQueryFilter* から TSharedPtr`<const FNavigationQueryFilter>` を使用するように切り替えました。
* ネイティブ コードで作成された InputComponent 結合が動的結合ではなく UObject 結合を使用するようになりました。
	* BIND_AXIS と BIND_ACTION は変換の便宜上残されています。いずれ削除されますので使用しないでください。
	* その代わりに InputComponent 上の BindAxis と BindAction 関数を使用すべきです。BindKey と BindTouch も追加されました。
* MinCompressedDurationGame/Editor が削除されました。置き換えに関する詳細は、新機能の SoundGroups をご覧ください。

#### コア
* ブループリントに格納されているクラスは notplaceable ベースを継承する場合、notplaceable へ変換されるようになりました。
	* 以前であればアサートしました。
* TIndirectArray は TArray を継承しなくなりました。
	* TIndirectArray から TArray へキャストするコードは失敗します。
	* エクスポーズされていない TArray 関数を使うコードは変更が必要です。例えば GetData() は GetTypedArray() となります。
* MAX_PATH のオーバーフローを削減するために同じパス名は短縮するようにしました。
	* これにより、ファイルが特定の場所にあることを期待するナビゲーションやバッチ ファイルが影響を受けます。
	* 特に、Intermediate/BuildData/Include は Intermediate/Build/Inc となりました。
* TWeakObjectPtr は、UObject から派生するタイプでインスタンス化される静的アサートになりました。
	* コンパイラはタイプがもう UObject ではないと想定するので、TWeakObjectPtrs がどこで作成されようとフルクラス定義が求められます。
* begin() と end() がコンテナ メソッドではなくなりました。
	* これらの関数は純粋に ranged-for サポートに追加されました。ユーザー コード向けではありません。Ranged-for は代替システムとして使用しても機能します。
	* UE コンテナ上で .begin() や .end() を使用するコードは ranged-for スタイルや古い CreateIterator スタイルのイタレーションを使用するように変換してください。
* UnrealHeaderTool は、パースできないデフォルト引数を認識するとエラーを出すようになりました。	
	* 例えば、以下のようなコードは NULL を使うように修正が必要です。
	* `UFUNCTION(BlueprintCallable, Category="SomeCategory")`
	* `void Func(UObject* Obj = nullptr)`
	* `{`
	* `}`
* ゲーム ターゲットとして時々使用されてきた bCompileMonolithicBinary グローバル変数が削除されました。 
	* その代わり、プログラムの TargetRules ファイル (MyGame.Target.cs) の ShouldCompileMonolithic() をオーバーライドします。
	* 必要であれば、コマンドライン引数を使ってオーバーライドすることもできます (-modular、 -monolithic、MONOLITHIC_BUILD=1)。
* Unreal Build ツールから Fast Iteration Mode が削除されました (不完全な機能)。
* デフォルトの最小 Windows API (WINVER) が 0x600 にバンプされました (Windows Vista 以降)。
	* Windows XP をターゲットにしたい場合は、 UEBuildWindows.SupportWindowsXP=_true_ に設定します。
	* Windows XP をターゲットにする場合、弊社では WINVER 0x502 (XP SP3) を使用します。
	* Windows XP サポートはまだ進行中ですが、今後のビルドにおいてサポートを付けることを確約します。

#### プラットフォーム
* 全てのデバイス プロファイルをエディタに戻しています。 
* Removed the DeviceProfiles.ini を削除し、その他のエンジン コンフィグ ファイルと同じコンフィグ階層を使うように変換しました。Base->Default->Saved
* コンフィグ オプションを使用すると指定してしまうところに Texture Content Streaming が CVar を使えるように更新されました。
* このプロパティを戻しています。
* Device Profile の重複しているプロパティを削除しました。 
* デバイス プロファイル設定を CVars が早く初期されるに更新し、Device Profile Blueprints を削除しました。この結果、選択ロジックを実行するデバイス プロファイル プラグインが作成されました。  
* デフォルトへの保存が更新されたので、正しい記述を使用して配列が書き込まれるようになります。 
* インポート後に保存するように設定エディタを更新しました。
* **iOS**
	* バーチャル ジョイスティックがタッチスクリーン デバイスに変更されました。アサートが使われるようになりました。ジョイスティックを無効にしたい場合は、 Engine.ini の「[MobileSlateUI]」セクションの InitialTouchInterface ini 設定をオーバーライドします。
	* デバイス検出と UFE/UAT からの展開 / 起動を可能にするために、Unreal Launch Daemon が Messaging で機能するように修正されました。
* **Unreal Frontend**
	* Unreal Frontend (UFE) でプラグインを使用できるようになりました。
	* static ips が可能なようにメッセージングを更新します。
		* PC 以外のサブネット上でデバイスまたはセッションを確認するには、以下の操作を行います (これらのステップは PS4 を確認するためにも必要となります)。
			* Engine/Programs/UnrealFrontend/Saved/Config/Windows/Engine.ini を生成するために UFE を再度実行します。
			* Engine.ini を編集し [/Script/UdpMessaging.UdpMessagingSettings] に追加します。
			* StaticEndpoints=<ip of device>:6666
			* デバイスを 1 つ以上を追加するには、複数回ラインを追加します。
			* iOS の場合は、Unreal Launch Daemon をデバイスにプッシュして実行し、静的 IP アドレスを上記の通り追加するとデバイスが見えるようになります。
			* PS4 の場合は、上記の IP アドレスを追加するとキット上でセッションを確認できます。
			* XB1 でテストされていませんが、機能するはずです。
	* ランチャー ログのコピー / 保存機能が追加されました。
	* UFE に Quick Launch が追加されました。
		* Quick Launch は選択したデバイス上のプロジェクトを即時展開、起動します。
		* -development は UFE コマンドライン上で指定されると、Quick Launch が起動前にプロジェクトもビルドします。
	#### ネットワーキング

* Lifetime プロパティがサポートされたパスのみになり、これにより恐らくコード変更が必要になります。
* GetReplicationList は GetLifetimeReplicatedProps に変更されました。
	* GetLifetimeReplicatedProps の呼び出しは 1 度のみとなりました。
* DOREPLIFETIME が non conditional プロパティを登録することになります。
* DOREPLIFETIME が conditional プロパティを登録することになります。
* 可能な条件：
	* COND_None					- 条件なく、変更があればいつでも送信できるプロパティです。
	* COND_InitialOnly			- 最初の bunch でのみ送信を試みるプロパティです。
	* COND_OwnerOnly			- アクタのオーナーのみに送信するプロパティです。
	* COND_SkipOwner			- オーナー以外の全ての接続に送信するプロパティです。
	* COND_SimulatedOnly		- アクタをシミュレートするために送信されるプロパティです。
	* COND_AutonomousOnly		- 自立したアクタに送信されるプロパティです。
	* COND_SimulatedOrPhysics	- シミュレートされた OR bRepPhysics アクタに送信されるプロパティです。
	* COND_InitialOrOwner		- 最初のパケット上、またはアクタ オーナーに送信されるプロパティです。
	* COND_Custom				- 特定の条件は持ちませんが、 DOREPLIFETIME_ACTIVE_OVERRIDE によりオンオフを切り替える機能が必要とされるプロパティです。


## 今後の追加事項と継続事項

#### エディタとツール
* Matinee のカーブ制御点を移動するために CTRL を押下する必要がなくなりました。
* 進行中のビルドをキャンセルできるように「Compiling C++ Code」通知上に [cancel] ボタンができました。
* [code-view details] ペインから存在しないコード ファイルを開こうとするとエラー通知が発行されるようになりました。
* アセット エディタのタブ上に該当するアイコンが付きました。
* [Add Code To Project] ウィザードの基本クラスのリスト上にアクタが含まれるようになりました。
* アルファの付いた UI Textures がチェックボードで、アルファ ブレンドを有効にしてサムネイルをレンダリングするようになりました。
* [Defaults] ボタンの Import/Export/Reset が Editor Preferences / Key Bindings で正しく動作するようになりました。
* エンジン分析がさらに追加されました。
	* ブループリント エディタにおけるユーザーの無効な接続の試みがトラックされるようになりました。
* UnrealBuildTool:読み取り専用ファイルによる失敗に対し、サイレント障害ではなく明確にエラーメッセージが出されるようになりました。
* Play-In-Editor(PIE) の終了時に Matinee が閉じるようになりました。
	* Play-In-Editor(PIE) の起動時には既にこれを行っています。
	* Play-In-Editor(PIE) の終了/ 開始時、間違ったワールドでアクタをうっかり編集してしまわないようにしました。
* レベル ブラウザ機能がワールド ブラウザにマージされました。レベル ブラウザはやがて削除されます。
* ゲームのスタートアップ時にロードされ表示可能なフラグを設定するための ULevelStreamingKismet の機能が追加されました (InitiallyLoaded、InitiallyVisible)。
* **ワールド ブラウザ**
	* レイヤーごとのフィルタリングが追加されました。
	* レイヤー ストリーミング距離設定がオプションになりました。
	* ストリーミング レベルはブループリント グラフ間でドラッグ＆ドロップが可能です ( GetStreamingLevel ノードを作成します)。
	* ワールド基点を変更する bIgnoreOriginShifting を無視するオプションがアクタごとに追加されました。
* [Material Editor Properties] パネルの名前を「Details」に変更しました。
* 実行時に渡されたアクタを確認するのではなく Actor イテレータの TSubclassof を使用します。
* Static bool Material Expressions が右クリック メニューのプレビュー オプションに追加されないようにしました。
* ブループリント スタイル エディタにおいて shift-click 接続で取り消しができるようになりました。
* マテリアル エディタでカーソルを乗せたりピンを付けると接続がハイライトされるようになりました。
* Material Comments に色を追加し、最終入力の位置が保存できるようになりました。
* BeginPlay 中に作成されたアクタは BeginPlay を呼び出すようになりました。
* ユーザーが入力量に影響を及ぼすことができる他の表現式と一緒に、Texture 表現式の MIP Value Pin が表示されるようになりました。
* マテリアル エディタ統計情報バー の下の部分をクリックできるようになりました。
* Play-In-Editor(PIE) 通知がマテリアル、サウンドキュー、サウンドクラス エディタで表示されないようにしました。
* マテリアルのピンを正確に [ctrl+drag] できるようになりました。
* マテリアル ノードとピンに対するツールチップが追加されました。
* [Material Editor Context] メニューにスクロールバーが付きました。
* 右クリックの接続でやり直し / 元に戻す作業が正確にできるようになりました。
* パレットから配置されたマテリアル関数が正常に機能するようになりました。
* 同じ名前のマテリアル パラメータが設定を共有するようになりました。
* ピンの位置をキャッシュしてノード接続時のジッターを抑えました。
* Material ノード プレビューが折りたたまれた後も確実に同期するようにしました。
* マテリアル エディタの検索結果に新規追加されたノードが含まれます。
* マテリアル関数の呼び出しをペーストしても入力が正確に表示されるようになりました。
* Lighting Model がマテリアル ドメインに対して正しくないというエラーが起こらないようにしました。
* MarkPackageDirty パフォーマンスが改善されました。
* Transition Map オプションがドロップダウン ピッカーを使用するようになりました。
* タスクのキャンセル時に Perforce モジュールがクラッシュしないようにしました。
* C++ クラスがクラス ビューアから作成できるようになりました。
* ソース コントロールへのサブミット時の余計なプロンプトを削除しました。
* パッケージ化されたサンプル ゲームには正しいアイコンが付けられています。
* IDE インストールの警告文の文法ミスを修正しました。
* 表示フォルダのオプションが [View Options] メニューに入りました。
* スレッドセーフでないメッセージへのログ アクセスを削除しました。
* バックエンド フィルタが適用されると、フォルダはコンテンツ ブラウザには表示されません。つまり、フィルタを使用するとビューが「平坦化」されます。
* インポート前後の接続デリゲートが追加されました。
* PhAT のオプション ツールチップが更新されました。
* ソース コントロールが無効でも、削除する場合はファイルが書き込み可能になりました。
* ブループリント インターフェースからのイベントの外見が新しくなりました。
* レベル エディタ＆マップの再ロード時にクラッシュしないようにしました。
* ライティングの再ビルド時に、ストリーミング レベルのアクタ / レイヤ / BSP が確実に正しく隠れるようにしました。
* Property Matrix でキーと入力が正しく機能するようになりました。
* 親イベント / 関数コール上でダブルクリックすると、親ブループリントが開くようになりました。
* Component ノードを追加すると、コピー / ペースト時にコンポーネントのデフォルトがコピーされるようになりました。
* Matinee の追加時に表示されるコンボボックス ウィンドウがキーボードで操作可能になりました。
* ブループリントの Math Library にさらに検索キーワードが追加されました。
* FTransform にプロキシ構造体のカスタマイズが新規に追加されました。全ての FTransform プロパティが回転に対するローテーター プロキシを使用して編集可能になり、詳細ビューのアクタ変形のようになりました。
* 詳細ビューでのアクタ変形のように、レベルの変換が編集可能になりました。
* IsValidIndex が TBitArray に追加されました。
* 国際化データ構造を修正したので、任意のメタデータを使用して入力の格納と検索が可能になりました。
* WIX 製の第三者ライブラリが最新の v3.8 リリースに更新されました。
* スプライン メッシュにマイナスのスケールを適用しても裏返しにならなくなりました。「前方」軸上でマイナスのスケールを適用するとスプライン メッシュの表から裏へ反転するようになりました。
* ランドスケープのアルファ / パターンブラシによるテクスチャ マスク セレクタが改善されました。
* ウィジェット自体が無効になっていても、ウィジェットのツールチップが表示されるようになりました。
* **スレート**	 
* SComboBox と SComboButton が FEditorStyle に依存せずに Slate Widget Style を使用するようになりました。
	* SProgressBar
	* SScrollBar
	* SExpandableArea
	* SSearchBox
	* SSlider
	* SVolumeControl
	* SSpinBox
	* SSplitter
	* STableRow
	* SDockTab
* 以下のウィジェットで FEditorStyle は内部では使われなくなりました。
	* SExpandableButton
	* SNotificationList
	* SHeader
	* SSeparator
	* SBreadcrumbTrail
	* SNumericEntryBox
	* SColorPicker
* **マテリアル エディタ** 
	マテリアル エディタの [preview toolbar] ボタンはメインのツールバーではなくビューポートのツールバー上に表示されるようになりました。
* **プラットフォーム ゲーム** 
	* Slate Widget Style アセットを使用するように変換され、 FEditorStyle に全く依存しなくなりました。
* AnimInstance イベントの「Kismet」が「Blueprint」に置き換えられました。
	* PhAT の  Simulate コマンドが Bound キーを正確に使うようになりました。
	* PhAT の Copy properties コマンドがビューポート以外でも機能するようになりました。
	* Animation ブループリントから派生したブループリントを作成する機能を削除しました。
* ランドスケープのペイント中にグラウンドが変化すると、フォーリッジの方向が Max Angle 設定に限定されます。
* UE4Editor*-cmd で開始するプロセスを Windows の Ctrl とクリックで対応し、デストラクタがクラッシュしないように Ctrl とダブルクリックによる強制終了を有効にしました。
* ユーザーが使いやすいアセット名をもっと含んで、使用されないアセットを削除し、オーディオの使用に整合性を持たせるなど、ストラテジー ゲームの幾つかの特性を整理しました。
* StrategyGame カメラが改定され、 StrategyCameraComponent クラスの中へ置かれました。 
* レース開始前の自爆の中止、ビューポートでの再生時の一時停止など、ビークル サンプルの幾つかの特性を整理しました。
* ブラックジャック サンプル ゲームのインターフェースを整理しました。これにより、ブループリント間通信が使用されるようになり、ブループリントがアーカイブに使用していた古いインターフェースは削除されました。
* オブジェクト上の blackjack フォントを整理しました。クリップ値などです。
* シューティングゲームの FORCEDINLINE を幾つか整理しました。

#### レンダリング
* デフォルトのポストプロセス マテリアルで透過的に古いパスが見えるようにしました。これにより、ポストプロセス マテリアルのコンパイル中、単一のテクスチャで画面全体が透明になることがなくなりました。
* 新規のパラメータをマテリアル パラメータ コレクションに追加すると、一意の適切な名前が生成されるようになりました。
* スタティック メッシュ LOD 距離設定からのクランプ処理を削除しました。
* 反射面に対する反射キャプチャの精度があがりました。非常に大雑把な面スペキュラです。
* ES2 の指向性ライトマップ マテリアル フラグの使用を追加しました。
* 非常に大雑把ではありますが、ES2 のマテリアルにフラグが追加されました。
* スペキュラ マテリアル出力が ES2 で機能するようになりました。
* **その他のパーティクル レンダリング**
	* 自動生成による境界がかなり狭くなったので、カスケードの [set fixed bounds] を修正します。
	* 透過処理されたボリュメトリック シャドウを投射すると、パーティクルがライトの方へ向くようになりました。
 
#### ブループリント
* ブループリントのノード探知能力が改善されました。
	* 様々なノード タイプに対して検索キーワードが幾つか追加されました。
* ブループリント ノードに関するドキュメント類が改善されました。
	* 目的と機能を分かりやすくまとめるため、幾つかのブループリント ノードに詳細な (「大きい」) ツールチップが追加されました。
* ブループリントの level actor reference ノードのデザインが新しくなりました。
* ブループリントの compact array function ノードのデザインが新しくなりました。
* 全てのブループリントを展開して全てのコメントがインクルードされます。
* 利用するキーボードをコンポーネント エディタで適切に「複製」したり「削除」できるようになりました。
* [My Blueprint] ウィンドウでの削除にキーバインドを使用するようになりました。
* ブループリントのデバッグにおいて F5 でもステップ実行ができるようになりました。
* ステートマシンの名前変更がグラフ内で可能になりました。

#### ゲームプレイとフレームワーク
* 物理コンストレイントを終了するためのデリゲートが追加されました。
* Joint drive 関数がブループリントにエクスポーズされました。
* コンテンツ ブラウザでの管理できるようにマップをアセットとして取り扱う準備作業。
	* UWorld オブジェクトは、その他の全てのアセットと同様に、それらを含むパッケージに因んだ名前が付くようになりました。
	* 「TheWorld」という名前のオブジェクトをパッケージ内で検索するコードに置き換えるための静的関数 UWorld::GetWorldFromPackage が追加されました。
* コンテンツ ブラウザ内のフィルタは、それが特別なフィルタのあるタイプでない限り、選択したアセットタイプのサブクラスを表示するようになりました。
	* 例えば、ブループリントは AnimBlueprints は表示されませんが、 DataAsset 派生した DataAssets は全て表示されます。
* メインのティック ループの一定のオーバーヘッドを削減するため、デディケイテッド サーバーのパフォーマンスに関してマイナーな改善が数多く行われました。
* パフォーマンスに影響する可能性のある UE_BUILD_TEST 内のものを多数無効にしました。 
* メモリのレポート機能がエンジン全体で改善されました。
* Windows binned allocator の効率が約 5% 向上したので、提供されるメモリ デバッグ情報も質が改善されました。
* メモリを保存するために、ウィンドウ上のワーカースレッドのスタック サイズが削減されました。
* 最大カリング距離がエディタ ビューポートでデフォルトで無視されるようになりました。G でゲーム レンダリング モードに入ると最大カリング距離が順守されます。
* フォーカスへの優先度が AIController に追加されました。移動、ゲームプレイなどに対し異なるフォーカスを付けることができます。
* navmesh 上でのランダム位置の検索が Detour の半径で正確に制約されるようになりました。
* フォーカスへの優先度が AIController に追加されました。移動、ゲームプレイなどに対し異なるフォーカスを付けることができます。
* navmesh 上でのランダム位置の検索が Detour の半径で正確に制約されるようになりました。
* navmesh 生成時において、 衝突障害物としてボックス、カプセル、球体プリミティブのサポートが追加されました。
* サウンドが再生される順序 (逆再生とは反対) でパースされるようになりました。そのため、複数のサウンドが同時再生されると、グループ管理などのノードは正確に評価します。
* 追加のコマンドライン パラメータをスタンドアロン再生セッションに対して [Editor] -> [Play In settings] から指定できるようになりました。
* アセットの一括エクスポートがコンテンツ ブラウザからできるようになりました。
* 「public include」フォルダに間違えて置かれていた幾つかの C++ ファイルが移動されました。
* 間違えて宣言した SpriteInfo の対処がしやすくなりました。
* アニメーションを適用せずにボーンを変形できるようにペルソナが変更されました。
* 管理に必要なコードの量を減らすために、ペルソナのプレビュー シーンをアニメーション ビューポートからペルソナ自体に移動しました。
* 手動ではなく FTransform 計算をするように、ルート モーション コードをリファクタリングしました。
	* ルート モーション中は PhysicsRotation が無効になります。DesiredRotation はルート モーション回転で問題が発生する可能性があります。
* FRotator::Equals はノーマライズされたローテータに対してテストを行います。
* **コリジョン** 
	* Collision モードの可視化が追加されました。



#### コア
* スタートアップ コードで使用できるように、乱数生成器はエンジン初期化において早めにシードが与えられるようになりました。
* FUTF8ToTCHAR::Length と FTCHARToUTF8::Length は、「十分足りる」長さではなくて、正確な長さを返すようになりました。
* クラッシュというようよりは不足ファイルの処理を要求されると、UnrealHeaderTool がエラーを報告します。
* TArray::RangeCheck が最適化されました。
* TArray::Append はムーブの必要性を認識しムーブするようになりました (move-aware)。
* Visual Studio 2010 のサポートを完全に廃止しました (2010 サポートが必要な場合は Nov 2012 QA build をご利用ください)。
* 大きな改善点は、UnrealBuildTool の依存図式を可視化したことです (-graph オプション)。
	* 出力ファイルが /UE4/Engine/Intermediate/<targetname>.gephi に保存されるようになりました。
	* 5 種類のグラフが含まれるようになりました (UBT の GraphVisualizationType を参照)。
	* C++ のヘッダーの関係を可視化します。
	* ソールファイル ノードのサイズが改善されました。
	* 項目全般において改善とバグ修正を行いました。
* Visual Studio 2013  が UnrealVS 拡張機能のサポート対象になりました(注：UE4 はまだ 2013 との互換性はありません)。
* UE4 ソースコードにより Visual Studio における IntelliSense の動作が改善されました。
* 各種 UE4 のコンパイル時間が改善されました (継続中)。
* エディタ：エディタから起動した場合、 ES2 で Faketouches モードを強制するようにしました。
* Windows プラットフォーム上の Clang コンパイラに対する実験的なサポートの追加が始まりました。
* モジュール ソース コードの検索中に中間フォルダが見つかると、UnrealBuildTool が警告を出します。
* Async のロード処理が改善されました (パフォーマンスと修正)。
* MCPP の VS2013 build が追加されました。 
* nvtesslib の VS2013 build が追加されました。 
* nvtexturetools の VS2013 build が追加されました。 
* Vorbis と Ogg の VS2013 build が追加されました。 
* nvtristrip の VS2013 build が追加されました。 
* ForsythTriOptimizer の VS2013 build が追加されました。 
* HACD の VS2013 build が追加されました。 
* ICU の VS2013 build が追加されました。 
* Box2D の VS2013 build が追加されました。 
* hlslcc の VS2013 build が追加されました。 
* libPNG と zlib の VS2013 build が追加されました。 
* IntelTBB の VS2013 build が追加されました。 
* FreeType2 の VS2013 build が追加されました。 
* Recast の VS2013 build が追加されました。 
 
#### ネットワーキング
* 初回パスが FText へのほとんどのネットワーク エラー メッセージをカバーします。
* NetDriver::InitListen への参照により FURL パラメータを作成したので、実際のポート割り当てを戻すことができます。

#### プラットフォーム
* アーキテクチャのコンセプトが UBT に追加されました。IOS ("-simulator") と HTML5 ("-win32") での使用を開始しました。このように、異なる CPU アーキテクチャのためのプラットフォームは複数必要ありません。
* DirectShow の VS2013 build が追加されました。 
* VS2013 のビルドに必要な wincrypt include が追加されました。 
* スタティック メッシュ エディタに「Generate Unique UVs 機能は Windows 以外のプラットフォームにはまだ実装されていない」旨のダイアログ警告が表示されるようになりました。
* **Mac**
	* Mavericks の新しいデフォルト マルチモニター モードでの動作中、メイン エディタ ウィンドウによりオーバーラップされたウィンドウがマウスクリックを横取りしないようにしました。
	* Mac OS X Mavericks の新しいマルチモニター モードで複数の画面間を移動する時、ウィンドウが終了や移動したり非表示には絶対にならないようにしました。
	* デバッグ & テクスチャ ローディング機能向けに Mac OS X に提供された新しい OpenGL バージョンにより追加された拡張機能を使用します。 
	* Mission Control キーボード ショートカットがエディタを混乱させたりキーボード入力を壊さないようにしました。
	* Mavericks の新しいマルチモニター モードのデフォルト状態でウィンドウが非表示にならないように、Mac OS X にリコンフィギュレーション表示を手動で行います。
	* Mac OS X にデフォルト マージツールの p4merge.app を作成しました。 
	* デフォルトのアプリケーションを使ってエディタ サービスの Launch Game を開くようにしました (Finder のダブルクリックと同じプロジェクトです)。
	* 2 つ以上の UE4 インスタンスが動作中、Mac OS X のAMD カード上で青が点滅しないようにしました。
	* Mac OS X に幾つかサンプルをロードする際のクラッシュを避けるため、Nvidia ドライバーのバグに対処しました。　
* **Moblie**
	* iOS にテクスチャ ストリーミングのサポートが追加されました。
	* OpenGL TexStorage2D の処理がクリーンアップされ、iOS へのテクスチャ格納のサポートが追加されました。
	* OS のメモリ不足警告に対応するため、コールバック関数が追加され iOS 上に実装されました。
	* per-process stat を返す task_info() api を使うために iOS にアロケートされたメモリ情報を変更しました。
	* iOS のバーチャル ジョイスティックが改善されました。

#### オンライン
* OSSNull の GenerateRandomUserId が常に Guids を使うように変更されました。
	* **ストリーム**
		* アクセスしやすいようにログ内の App Id printout をストリームとして取り扱います。
		* 実際の Steam API calls の呼び出し前に Steam Dlls がロードされることを確認し、存在しない場合は fail モジュールとなります。
	* **Misc**
		* オンライン ティック関数および async タスク マネージャに統計情報を幾つか追加しました。


## 周知の問題
* **INFILTRATOR**
	* 光源が以前より暗くなりました。
	* 起動時、エディタが反応しません。
* **CONTENT EXAMPLES**
	* Scalability インターフェースエクストラ メッシュ
	* NavMesh:ゲームで壊れたポーン
	* Input_Examples:制御のうち動かないものがあります。
* **EDITOR**
	* キーボード ショートカット：モディファイア キーの変更により結合のコミットが早まります。
	* ウィークリーテストにおいてサブ エディタのパフォーマンスが落ちました。
* **ELEMENTAL**
	* CRASH:テクスチャ座標の数字が無効です。
* **PLATFORMERGAME** 
	* SaveGameBP に解決できないコンパイラ エラーが存在しています。
* **SHOWCASES**
	* PostProcessMatinee:ライティング エラーを再ビルドします
* **WORLDBROWSER**
	* Play-In-Editor では、プレイヤーは移動できません。 
* **SHOOTERGAME**
	* CRASH:Highrise 上にライティングをビルドした後です。
* **Unreal Frontend** 
	* 高度なタブでは PS4 設定を使用せず、むしろ XboxOne のビルドおよび段階わけを試みます。
	* サンプル プロジェクトを Unreal Frontend から起動するとエラーになります。
* **MAC** 
	* RENDERING:ビューポートのグラフが破損しました。
* **PS4** 
	* 起動時にクラッシュ (PS4File.cpp:アサーションに失敗しました:OpenParams != nullptr)
* **RENDERING** 
	* OPENGL:ES2:CRASH:既存のゲーム
* **VEHICLE** 
	* Low FPS のローエンド ビデオカードのユーザーはコースを完了できなくなります。












