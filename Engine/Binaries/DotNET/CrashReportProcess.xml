<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CrashReportProcess</name>
    </assembly>
    <members>
        <member name="T:Tools.CrashReporter.CrashReportProcess.CrashReporterProcessServicer">
            <summary>
            A class to handle processing received crash reports for displaying on the website.
            </summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportProcess.CrashReporterProcessServicer.Watcher">
            <summary>A class the handle detection of new reports.</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportProcess.CrashReporterProcessServicer.Processor">
            <summary>A class to lazily process reports as they are detected.</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportProcess.CrashReporterProcessServicer.Log">
            <summary>Current log file to write debug progress info to</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportProcess.CrashReporterProcessServicer.LogFolder">
            <summary>Folder in which to store log files</summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.CrashReporterProcessServicer.WriteEvent(System.String)">
            <summary>
            Write a status update to the event log.
            </summary>
            <param name="Message">A string containing the status update.</param>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.CrashReporterProcessServicer.#ctor">
            <summary>
            Initialise all the components, and create an event log.
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.CrashReporterProcessServicer.OnStart(System.String[])">
            <summary>
            Start the service, and stop the service if there were any errors found.
            </summary>
            <param name="Arguments">Command line arguments (unused).</param>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.CrashReporterProcessServicer.OnStop">
            <summary>
            Stop the service.
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.CrashReporterProcessServicer.DebugRun">
            <summary>
            Run the service in debug mode. This spews all logging to the console rather than suppressing it.
            </summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportProcess.CrashReporterProcessServicer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.CrashReporterProcessServicer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.CrashReporterProcessServicer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Tools.CrashReporter.CrashReportProcess.CrashReportProcessServiceInstaller">
            <summary>
            The containing class for the Crash Report Processor installer.
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.CrashReportProcessServiceInstaller.#ctor">
            <summary>
            The installer to handle the installation of the Crash Report Processor service.
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.CrashReportProcessServiceInstaller.Install(System.Collections.IDictionary)">
            <summary>
            Must exists, because installation will fail without it.
            </summary>
            <param name="StateSaver">Dictionary to pass down to the base class.</param>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportProcess.CrashReportProcessServiceInstaller.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.CrashReportProcessServiceInstaller.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.CrashReportProcessServiceInstaller.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Tools.CrashReporter.CrashReportProcess.CrashReportProcessProgram">
            <summary>
            The container for the Crash Report Processor application.
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.CrashReportProcessProgram.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:Tools.CrashReporter.CrashReportProcess.ReportProcessor">
            <summary>
            A class to handle processing of received crash reports.
            </summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportProcess.ReportProcessor.Watcher">
            <summary>The thread that handles detection of new crashes.</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportProcess.ReportProcessor.ProcessorTask">
            <summary>Task to handle processing.</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportProcess.ReportProcessor.CancelSource">
            <summary>Object to allow the task to be cancelled at shut-down.</summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.#ctor(Tools.CrashReporter.CrashReportProcess.ReportWatcher)">
            <summary>
            Global initialisation of the processor.
            </summary>
            <param name="InWatcher">The object that watches for new crash reports coming in.</param>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.Dispose">
            <summary>
            Shutdown: stop the thread
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.Start">
            <summary>
            Main processing thread.
            </summary>
            <remarks>All exceptions are caught and written to the event log.</remarks>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.CleanReport(System.IO.DirectoryInfo)">
            <summary>
            Delete a report directory
            </summary>
            <param name="DirInfo">The directory to delete</param>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.CleanRepository">
            <summary>
            Delete report folders older than a certain age to avoid unbounded growth of the crash repository.
            </summary>
            <remarks>The folders for the deduplication process older than the property 'DaysToSunsetReport' days old are deleted.</remarks>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.ExtractSection(System.String,System.String,System.String)">
            <summary>
            Extract a delimited section from the diagnostics file.
            </summary>
            <param name="DiagnosticsFileName">File name of the diagnostics file to interrogate.</param>
            <param name="StartKey">A string key to mark the start of the selection.</param>
            <param name="EndKey">A string key to mark the end of the selection.</param>
            <returns>A string array of the extracted section.</returns>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.GetBranchName(Tools.CrashReporter.CrashReportCommon.WERReportMetadata)">
            <summary>
            Abstraction to extract the branch name from the Windows Error Report meta data.
            </summary>
            <param name="MetaData">The Windows Error Report meta data.</param>
            <returns>A string of the branch name, or UE4 if none found.</returns>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.GetBaseDir(Tools.CrashReporter.CrashReportCommon.WERReportMetadata)">
            <summary>
            Abstraction to extract the base directory from the WER meta data.
            </summary>
            <param name="MetaData">The Windows Error Report meta data.</param>
            <returns>A string of the base directory.</returns>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.GetPlatformName(Tools.CrashReporter.CrashReportCommon.WERReportMetadata)">
            <summary>
            Abstraction to extract the platform name from the Windows Error Report meta data.
            </summary>
            <param name="MetaData">The Windows Error Report meta data.</param>
            <returns>The platform name, or a blank string if none found.</returns>
            <remarks>This is acquired from the parent folder name of the running application, which matches the enums in UBT.</remarks>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.GetEngineMode(Tools.CrashReporter.CrashReportCommon.WERReportMetadata)">
            <summary>
            Abstraction to extract the engine mode from the Windows Error Report meta data.
            </summary>
            <param name="MetaData">The Windows Error Report meta data.</param>
            <returns>The mode the game was running in e.g. Game.</returns>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.GetBuiltFromCL(Tools.CrashReporter.CrashReportCommon.WERReportMetadata)">
            <summary>
            Abstraction to extract the built from CL# from the Windows Error Report meta data.
            </summary>
            <param name="MetaData">The Windows Error Report meta data.</param>
            <returns>The CL the engine was built from</returns>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.CreateCrash(System.IO.DirectoryInfo,Tools.CrashReporter.CrashReportCommon.WERReportMetadata,System.String,System.String,System.Boolean)">
            <summary>
            Create an Xml payload representing a new crash.
            </summary>
            <param name="DirInfo">The DirectoryInfo of the report folder.</param>
            <param name="MetaData">The Windows Error Report meta data.</param>
            <param name="MetaDataFilename">The file name of the Windows Error Report meta data Xml file.</param>
            <param name="DiagnosticsFileName">The file name of the diagnostics file.</param>
            <param name="bHasVideoFile">Whether the report contains a video file.</param>
            <returns>A string of Xml payload representing the newly found crash report.</returns>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.UploadCrash(System.String)">
            <summary>
            Call the web service function with an Xml payload to add a crash to the database.
            </summary>
            <param name="Payload">Xml representation of a new crash to upload.</param>
            <returns>The database id of the newly added row.</returns>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.AddReport(System.IO.DirectoryInfo,Tools.CrashReporter.CrashReportCommon.WERReportMetadata,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            A function to add a report to the database, and rename the relevant files.
            </summary>
            <param name="DirInfo">The DirectoryInfo of the report folder.</param>
            <param name="MetaData">The Windows Error Report meta data.</param>
            <param name="LogFileName">The file name of the log file in the report.</param>
            <param name="WERMetaDataName">The file name of the Windows Error Report meta data in the report.</param>
            <param name="DumpFileName">The file name of the minidump in the report.</param>
            <param name="DiagnosticsFileName">The file name of the diagnostics file in the report.</param>
            <param name="VideoFileName">The file name of the video file in the report, or null if there isn't one.</param>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.CheckMetaData(Tools.CrashReporter.CrashReportCommon.WERReportMetadata)">
            <summary>
            Optionally don't process some reports based on the Windows Error report meta data.
            </summary>
            <param name="WERData">The Windows Error Report meta data.</param>
            <returns>false to reject the report.</returns>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.SyncRequiredFiles(System.String,Tools.CrashReporter.CrashReportCommon.WERReportMetadata)">
            <summary>
            Sync the MinidumpDiagnostics binary and the engine config files to #head.
            </summary>
            <param name="MinidumpDiagnosticsName">The name of the binary to sync to process the minidump.</param>
            <param name="MetaData">The meta data for the crash to get the branch name from.</param>
            <returns>true if all the files synced wihtout issue, false otherwise.</returns>
            <remarks>As MinidumpDiagnostics is synced to #head, it requires the engine config files that match to run properly.</remarks>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportProcessor.ProcessReport(System.String)">
            <summary>
            A function to process a newly landed crash report.
            </summary>
            <param name="NewReport">The directory containing the new report files.</param>
        </member>
        <member name="T:Tools.CrashReporter.CrashReportProcess.ReportWatcher">
            <summary>
            A class to monitor the crash report repository for new crash reports.
            </summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportProcess.ReportWatcher.NewReports">
            <summary>A queue of freshly landed crash reports ready to be processed.</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportProcess.ReportWatcher.WatcherTask">
            <summary>Task to periodically check for the arrival of new report folders.</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportProcess.ReportWatcher.CancelSource">
            <summary>Object providing cancellation of the watcher task.</summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportWatcher.#ctor">
            <summary>
            Create a directory watcher to monitor the crash report landing zone.
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportWatcher.Dispose">
            <summary>
            Shutdown: stop the thread
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportProcess.ReportWatcher.Start">
            <summary>
            A thread to watch for new crash reports landing.
            </summary>
            <remarks>The NFS storage does not support file system watchers, so this has to be done laboriously.</remarks>
        </member>
    </members>
</doc>
