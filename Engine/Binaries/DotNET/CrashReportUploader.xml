<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CrashReportUploader</name>
    </assembly>
    <members>
        <member name="T:Tools.CrashReporter.CrashReportUploader.CrashReport">
            <summary>
            A class that defines a newly found crash report.
            </summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportUploader.CrashReport.bValid">
            <summary>Whether the report has well formed files.</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportUploader.CrashReport.FullName">
            <summary>The full path to the report files.</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportUploader.CrashReport.CheckReport">
            <summary>A class to contain the directory name to send to the crash report receiver.</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportUploader.CrashReport.ReportData">
            <summary>An in memory version of the WER meta data in the report.</summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReport.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Construct a new crash report and perform simple validity checks.
            </summary>
            <param name="Folder">The DirectoryInfo for the potential crash report.</param>
        </member>
        <member name="T:Tools.CrashReporter.CrashReportUploader.CrashReportHandler">
            <summary>
            The class the handles uploading of local crash reports.
            </summary>
            <remarks>
            This class discovers all crashes that have been queued for Windows Error Reporting in a certain time frame, checks to see if they have already been uploaded to the server, 
            checks to see if the server wants them, and then uploads all files in the report to the server. The files are not touched, and continue on to Microsoft's reporting server.
            </remarks>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.CrashReports">
            <summary>A list of valid crash reports.</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.UploadReportURL">
            <summart>A cached copy of the crash report URL.</summart>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.EvaluateReportsLocally">
            <summary>Whether to evaluate the report locally (for programmers who compile binaries themselves).</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.Log">
            <summary>A writer to write to the log file.</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.LogFolderOverride">
            <summary>An optional folder supplied from the command line to store logs.</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.bUnattended">
            <summary>Used to suppress the user input dialog if requested.</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.CrashReportsFound">
            <summary>The number of discovered crash reports to check for uploading.</summary>
        </member>
        <member name="F:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.CrashReportsUploaded">
            <summary>The number of crash reports that were not rejected and successfully uploaded.</summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.#cctor">
            <summary>
            Default stub constructor.
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.#ctor">
            <summary>
            Default stub constructor.
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.ParseArgs(System.String[])">
            <summary>
            Parses the command line arguments and store options.
            </summary>
            <param name="Arguments">A string array of command line parameters.</param>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.Init">
            <summary>
            Perform global initialisation.
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.Shutdown">
            <summary>
            Perform any global shutdown operations.
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.SetLocalReportHeuristic(System.String)">
            <summary>
            Heuristic for determining whether to evaluate a crash report locally.
            </summary>
            <param name="RunningAssembly">The full path of this assembly.</param>
            <remarks>This is required for programmers who compile their own binaries as the required pdbs are not in Perforce for syncing. The heuristic is currently
            being both on the domain defined in the settings (EPICGAMES) and the symbol file for this assembly existing (CrashReportUploader.pdb).</remarks>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.FindCrashReports">
            <summary>
            Search the local disk for any queued Windows Error Reports in the past 'n' days.
            </summary>
            <remarks>This function searches the WER report queue for any crashes matching our search criteria. Anything beginning with 'AppCrash_UE4-' with a timestamp
            newer than the 'UploadHistory' setting days old.
            </remarks>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.EvaluateLocalReport(Tools.CrashReporter.CrashReportUploader.CrashReport)">
            <summary>
            Runs MinidumpDiagnostics on the requested report if the current diagnostics file doesn't exist.
            </summary>
            <param name="Report">A class representing a found and valid crash report.</param>
            <remarks>This is required for locally compiled builds where the debug information is not checked into Perforce.</remarks>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.EvaluateLocalReports">
            <summary>
            Create the diagnostics file for all local reports if requested.
            </summary>
            <remarks>The heuristic for determining this is in SetLocalReportHeuristic().</remarks>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.RequestUserInput">
            <summary>
            Request input from the user with a separate application.
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.GetBinaryResponseString(System.String,System.String,System.String)">
            <summary>
            Send a binary file via a web request, and get a string reponse from the server.
            </summary>
            <param name="RequestString">A URL with encoded information about the function to call.</param>
            <param name="DirectoryName">The directory name to save to.</param>
            <param name="FileName">The name of the file to upload.</param>
            <returns>A string response - typically in xml format.</returns>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.AllowReportUpload(Tools.CrashReporter.CrashReportUploader.CrashReport)">
            <summary>
            Checks to see if the passed in crash report has already been uploaded to the server.
            </summary>
            <param name="Report">The report to check.</param>
            <returns>true if the report needs uploading.</returns>
            <remarks>This is based on the unique directory name of the report.</remarks>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.AllowReportUploadDetail(Tools.CrashReporter.CrashReportUploader.CrashReport)">
            <summary>
            Checks to see if we still wish to upload the report based on the Windows Error Reporting (WER) meta data.
            </summary>
            <param name="Report">The report to check.</param>
            <returns>true if the report needs uploading.</returns>
            <remarks>This uploads the Xml file in the report, and gives the server the option to reject it. For example, crashes from 'Debug' builds are not uploaded.</remarks>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.ReportTooLarge(Tools.CrashReporter.CrashReportUploader.CrashReport)">
            <summary>
            Checks to see if any of the files are too large to upload.
            </summary>
            <param name="Report">The report to check.</param>
            <returns>true if the report is too large to upload.</returns>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.UploadReportFiles(Tools.CrashReporter.CrashReportUploader.CrashReport)">
            <summary>
            Uploads all files in the report directory.
            </summary>
            <param name="Report">The report to upload files for.</param>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.UploadComplete(Tools.CrashReporter.CrashReportUploader.CrashReport)">
            <summary>
            Notifies the server that all files have been uploaded.
            </summary>
            <param name="Report">The report to finalise.</param>
            <returns>true if the server responded with a success message.</returns>
            <remarks>This allows the server to know the report uploaded completely and correctly, and pass it on to the report processing stage.</remarks>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.UploadCrashReport(Tools.CrashReporter.CrashReportUploader.CrashReport)">
            <summary>
            Check to see if we should upload a report, and upload it if requested.
            </summary>
            <param name="Report">The report to potentially upload.</param>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.PingReportServer">
            <summary>
            Ping the server with a simple web request to ensure we can talk to it.
            </summary>
            <returns>true if the crash report URL (the 'UploadReportURL' setting) is contactable.</returns>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportHandler.UploadCrashReports">
            <summary>
            Checks to see if the server is available, and tries to upload all discovered crash reports.
            </summary>
        </member>
        <member name="T:Tools.CrashReporter.CrashReportUploader.CrashReportUploaderProgram">
            <summary>
            The container for the Crash Report Uploader application.
            </summary>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportUploaderProgram.AppExceptionHandler(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Application exception handling for any uncaught exceptions
            </summary>
            <param name="Sender">The object that threw the exception.</param>
            <param name="Arguments">The details about the exception.</param>
        </member>
        <member name="M:Tools.CrashReporter.CrashReportUploader.CrashReportUploaderProgram.Main(System.String[])">
            <summary>
            Find all crash reports, create a report on them if we can, then upload them to the crash report site.
            </summary>
            <param name="Arguments">The command line arguments.</param>
        </member>
    </members>
</doc>
