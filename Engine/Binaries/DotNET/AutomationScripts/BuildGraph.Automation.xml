<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BuildGraph.Automation</name>
    </assembly>
    <members>
        <member name="T:AutomationTool.Agent">
            <summary>
            Stores a list of nodes which can be executed on a single agent
            </summary>
        </member>
        <member name="F:AutomationTool.Agent.Name">
            <summary>
            Name of this agent. Used for display purposes in a build system.
            </summary>
        </member>
        <member name="F:AutomationTool.Agent.PossibleTypes">
            <summary>
            Array of valid agent types that these nodes may run on. When running in the build system, this determines the class of machine that should
            be selected to run these nodes. The first defined agent type for this branch will be used.
            </summary>
        </member>
        <member name="F:AutomationTool.Agent.Nodes">
            <summary>
            List of nodes in this agent group.
            </summary>
        </member>
        <member name="M:AutomationTool.Agent.#ctor(System.String,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="InName">Name of this agent group</param>
            <param name="InPossibleTypes">Array of valid agent types. See comment for AgentTypes member.</param>
        </member>
        <member name="M:AutomationTool.Agent.Write(System.Xml.XmlWriter,AutomationTool.ManualTrigger)">
            <summary>
            Writes this agent group out to a file, filtering nodes by a controlling trigger
            </summary>
            <param name="Writer">The XML writer to output to</param>
            <param name="ControllingTrigger">The controlling trigger to filter by</param>
        </member>
        <member name="T:AutomationTool.Badge">
            <summary>
            Defines a badge which gives an at-a-glance summary of part of the build, and can be displayed in UGS
            </summary>
        </member>
        <member name="F:AutomationTool.Badge.Name">
            <summary>
            Name of this badge
            </summary>
        </member>
        <member name="F:AutomationTool.Badge.Project">
            <summary>
            Depot path to the project that this badge applies to. Used for filtering in UGS.
            </summary>
        </member>
        <member name="F:AutomationTool.Badge.Nodes">
            <summary>
            Set of nodes that this badge reports the status of
            </summary>
        </member>
        <member name="M:AutomationTool.Badge.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="InName">Name of this report</param>
            <param name="InProject">Depot path to the project that this badge applies to</param>
        </member>
        <member name="M:AutomationTool.Badge.ToString">
            <summary>
            Get the name of this badge
            </summary>
            <returns>The name of this badge</returns>
        </member>
        <member name="T:AutomationTool.BuildGraph">
             <summary>
             Tool to execute build automation scripts for UE4 projects, which can be run locally or in parallel across a build farm (assuming synchronization and resource allocation implemented by a separate system).
            
             Build graphs are declared using an XML script using syntax similar to MSBuild, ANT or NAnt, and consist of the following components:
            
             - Tasks:        Building blocks which can be executed as part of the build process. Many predefined tasks are provided ('Cook', 'Compile', 'Copy', 'Stage', 'Log', 'PakFile', etc...), and additional tasks may be 
                             added be declaring classes derived from AutomationTool.CustomTask in other UAT modules. 
             - Nodes:        A named sequence of tasks which are executed in order to produce outputs. Nodes may have dependencies on other nodes for their outputs before they can be executed. Declared with the 'Node' element.
             - Agents:		A machine which can execute a sequence of nodes, if running as part of a build system. Has no effect when building locally. Declared with the 'Agent' element.
             - Triggers:     Container for agents which should only be executed when explicitly triggered (using the -Trigger=... or -SkipTriggers command line argument). Declared with the 'Trigger' element.
             - Notifiers:    Specifies email recipients for failures in one or more nodes, whether they should receive notifications on warnings, and so on.
             
             Scripts may set properties with the &lt;Property Name="Foo" Value="Bar"/&gt; syntax. Properties referenced with the $(Property Name) notation are valid within all strings, and will be expanded as macros when the 
             script is read. If a property name is not set explicitly, it defaults to the contents of an environment variable with the same name. Properties may be sourced from environment variables or the command line using
             the &lt;EnvVar&gt; and &lt;Option&gt; elements respectively.
            
             Any elements can be conditionally defined via the "If" attribute. A full grammar for conditions is written up in Condition.cs.
             
             File manipulation is done using wildcards and tags. Any attribute that accepts a list of files may consist of: a Perforce-style wildcard (matching any number of "...", "*" and "?" patterns in any location), a 
             full path name, or a reference to a tagged collection of files, denoted by prefixing with a '#' character. Files may be added to a tag set using the &lt;Tag&gt; Task, which also allows performing set union/difference 
             style operations. Each node can declare multiple outputs in the form of a list of named tags, which other nodes can then depend on.
             
             Build graphs may be executed in parallel as part build system. To do so, the initial graph configuration is generated by running with the -Export=... argument (producing a JSON file listing the nodes 
             and dependencies to execute). Each participating agent should be synced to the same changelist, and UAT should be re-run with the appropriate -Node=... argument. Outputs from different nodes are transferred between 
             agents via shared storage, typically a network share, the path to which can be specified on the command line using the -SharedStorageDir=... argument. Note that the allocation of machines, and coordination between 
             them, is assumed to be managed by an external system based on the contents of the script generated by -Export=....
             
             A schema for the known set of tasks can be generated by running UAT with the -Schema=... option. Generating a schema and referencing it from a BuildGraph script allows Visual Studio to validate and auto-complete 
             elements as you type.
             </summary>
        </member>
        <member name="M:AutomationTool.BuildGraph.Execute">
            <summary>
            Main entry point for the BuildGraph command
            </summary>
        </member>
        <member name="M:AutomationTool.BuildGraph.FindAvailableTasks(System.Collections.Generic.Dictionary{System.String,AutomationTool.ScriptTask},System.Boolean)">
            <summary>
            Find all the tasks which are available from the loaded assemblies
            </summary>
            <param name="NameToTask">Mapping from task name to information about how to serialize it</param>
            <param name="bPublicTasksOnly">Whether to include just public tasks, or all the tasks in any loaded assemblies</param>
        </member>
        <member name="M:AutomationTool.BuildGraph.ReadTokenFile(UnrealBuildTool.FileReference)">
            <summary>
            Reads the contents of the given token
            </summary>
            <returns>Contents of the token, or null if it does not exist</returns>
        </member>
        <member name="M:AutomationTool.BuildGraph.WriteTokenFile(UnrealBuildTool.FileReference,System.String)">
            <summary>
            Attempts to write an owner to a token file transactionally
            </summary>
            <returns>True if the lock was acquired, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.BuildGraph.IsPublicAssembly(UnrealBuildTool.FileReference)">
            <summary>
            Checks whether the given assembly is a publically distributed engine assembly.
            </summary>
            <param name="File">Assembly location</param>
            <returns>True if the assembly is distributed publically</returns>
        </member>
        <member name="M:AutomationTool.BuildGraph.FindCompletedNodes(AutomationTool.Graph,AutomationTool.TempStorage)">
            <summary>
            Find all the nodes in the graph which are already completed
            </summary>
            <param name="Graph">The graph instance</param>
            <param name="Storage">The temp storage backend which stores the shared state</param>
        </member>
        <member name="M:AutomationTool.BuildGraph.BuildAllNodes(AutomationTool.JobContext,AutomationTool.Graph,AutomationTool.TempStorage)">
            <summary>
            Builds all the nodes in the graph
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="Graph">The graph instance</param>
            <param name="Storage">The temp storage backend which stores the shared state</param>
            <returns>True if everything built successfully</returns>
        </member>
        <member name="M:AutomationTool.BuildGraph.BuildNode(AutomationTool.JobContext,AutomationTool.Graph,AutomationTool.Node,AutomationTool.TempStorage,System.Boolean)">
            <summary>
            Build a node
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="Graph">The graph to which the node belongs. Used to determine which outputs need to be transferred to temp storage.</param>
            <param name="Node">The node to build</param>
            <param name="Storage">The temp storage backend which stores the shared state</param>
            <param name="bWithBanner">Whether to write a banner before and after this node's log output</param>
            <returns>True if the node built successfully, false otherwise.</returns>
        </member>
        <member name="M:AutomationTool.BuildGraph.GenerateDocumentation(System.Collections.Generic.Dictionary{System.String,AutomationTool.ScriptTask},UnrealBuildTool.FileReference)">
            <summary>
            Generate HTML documentation for all the tasks
            </summary>
            <param name="NameToTask">Map of task name to implementation</param>
            <param name="OutputFile">Output file</param>
        </member>
        <member name="M:AutomationTool.BuildGraph.ConvertToMarkdown(System.Xml.XmlNode)">
            <summary>
            Converts an XML documentation node to markdown
            </summary>
            <param name="Node">The node to read</param>
            <returns>Text in markdown format</returns>
        </member>
        <member name="T:AutomationTool.Build">
            <summary>
            Legacy command name for compatibility.
            </summary>
        </member>
        <member name="T:AutomationTool.GraphPrintOptions">
            <summary>
            Options for how the graph should be printed
            </summary>
        </member>
        <member name="F:AutomationTool.GraphPrintOptions.ShowCommandLineOptions">
            <summary>
            Includes a list of the graph options
            </summary>
        </member>
        <member name="F:AutomationTool.GraphPrintOptions.ShowDependencies">
            <summary>
            Includes the list of dependencies for each node
            </summary>
        </member>
        <member name="F:AutomationTool.GraphPrintOptions.ShowNotifications">
            <summary>
            Includes the list of notifiers for each node
            </summary>
        </member>
        <member name="T:AutomationTool.GraphDiagnostic">
            <summary>
            Diagnostic message from the graph script. These messages are parsed at startup, then culled along with the rest of the graph nodes before output. Doing so
            allows errors and warnings which are only output if a node is part of the graph being executed.
            </summary>
        </member>
        <member name="F:AutomationTool.GraphDiagnostic.EventType">
            <summary>
            The diagnostic event type
            </summary>
        </member>
        <member name="F:AutomationTool.GraphDiagnostic.Message">
            <summary>
            The message to display
            </summary>
        </member>
        <member name="F:AutomationTool.GraphDiagnostic.EnclosingNode">
            <summary>
            The node which this diagnostic is declared in. If the node is culled from the graph, the message will not be displayed.
            </summary>
        </member>
        <member name="F:AutomationTool.GraphDiagnostic.EnclosingAgent">
            <summary>
            The agent that this diagnostic is declared in. If the entire agent is culled from the graph, the message will not be displayed.
            </summary>
        </member>
        <member name="F:AutomationTool.GraphDiagnostic.EnclosingTrigger">
            <summary>
            The trigger that this diagnostic is declared in. If this trigger is not being run, the message will not be displayed.
            </summary>
        </member>
        <member name="T:AutomationTool.GraphOption">
            <summary>
            Represents a graph option. These are expanded during preprocessing, but are retained in order to display help messages.
            </summary>
        </member>
        <member name="F:AutomationTool.GraphOption.Name">
            <summary>
            Name of this option
            </summary>
        </member>
        <member name="F:AutomationTool.GraphOption.Description">
            <summary>
            Description for this option
            </summary>
        </member>
        <member name="F:AutomationTool.GraphOption.DefaultValue">
            <summary>
            Default value for this option
            </summary>
        </member>
        <member name="M:AutomationTool.GraphOption.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="Name">The name of this option</param>
            <param name="Description">Description of the option, for display on help pages</param>
            <param name="DefaultValue">Default value for the option</param>
        </member>
        <member name="M:AutomationTool.GraphOption.ToString">
            <summary>
            Returns a name of this option for debugging
            </summary>
            <returns>Name of the option</returns>
        </member>
        <member name="T:AutomationTool.Graph">
            <summary>
            Definition of a graph.
            </summary>
        </member>
        <member name="F:AutomationTool.Graph.Options">
            <summary>
            List of options, in the order they were specified
            </summary>
        </member>
        <member name="F:AutomationTool.Graph.Agents">
            <summary>
            List of agents containing nodes to execute
            </summary>
        </member>
        <member name="F:AutomationTool.Graph.NameToTrigger">
            <summary>
            All manual triggers that are part of this graph
            </summary>
        </member>
        <member name="F:AutomationTool.Graph.NameToAgent">
            <summary>
            Mapping from name to agent
            </summary>
        </member>
        <member name="F:AutomationTool.Graph.NameToNode">
            <summary>
            Mapping of names to the corresponding node.
            </summary>
        </member>
        <member name="F:AutomationTool.Graph.NameToReport">
            <summary>
            Mapping of names to the corresponding report.
            </summary>
        </member>
        <member name="F:AutomationTool.Graph.LocalTagNames">
            <summary>
            Mapping of names to their corresponding node output.
            </summary>
        </member>
        <member name="F:AutomationTool.Graph.TagNameToNodeOutput">
            <summary>
            Mapping of names to their corresponding node output.
            </summary>
        </member>
        <member name="F:AutomationTool.Graph.AggregateNameToNodes">
            <summary>
            Mapping of aggregate names to their respective nodes
            </summary>
        </member>
        <member name="F:AutomationTool.Graph.Badges">
            <summary>
            List of badges that can be displayed for this build
            </summary>
        </member>
        <member name="F:AutomationTool.Graph.Diagnostics">
            <summary>
            Diagnostic messages for this graph
            </summary>
        </member>
        <member name="M:AutomationTool.Graph.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:AutomationTool.Graph.ContainsName(System.String)">
            <summary>
            Checks whether a given name already exists
            </summary>
            <param name="Name">The name to check.</param>
            <returns>True if the name exists, false otherwise.</returns>
        </member>
        <member name="M:AutomationTool.Graph.TryResolveReference(System.String,AutomationTool.Node[]@)">
            <summary>
            Tries to resolve the given name to one or more nodes. Checks for aggregates, and actual nodes.
            </summary>
            <param name="Name">The name to search for</param>
            <param name="OutNodes">If the name is a match, receives an array of nodes and their output names</param>
            <returns>True if the name was found, false otherwise.</returns>
        </member>
        <member name="M:AutomationTool.Graph.TryResolveInputReference(System.String,AutomationTool.NodeOutput[]@)">
            <summary>
            Tries to resolve the given name to one or more node outputs. Checks for aggregates, and actual nodes.
            </summary>
            <param name="Name">The name to search for</param>
            <param name="OutOutputs">If the name is a match, receives an array of nodes and their output names</param>
            <returns>True if the name was found, false otherwise.</returns>
        </member>
        <member name="M:AutomationTool.Graph.Select(System.Collections.Generic.IEnumerable{AutomationTool.Node})">
            <summary>
            Cull the graph to only include the given nodes and their dependencies
            </summary>
            <param name="TargetNodes">A set of target nodes to build</param>
        </member>
        <member name="M:AutomationTool.Graph.SkipTriggers(System.Collections.Generic.HashSet{AutomationTool.ManualTrigger})">
            <summary>
            Skips the given triggers, collapsing everything inside them into their parent trigger.
            </summary>
            <param name="Triggers">Set of triggers to skip</param>
        </member>
        <member name="M:AutomationTool.Graph.Write(UnrealBuildTool.FileReference,UnrealBuildTool.FileReference)">
            <summary>
            Writes a preprocessed build graph to a script file
            </summary>
            <param name="File">The file to load</param>
            <param name="SchemaFile">Schema file for validation</param>
        </member>
        <member name="M:AutomationTool.Graph.Export(UnrealBuildTool.FileReference,AutomationTool.ManualTrigger,System.Collections.Generic.HashSet{AutomationTool.Node})">
            <summary>
            Export the build graph to a Json file, for parallel execution by the build system
            </summary>
            <param name="File">Output file to write</param>
            <param name="Trigger">The trigger whose nodes to run. Null for the default nodes.</param>
            <param name="CompletedNodes">Set of nodes which have been completed</param>
        </member>
        <member name="M:AutomationTool.Graph.Print(System.Collections.Generic.HashSet{AutomationTool.Node},AutomationTool.GraphPrintOptions)">
            <summary>
            Print the contents of the graph
            </summary>
            <param name="CompletedNodes">Set of nodes which are already complete</param>
            <param name="PrintOptions">Options for how to print the graph</param>
        </member>
        <member name="T:AutomationTool.LockFile">
            <summary>
            Utility class which creates a file and obtains an exclusive lock on it. Used as a mutex between processes on different machines through a network share.
            </summary>
        </member>
        <member name="T:AutomationTool.NodeOutput">
            <summary>
            Reference to an output tag from a particular node
            </summary>
        </member>
        <member name="F:AutomationTool.NodeOutput.ProducingNode">
            <summary>
            The node which produces the given output
            </summary>
        </member>
        <member name="F:AutomationTool.NodeOutput.TagName">
            <summary>
            Name of the tag
            </summary>
        </member>
        <member name="M:AutomationTool.NodeOutput.#ctor(AutomationTool.Node,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="InProducingNode">Node which produces the given output</param>
            <param name="InTagName">Name of the tag</param>
        </member>
        <member name="M:AutomationTool.NodeOutput.ToString">
            <summary>
            Returns a string representation of this output for debugging purposes
            </summary>
            <returns>The name of this output</returns>
        </member>
        <member name="T:AutomationTool.Node">
            <summary>
            Defines a node, a container for tasks and the smallest unit of execution that can be run as part of a build graph.
            </summary>
        </member>
        <member name="F:AutomationTool.Node.Name">
            <summary>
            The node's name
            </summary>
        </member>
        <member name="F:AutomationTool.Node.Inputs">
            <summary>
            Array of inputs which this node requires to run
            </summary>
        </member>
        <member name="F:AutomationTool.Node.Outputs">
            <summary>
            Array of outputs produced by this node
            </summary>
        </member>
        <member name="F:AutomationTool.Node.InputDependencies">
            <summary>
            Nodes which this node has input dependencies on
            </summary>
        </member>
        <member name="F:AutomationTool.Node.OrderDependencies">
            <summary>
            Nodes which this node needs to run after
            </summary>
        </member>
        <member name="F:AutomationTool.Node.ControllingTrigger">
            <summary>
            The trigger which controls whether this node will be executed
            </summary>
        </member>
        <member name="F:AutomationTool.Node.RequiredTokens">
            <summary>
            Tokens which must be acquired for this node to run
            </summary>
        </member>
        <member name="F:AutomationTool.Node.Tasks">
            <summary>
            List of tasks to execute
            </summary>
        </member>
        <member name="F:AutomationTool.Node.NotifyUsers">
            <summary>
            List of email addresses to notify if this node fails.
            </summary>
        </member>
        <member name="F:AutomationTool.Node.NotifySubmitters">
            <summary>
            If set, anyone that has submitted to one of the given paths will be notified on failure of this node
            </summary>
        </member>
        <member name="F:AutomationTool.Node.bNotifyOnWarnings">
            <summary>
            Whether to ignore warnings produced by this node
            </summary>
        </member>
        <member name="M:AutomationTool.Node.#ctor(System.String,AutomationTool.NodeOutput[],System.String[],AutomationTool.Node[],AutomationTool.Node[],AutomationTool.ManualTrigger,UnrealBuildTool.FileReference[])">
            <summary>
            Constructor
            </summary>
            <param name="InName">The name of this node</param>
            <param name="InInputs">Inputs that this node depends on</param>
            <param name="InOutputNames">Names of the outputs that this node produces</param>
            <param name="InInputDependencies">Nodes which this node is dependent on for its inputs</param>
            <param name="InOrderDependencies">Nodes which this node needs to run after. Should include all input dependencies.</param>
            <param name="InControllingTrigger">The trigger which this node is behind</param>
            <param name="InRequiredTokens">Optional tokens which must be required for this node to run</param>
        </member>
        <member name="M:AutomationTool.Node.Build(AutomationTool.JobContext,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Build all the tasks for this node
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include. Should be set to contain the node inputs on entry.</param>
            <returns>Whether the task succeeded or not. Exiting with an exception will be caught and treated as a failure.</returns>
        </member>
        <member name="M:AutomationTool.Node.MergeTasks">
            <summary>
            Merge tasks which can be combined together
            </summary>
        </member>
        <member name="M:AutomationTool.Node.GetDirectInputDependencies">
            <summary>
            Determines the minimal set of direct input dependencies for this node to run
            </summary>
            <returns>Sequence of nodes that are direct inputs to this node</returns>
        </member>
        <member name="M:AutomationTool.Node.GetDirectOrderDependencies">
            <summary>
            Determines the minimal set of direct order dependencies for this node to run
            </summary>
            <returns>Sequence of nodes that are direct order dependencies of this node</returns>
        </member>
        <member name="M:AutomationTool.Node.IsBehind(AutomationTool.ManualTrigger)">
            <summary>
            Checks whether this node is behind the given trigger
            </summary>
            <param name="Trigger">The trigger to check</param>
            <returns>True if the node is directly or indirectly behind the given trigger, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.Node.Write(System.Xml.XmlWriter)">
            <summary>
            Write this node to an XML writer
            </summary>
            <param name="Writer">The writer to output the node to</param>
        </member>
        <member name="M:AutomationTool.Node.ToString">
            <summary>
            Returns the name of this node
            </summary>
            <returns>The name of this node</returns>
        </member>
        <member name="P:AutomationTool.Node.DefaultOutput">
            <summary>
            Returns the default output for this node, which includes all build products
            </summary>
        </member>
        <member name="T:AutomationTool.Report">
            <summary>
            Defines a report to be generated as part of the build.
            </summary>
        </member>
        <member name="F:AutomationTool.Report.Name">
            <summary>
            Name of this trigger
            </summary>
        </member>
        <member name="F:AutomationTool.Report.Nodes">
            <summary>
            Set of nodes to include in the report
            </summary>
        </member>
        <member name="F:AutomationTool.Report.NotifyUsers">
            <summary>
            List of users to notify with this report
            </summary>
        </member>
        <member name="M:AutomationTool.Report.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="InName">Name of this report</param>
        </member>
        <member name="M:AutomationTool.Report.ToString">
            <summary>
            Get the name of this report
            </summary>
            <returns>The name of this report</returns>
        </member>
        <member name="T:AutomationTool.TaskParameterValidationType">
            <summary>
            Specifies validation that should be performed on a task parameter.
            </summary>
        </member>
        <member name="F:AutomationTool.TaskParameterValidationType.Default">
            <summary>
            Allow any valid values for the field type.
            </summary>
        </member>
        <member name="F:AutomationTool.TaskParameterValidationType.Name">
            <summary>
            A standard name; alphanumeric characters, plus underscore and space. Spaces at the start or end, or more than one in a row are prohibited.
            </summary>
        </member>
        <member name="F:AutomationTool.TaskParameterValidationType.NameList">
            <summary>
            A list of names separated by semicolons
            </summary>
        </member>
        <member name="F:AutomationTool.TaskParameterValidationType.Tag">
            <summary>
            A tag name (a regular name with '#' prefix)
            </summary>
        </member>
        <member name="F:AutomationTool.TaskParameterValidationType.TagList">
            <summary>
            A list of tag names separated by semicolons
            </summary>
        </member>
        <member name="F:AutomationTool.TaskParameterValidationType.Target">
            <summary>
            A standard node/aggregate/agent name or tag name
            </summary>
        </member>
        <member name="F:AutomationTool.TaskParameterValidationType.TargetList">
            <summary>
            A list of standard name or tag names separated by semicolons
            </summary>
        </member>
        <member name="F:AutomationTool.TaskParameterValidationType.FileSpec">
            <summary>
            A file specification, which may contain tags and wildcards.
            </summary>
        </member>
        <member name="F:AutomationTool.TaskParameterValidationType.FileName">
            <summary>
            A single file name
            </summary>
        </member>
        <member name="F:AutomationTool.TaskParameterValidationType.DirectoryName">
            <summary>
            A single directory name
            </summary>
        </member>
        <member name="T:AutomationTool.TaskParameterAttribute">
            <summary>
            Attribute to mark parameters to a task, which should be read as XML attributes from the script file.
            </summary>
        </member>
        <member name="P:AutomationTool.TaskParameterAttribute.Optional">
            <summary>
            Whether the parameter can be omitted
            </summary>
        </member>
        <member name="P:AutomationTool.TaskParameterAttribute.ValidationType">
            <summary>
            Sets additional restrictions on how this field is validated in the schema. Default is to allow any valid field type.
            </summary>
        </member>
        <member name="T:AutomationTool.TaskElementAttribute">
            <summary>
            Attribute used to associate an XML element name with a parameter block that can be used to construct tasks
            </summary>
        </member>
        <member name="F:AutomationTool.TaskElementAttribute.Name">
            <summary>
            Name of the XML element that can be used to denote this class
            </summary>
        </member>
        <member name="F:AutomationTool.TaskElementAttribute.ParametersType">
            <summary>
            Type to be constructed from the deserialized element
            </summary>
        </member>
        <member name="M:AutomationTool.TaskElementAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="InName">Name of the XML element used to denote this object</param>
            <param name="InParametersType">Type to be constructed from this object</param>
        </member>
        <member name="T:AutomationTool.CustomTask">
            <summary>
            Base class for all custom build tasks
            </summary>
        </member>
        <member name="M:AutomationTool.CustomTask.Merge(System.Collections.Generic.List{AutomationTool.CustomTask})">
            <summary>
            Allow this task to merge with other tasks within the same node if it can. This can be useful to allow tasks to execute in parallel.
            </summary>
            <param name="OtherTasks">Other tasks that this task can merge with. If a merge takes place, the other tasks should be removed from the list.</param>
        </member>
        <member name="M:AutomationTool.CustomTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute this node.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>Whether the task succeeded or not. Exiting with an exception will be caught and treated as a failure.</returns>
        </member>
        <member name="M:AutomationTool.CustomTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.CustomTask.Write(System.Xml.XmlWriter,System.Object)">
            <summary>
            Writes this task to an XML writer, using the given parameters object.
            </summary>
            <param name="Writer">Writer for the XML schema</param>
            <param name="Parameters">Parameters object that this task is constructed with</param>
        </member>
        <member name="M:AutomationTool.CustomTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.CustomTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="M:AutomationTool.CustomTask.FindTagNamesFromFilespec(System.String)">
            <summary>
            Adds tag names from a filespec
            </summary>
            <param name="Filespec">A filespec, as can be passed to ResolveFilespec</param>
            <returns>Tag names from this filespec</returns>
        </member>
        <member name="M:AutomationTool.CustomTask.FindTagNamesFromList(System.String)">
            <summary>
            Enumerates tag names from a list
            </summary>
            <param name="TagList">List of tags separated by semicolons</param>
            <returns>Tag names from this filespec</returns>
        </member>
        <member name="M:AutomationTool.CustomTask.ResolveFile(System.String)">
            <summary>
            Resolves a single name to a file reference, resolving relative paths to the root of the current path.
            </summary>
            <param name="Name">Name of the file</param>
            <returns>Fully qualified file reference</returns>
        </member>
        <member name="M:AutomationTool.CustomTask.ResolveDirectory(System.String)">
            <summary>
            Resolves a directory reference from the given string. Assumes the root directory is the root of the current branch.
            </summary>
            <param name="Name">Name of the directory. May be null or empty.</param>
            <returns>The resolved directory</returns>
        </member>
        <member name="M:AutomationTool.CustomTask.FindOrAddTagSet(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}},System.String)">
            <summary>
            Finds or adds a set containing files with the given tag
            </summary>
            <param name="TagNameToFileSet">Map of tag names to the set of files they contain</param>
            <param name="TagName">The tag name to return a set for. A leading '#' character is required.</param>
            <returns>Set of files</returns>
        </member>
        <member name="M:AutomationTool.CustomTask.ResolveFilespec(UnrealBuildTool.DirectoryReference,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Resolve a list of files, tag names or file specifications separated by semicolons. Supported entries may be:
              a) The name of a tag set (eg. #CompiledBinaries)
              b) Relative or absolute filenames
              c) A simple file pattern (eg. Foo/*.cpp)
              d) A full directory wildcard (eg. Engine/...)
            Note that wildcards may only match the last fragment in a pattern, so matches like "/*/Foo.txt" and "/.../Bar.txt" are illegal.
            </summary>
            <param name="DefaultDirectory">The default directory to resolve relative paths to</param>
            <param name="DelimitedPatterns">List of files, tag names, or file specifications to include separated by semicolons.</param>
            <param name="TagNameToFileSet">Mapping of tag name to fileset, as passed to the Execute() method</param>
            <returns>Set of matching files.</returns>
        </member>
        <member name="M:AutomationTool.CustomTask.ResolveFilespecWithExcludePatterns(UnrealBuildTool.DirectoryReference,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Resolve a list of files, tag names or file specifications separated by semicolons as above, but preserves any directory references for further processing.
            </summary>
            <param name="DefaultDirectory">The default directory to resolve relative paths to</param>
            <param name="DelimitedPatterns">List of files, tag names, or file specifications to include separated by semicolons.</param>
            <param name="ExcludePatterns">Set of patterns to apply to directory searches. This can greatly speed up enumeration by earlying out of recursive directory searches if large directories are excluded (eg. .../Intermediate/...).</param>
            <param name="TagNameToFileSet">Mapping of tag name to fileset, as passed to the Execute() method</param>
            <returns>Set of matching files.</returns>
        </member>
        <member name="M:AutomationTool.CustomTask.ResolveFilespecWithExcludePatterns(UnrealBuildTool.DirectoryReference,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Resolve a list of files, tag names or file specifications as above, but preserves any directory references for further processing.
            </summary>
            <param name="DefaultDirectory">The default directory to resolve relative paths to</param>
            <param name="FilePatterns">List of files, tag names, or file specifications to include separated by semicolons.</param>
            <param name="ExcludePatterns">Set of patterns to apply to directory searches. This can greatly speed up enumeration by earlying out of recursive directory searches if large directories are excluded (eg. .../Intermediate/...).</param>
            <param name="TagNameToFileSet">Mapping of tag name to fileset, as passed to the Execute() method</param>
            <returns>Set of matching files.</returns>
        </member>
        <member name="M:AutomationTool.CustomTask.SplitDelimitedList(System.String)">
            <summary>
            Splits a string separated by semicolons into a list, removing empty entries
            </summary>
            <param name="Text">The input string</param>
            <returns>Array of the parsed items</returns>
        </member>
        <member name="T:AutomationTool.JobContext">
            <summary>
            Used to pass information to tasks about the currently running job.
            </summary>
        </member>
        <member name="F:AutomationTool.JobContext.OwnerCommand">
            <summary>
            The command that is running the current job.
            </summary>
        </member>
        <member name="M:AutomationTool.JobContext.#ctor(AutomationTool.BuildCommand)">
            <summary>
            Constructor
            </summary>
            <param name="InOwnerCommand">The command running the current job</param>
        </member>
        <member name="T:AutomationTool.ManualTrigger">
            <summary>
            Defines a manual trigger; a fence behind which build nodes will only be built if explicitly activated in the job setup.
            </summary>
        </member>
        <member name="F:AutomationTool.ManualTrigger.Parent">
            <summary>
            The parent trigger
            </summary>
        </member>
        <member name="F:AutomationTool.ManualTrigger.Name">
            <summary>
            Name of this trigger
            </summary>
        </member>
        <member name="F:AutomationTool.ManualTrigger.NotifyUsers">
            <summary>
            List of users to notify about this trigger
            </summary>
        </member>
        <member name="M:AutomationTool.ManualTrigger.#ctor(AutomationTool.ManualTrigger,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="InParent">The parent trigger</param>
            <param name="InName">Name of this trigger</param>
        </member>
        <member name="M:AutomationTool.ManualTrigger.IsUpstreamFrom(AutomationTool.ManualTrigger)">
            <summary>
            Checks whether this trigger is upstream of another
            </summary>
            <param name="Other">The other trigger to check</param>
            <returns>True if this trigger is upstream of the given trigger</returns>
        </member>
        <member name="M:AutomationTool.ManualTrigger.IsDownstreamFrom(AutomationTool.ManualTrigger)">
            <summary>
            Checks whether this trigger is downstream of another
            </summary>
            <param name="Other">The parent trigger to check</param>
            <returns>True if the trigger is downstream of the given trigger</returns>
        </member>
        <member name="M:AutomationTool.ManualTrigger.ToString">
            <summary>
            Get the name of this trigger
            </summary>
            <returns>The qualified name of this trigger</returns>
        </member>
        <member name="P:AutomationTool.ManualTrigger.QualifiedName">
            <summary>
            The qualified name of this trigger. For triggers which are nested more than one level deep, this consists of all the required triggers in order, separated by dot characters.
            </summary>
        </member>
        <member name="T:AutomationTool.ConditionException">
            <summary>
            Exception class thrown due to type and syntax errors in condition expressions
            </summary>
        </member>
        <member name="M:AutomationTool.ConditionException.#ctor(System.String,System.Object[])">
            <summary>
            Constructor; formats the exception message with the given String.Format() style parameters.
            </summary>
            <param name="Format">Formatting string, in String.Format syntax</param>
            <param name="Args">Optional arguments for the string</param>
        </member>
        <member name="T:AutomationTool.Condition">
            <summary>
            Class to evaluate condition expressions in build scripts, following this grammar:
            
            	or-expression   ::= and-expression
            	                  | or-expression "Or" and-expression;
            	    
            	and-expression  ::= comparison
            	                  | and-expression "And" comparison;
            	                  
            	comparison      ::= scalar
            	                  | scalar "==" scalar
            	                  | scalar "!=" scalar
            	                  | scalar "&lt;" scalar
            	                  | scalar "&lt;=" scalar;
            	                  | scalar "&gt;" scalar
            	                  | scalar "&gt;=" scalar;
            	                  
                scalar          ::= "(" or-expression ")"
                                  | "!" scalar
                                  | "Exists" "(" scalar ")"
                                  | "HasTrailingSlash" "(" scalar ")"
                                  | string
                                  | identifier;
                                  
                string          ::= any sequence of characters terminated by single quotes (') or double quotes ("). Not escaped.
                identifier      ::= any sequence of letters, digits, or underscore characters.
                
            The type of each subexpression is always a scalar, which are converted to expression-specific types (eg. booleans, integers) as required.
            Scalar values are case-insensitive strings. The identifier 'true' and the strings "true" and "True" are all identical scalars.
            </summary>
        </member>
        <member name="F:AutomationTool.Condition.EndToken">
            <summary>
            Sentinel added to the end of a sequence of tokens.
            </summary>
        </member>
        <member name="M:AutomationTool.Condition.Evaluate(System.String)">
            <summary>
            Evaluates the given string as a condition. Throws a ConditionException on a type or syntax error.
            </summary>
            <param name="Text">The condition text</param>
            <returns>The result of evaluating the condition</returns>
        </member>
        <member name="M:AutomationTool.Condition.EvaluateOr(System.Collections.Generic.List{System.String},System.Int32@)">
            <summary>
            Evaluates an "or-expression" production.
            </summary>
            <param name="Tokens">List of tokens in the expression</param>
            <param name="Idx">Current position in the token stream. Will be incremented as tokens are consumed.</param>
            <returns>A scalar representing the result of evaluating the expression.</returns>
        </member>
        <member name="M:AutomationTool.Condition.EvaluateAnd(System.Collections.Generic.List{System.String},System.Int32@)">
            <summary>
            Evaluates an "and-expression" production.
            </summary>
            <param name="Tokens">List of tokens in the expression</param>
            <param name="Idx">Current position in the token stream. Will be incremented as tokens are consumed.</param>
            <returns>A scalar representing the result of evaluating the expression.</returns>
        </member>
        <member name="M:AutomationTool.Condition.EvaluateComparison(System.Collections.Generic.List{System.String},System.Int32@)">
            <summary>
            Evaluates a "comparison" production.
            </summary>
            <param name="Tokens">List of tokens in the expression</param>
            <param name="Idx">Current position in the token stream. Will be incremented as tokens are consumed.</param>
            <returns>The result of evaluating the expression</returns>
        </member>
        <member name="M:AutomationTool.Condition.EvaluateScalar(System.Collections.Generic.List{System.String},System.Int32@)">
            <summary>
            Evaluates a "scalar" production.
            </summary>
            <param name="Tokens">List of tokens in the expression</param>
            <param name="Idx">Current position in the token stream. Will be incremented as tokens are consumed.</param>
            <returns>The result of evaluating the expression</returns>
        </member>
        <member name="M:AutomationTool.Condition.CoerceToBool(System.String)">
            <summary>
            Converts a scalar to a boolean value.
            </summary>
            <param name="Scalar">The scalar to convert</param>
            <returns>The scalar converted to a boolean value.</returns>
        </member>
        <member name="M:AutomationTool.Condition.CoerceToInteger(System.String)">
            <summary>
            Converts a scalar to a boolean value.
            </summary>
            <param name="Scalar">The scalar to convert</param>
            <returns>The scalar converted to an integer value.</returns>
        </member>
        <member name="M:AutomationTool.Condition.Tokenize(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Splits an input string up into expression tokens.
            </summary>
            <param name="Text">Text to be converted into tokens</param>
            <param name="Tokens">List to receive a list of tokens</param>
        </member>
        <member name="M:AutomationTool.Condition.TestConditions">
            <summary>
            Test cases for conditions.
            </summary>
        </member>
        <member name="M:AutomationTool.Condition.TestCondition(System.String,System.Boolean)">
            <summary>
            Helper method to evaluate a condition and check it's the expected result
            </summary>
            <param name="Condition">Condition to evaluate</param>
            <param name="ExpectedResult">The expected result</param>
        </member>
        <member name="T:AutomationTool.ScriptTaskParameter">
            <summary>
            Information about a parameter to a task
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptTaskParameter.Name">
            <summary>
            Name of this parameter
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptTaskParameter.FieldInfo">
            <summary>
            Information about this field
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptTaskParameter.ValidationType">
            <summary>
            Validation type for this field
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptTaskParameter.bOptional">
            <summary>
            Whether this parameter is optional
            </summary>
        </member>
        <member name="M:AutomationTool.ScriptTaskParameter.#ctor(System.String,System.Reflection.FieldInfo,AutomationTool.TaskParameterValidationType,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:AutomationTool.ScriptTask">
            <summary>
            Helper class to serialize a task from an xml element
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptTask.Name">
            <summary>
            Name of this task
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptTask.TaskClass">
            <summary>
            Type of the task to construct with this info
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptTask.ParametersClass">
            <summary>
            Type to construct with the parsed parameters
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptTask.NameToParameter">
            <summary>
            Mapping of attribute name to field
            </summary>
        </member>
        <member name="M:AutomationTool.ScriptTask.#ctor(System.String,System.Type,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="InName">Name of the task</param>
            <param name="InTaskClass">Task class to create</param>
            <param name="InParametersClass">Class type of an object to be constructed and passed as an argument to the task class constructor</param>
        </member>
        <member name="T:AutomationTool.ScriptSchemaStandardType">
            <summary>
            Enumeration of standard types used in the schema. Avoids hard-coding names.
            </summary>
        </member>
        <member name="T:AutomationTool.ScriptSchema">
            <summary>
            Schema for build graph definitions. Stores information about the supported tasks, and allows validating an XML document.
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.RootElementName">
            <summary>
            Name of the root element
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.NamespaceURI">
            <summary>
            Namespace for the schema
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.IllegalNameCharacters">
            <summary>
            Characters which are not permitted in names.
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.NamePattern">
            <summary>
            Pattern which matches any name; alphanumeric characters, with single embedded spaces.
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.NameListPattern">
            <summary>
            Pattern which matches a list of names, separated by semicolons.
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.TagPattern">
            <summary>
            Pattern which matches any tag name; a name with a leading '#' character
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.TagListPattern">
            <summary>
            Pattern which matches a list of tag names, separated by semicolons;
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.NameOrTagPattern">
            <summary>
            Pattern which matches any name or tag name; a name with a leading '#' character
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.NameOrTagListPattern">
            <summary>
            Pattern which matches a list of names or tag names, separated by semicolons;
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.QualifiedNamePattern">
            <summary>
            Pattern which matches a qualified name.
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.PropertyPattern">
            <summary>
            Pattern which matches a property name
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.StringWithPropertiesPattern">
            <summary>
            Pattern which matches balanced parentheses in a string
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.BalancedStringPattern">
            <summary>
            Pattern which matches balanced parentheses in a string
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.NameToTask">
            <summary>
            List of all the loaded classes which derive from BuildGraph.Task
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.StringTypeName">
            <summary>
            Qualified name for the string type
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptSchema.CompiledSchema">
            <summary>
            The inner xml schema
            </summary>
        </member>
        <member name="M:AutomationTool.ScriptSchema.#ctor(System.Collections.Generic.Dictionary{System.String,AutomationTool.ScriptTask})">
            <summary>
            Constructor
            </summary>
            <param name="InNameToTask">Mapping of task name to information about how to construct it</param>
        </member>
        <member name="M:AutomationTool.ScriptSchema.TryGetTask(System.String,AutomationTool.ScriptTask@)">
            <summary>
            Gets information about the task with the given name
            </summary>
            <param name="TaskName">Name of the task</param>
            <param name="Task">Receives task info for the named task</param>
            <returns>True if the task name was found and Task is set, false otherwise.</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.Export(UnrealBuildTool.FileReference)">
            <summary>
            Export the schema to a file
            </summary>
            <param name="File"></param>
        </member>
        <member name="M:AutomationTool.ScriptSchema.GetTypeName(AutomationTool.ScriptSchemaStandardType)">
            <summary>
            Gets the bare name for the given script type
            </summary>
            <param name="Type">Script type to find the name of</param>
            <returns>Name of the schema type that matches the given script type</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.GetQualifiedTypeName(AutomationTool.ScriptSchemaStandardType)">
            <summary>
            Gets the qualified name for the given script type
            </summary>
            <param name="Type">Script type to find the qualified name for</param>
            <returns>Qualified name of the schema type that matches the given script type</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.GetQualifiedTypeName(AutomationTool.TaskParameterValidationType)">
            <summary>
            Gets the qualified name of the schema type for the given type of validation
            </summary>
            <returns>Qualified name for the corresponding schema type</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateGraphType">
            <summary>
            Creates the schema type representing the graph type
            </summary>
            <returns>Type definition for a graph</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateTriggerType">
            <summary>
            Creates the schema type representing the trigger type
            </summary>
            <returns>Type definition for a trigger</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateTriggerBodyType">
            <summary>
            Creates the schema type representing the contents of a trigger type
            </summary>
            <returns>Type definition for an agent</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateAgentType">
            <summary>
            Creates the schema type representing the agent type
            </summary>
            <returns>Type definition for an agent</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateAgentBodyType">
            <summary>
            Creates the schema type representing the contents of agent type
            </summary>
            <returns>Type definition for an agent</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateNodeType">
            <summary>
            Creates the schema type representing the node type
            </summary>
            <returns>Type definition for a node</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateNodeBodyType(System.Collections.Generic.Dictionary{System.String,System.Xml.Schema.XmlSchemaComplexType})">
            <summary>
            Creates the schema type representing the body of the node type
            </summary>
            <returns>Type definition for a node</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateAggregateType">
            <summary>
            Creates the schema type representing the aggregate type
            </summary>
            <returns>Type definition for an aggregate</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateReportType">
            <summary>
            Creates the schema type representing the report type
            </summary>
            <returns>Type definition for a report</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateBadgeType">
            <summary>
            Creates the schema type representing the badge type
            </summary>
            <returns>Type definition for a badge</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateNotifyType">
            <summary>
            Creates the schema type representing a notifier
            </summary>
            <returns>Type definition for a notifier</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateIncludeType">
            <summary>
            Creates the schema type representing an include type
            </summary>
            <returns>Type definition for an include directive</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateOptionType">
            <summary>
            Creates the schema type representing a parameter type
            </summary>
            <returns>Type definition for a parameter</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateEnvVarType">
            <summary>
            Creates the schema type representing a environment variable type
            </summary>
            <returns>Type definition for an environment variable property</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreatePropertyType">
            <summary>
            Creates the schema type representing a property type
            </summary>
            <returns>Type definition for a property</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateDiagnosticType(AutomationTool.ScriptSchemaStandardType)">
            <summary>
            Creates the schema type representing a warning or error type
            </summary>
            <returns>Type definition for a warning</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateDoElement(AutomationTool.ScriptSchemaStandardType)">
            <summary>
            Creates an element representing a conditional "Do" block, which recursively contains another type
            </summary>
            <param name="InnerType">The base type for the do block to contain</param>
            <returns>New schema element for the block</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateSwitchElement(AutomationTool.ScriptSchemaStandardType)">
            <summary>
            Creates an element representing a conditional "Switch" block, which recursively contains another type
            </summary>
            <param name="InnerType">The base type for the do block to contain</param>
            <returns>New schema element for the block</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateForEachElement(AutomationTool.ScriptSchemaStandardType)">
            <summary>
            Creates an element representing a conditional "ForEach" block, which recursively contains another type
            </summary>
            <param name="InnerType">The base type for the foreach block to contain</param>
            <returns>New schema element for the block</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateSchemaElement(System.String,AutomationTool.ScriptSchemaStandardType)">
            <summary>
            Constructs an XmlSchemaElement and initializes it with the given parameters
            </summary>
            <param name="Name">Element name</param>
            <param name="SchemaType">Type enumeration for the attribute</param>
            <returns>A new XmlSchemaElement object</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateSchemaElement(System.String,System.Xml.XmlQualifiedName)">
            <summary>
            Constructs an XmlSchemaElement and initializes it with the given parameters
            </summary>
            <param name="Name">Element name</param>
            <param name="SchemaTypeName">Qualified name of the type for this element</param>
            <returns>A new XmlSchemaElement object</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateSchemaAttribute(System.String,AutomationTool.ScriptSchemaStandardType,System.Xml.Schema.XmlSchemaUse)">
            <summary>
            Constructs an XmlSchemaAttribute and initialize it with the given parameters
            </summary>
            <param name="Name">The attribute name</param>
            <param name="SchemaType">Type enumeration for the attribute</param>
            <param name="Use">Whether the attribute is required or optional</param>
            <returns>A new XmlSchemaAttribute object</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateSchemaAttribute(System.String,System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaUse)">
            <summary>
            Constructs an XmlSchemaAttribute and initialize it with the given parameters
            </summary>
            <param name="Name">The attribute name</param>
            <param name="SchemaTypeName">Qualified name of the type for this attribute</param>
            <param name="Use">Whether the attribute is required or optional</param>
            <returns>The new attribute</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateSimpleTypeFromUnion(System.String,System.Xml.Schema.XmlSchemaType[])">
            <summary>
            Creates a simple type that is the union of two other types
            </summary>
            <param name="Name">The name of the type</param>
            <param name="ValidTypes">List of valid types for the union</param>
            <returns>A simple type which will match the given pattern</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateSimpleTypeFromRegex(System.String,System.String)">
            <summary>
            Creates a simple type that matches a regex
            </summary>
            <param name="Name">Name of the new type</param>
            <param name="Pattern">Regex pattern to match</param>
            <returns>A simple type which will match the given pattern</returns>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateUserType(System.String,System.Type)">
            <summary>
            Create a schema type for the given user type. Currently only handles enumerations.
            </summary>
            <param name="Name">Name for the new type</param>
            <param name="Type">CLR type information to create a schema type for</param>
        </member>
        <member name="M:AutomationTool.ScriptSchema.CreateEnumType(System.String,System.Type)">
            <summary>
            Create a schema type for the given enum.
            </summary>
            <param name="Name">Name for the new type</param>
            <param name="Type">CLR type information to create a schema type for</param>
        </member>
        <member name="T:AutomationTool.ScriptDocument">
            <summary>
            Implementation of XmlDocument which preserves line numbers for its elements
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptDocument.File">
            <summary>
            The file being read
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptDocument.LineInfo">
            <summary>
            Interface to the LineInfo on the active XmlReader
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptDocument.bHasErrors">
            <summary>
            Set to true if the reader encounters an error
            </summary>
        </member>
        <member name="M:AutomationTool.ScriptDocument.#ctor(UnrealBuildTool.FileReference)">
            <summary>
            Private constructor. Use ScriptDocument.Load to read an XML document.
            </summary>
        </member>
        <member name="M:AutomationTool.ScriptDocument.CreateElement(System.String,System.String,System.String)">
            <summary>
            Overrides XmlDocument.CreateElement() to construct ScriptElements rather than XmlElements
            </summary>
        </member>
        <member name="M:AutomationTool.ScriptDocument.TryRead(UnrealBuildTool.FileReference,AutomationTool.ScriptSchema,AutomationTool.ScriptDocument@)">
            <summary>
            Loads a script document from the given file
            </summary>
            <param name="File">The file to load</param>
            <param name="Schema">The schema to validate against</param>
            <param name="OutDocument">If successful, the document that was read</param>
            <returns>True if the document could be read, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.ScriptDocument.ValidationEvent(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Callback for validation errors in the document
            </summary>
            <param name="Sender">Standard argument for ValidationEventHandler</param>
            <param name="Args">Standard argument for ValidationEventHandler</param>
        </member>
        <member name="T:AutomationTool.ScriptElement">
            <summary>
            Implementation of XmlElement which preserves line numbers
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptElement.File">
            <summary>
            The file containing this element
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptElement.LineNumber">
            <summary>
            The line number containing this element
            </summary>
        </member>
        <member name="M:AutomationTool.ScriptElement.#ctor(UnrealBuildTool.FileReference,System.Int32,System.String,System.String,System.String,AutomationTool.ScriptDocument)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:AutomationTool.ScriptReader">
            <summary>
            Reader for build graph definitions. Instanced to contain temporary state; public interface is through ScriptReader.TryRead().
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptReader.Graph">
            <summary>
            The current graph
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptReader.ScopedProperties">
            <summary>
            List of property name to value lookups. Modifications to properties are scoped to nodes and agents. EnterScope() pushes an empty dictionary onto the end of this list, and LeaveScope() removes one. 
            ExpandProperties() searches from last to first lookup when trying to resolve a property name, and takes the first it finds.
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptReader.ShadowProperties">
            <summary>
            When declaring a property in a nested scope, we enter its name into a set for each parent scope which prevents redeclaration in an OUTER scope later. Subsequent NESTED scopes can redeclare it.
            The former is likely a coding error, since it implies that the scope of the variable was meant to be further out, whereas the latter is common for temporary and loop variables.
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptReader.Schema">
            <summary>
            Schema for the script
            </summary>
        </member>
        <member name="F:AutomationTool.ScriptReader.NumErrors">
            <summary>
            The number of errors encountered during processing so far
            </summary>
        </member>
        <member name="M:AutomationTool.ScriptReader.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},AutomationTool.ScriptSchema)">
            <summary>
            Private constructor. Use ScriptReader.TryRead() to read a script file.
            </summary>
            <param name="DefaultProperties">Default properties available to the script</param>
            <param name="Schema">Schema for the script</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.TryRead(UnrealBuildTool.FileReference,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},AutomationTool.ScriptSchema,AutomationTool.Graph@)">
            <summary>
            Try to read a script file from the given file.
            </summary>
            <param name="File">File to read from</param>
            <param name="Arguments">Arguments passed in to the graph on the command line</param>
            <param name="DefaultProperties">Default properties available to the script</param>
            <param name="Schema">Schema for the script</param>
            <param name="Graph">If successful, the graph constructed from the given script</param>
            <returns>True if the graph was read, false if there were errors</returns>
        </member>
        <member name="M:AutomationTool.ScriptReader.TryRead(UnrealBuildTool.FileReference,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Read the script from the given file
            </summary>
            <param name="File">File to read from</param>
            <param name="Arguments">Arguments passed in to the graph on the command line</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadGraphBody(System.Xml.XmlElement,UnrealBuildTool.DirectoryReference,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Reads the contents of a graph
            </summary>
            <param name="Element">The parent element to read from</param>
            <param name="BaseDirectory">Base directory to resolve includes against</param>
            <param name="Arguments">Arguments passed in to the graph on the command line</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ValidationHandler(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Handles validation messages from validating the document against its schema
            </summary>
            <param name="Sender">The source of the event</param>
            <param name="Args">Event arguments</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.EnterScope">
            <summary>
            Push a new property scope onto the stack
            </summary>
        </member>
        <member name="M:AutomationTool.ScriptReader.LeaveScope">
            <summary>
            Pop a property scope from the stack
            </summary>
        </member>
        <member name="M:AutomationTool.ScriptReader.SetPropertyValue(AutomationTool.ScriptElement,System.String,System.String)">
            <summary>
            Sets a property value in the current scope
            </summary>
            <param name="Element">Element containing the property assignment. Used for error messages if the property is shadowed in another scope.</param>
            <param name="Name">Name of the property</param>
            <param name="Value">Value for the property</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.TryGetPropertyValue(System.String,System.String@)">
            <summary>
            Tries to get the value of a property
            </summary>
            <param name="Name">Name of the property</param>
            <param name="Value">On success, contains the value of the property. Set to null otherwise.</param>
            <returns>True if the property was found, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadTrigger(AutomationTool.ScriptElement)">
            <summary>
            Reads the definition for a trigger.
            </summary>
            <param name="Element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadTriggerBody(System.Xml.XmlElement,AutomationTool.ManualTrigger)">
            <summary>
            Reads the body of a trigger element
            </summary>
            <param name="Element">Xml element to read the definition from</param>
            <param name="Trigger">The enclosing trigger definition</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadInclude(AutomationTool.ScriptElement,UnrealBuildTool.DirectoryReference,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Read an include directive, and the contents of the target file
            </summary>
            <param name="Element">Xml element to read the definition from</param>
            <param name="BaseDir">Base directory to resolve relative include paths from </param>
            <param name="Arguments">Arguments passed in to the graph on the command line</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadOption(AutomationTool.ScriptElement,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads the definition of a graph option; a parameter which can be set by the user on the command-line or via an environment variable.
            </summary>
            <param name="Element">Xml element to read the definition from</param>
            <param name="Arguments">Arguments passed in to the graph on the command line</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadProperty(AutomationTool.ScriptElement)">
            <summary>
            Reads a property assignment.
            </summary>
            <param name="Element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadEnvVar(AutomationTool.ScriptElement)">
            <summary>
            Reads a property assignment from an environment variable.
            </summary>
            <param name="Element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadAgent(AutomationTool.ScriptElement,AutomationTool.ManualTrigger)">
            <summary>
            Reads the definition for an agent.
            </summary>
            <param name="Element">Xml element to read the definition from</param>
            <param name="Trigger">The controlling trigger for nodes in this agent</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadAgentBody(AutomationTool.ScriptElement,AutomationTool.Agent,AutomationTool.ManualTrigger)">
            <summary>
            Read the contents of an agent definition
            </summary>
            <param name="Element">Xml element to read the definition from</param>
            <param name="ParentAgent">The agent to contain the definition</param>
            <param name="ControllingTrigger">The enclosing trigger</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadAggregate(AutomationTool.ScriptElement)">
            <summary>
            Reads the definition for an aggregate
            </summary>
            <param name="Element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadReport(AutomationTool.ScriptElement)">
            <summary>
            Reads the definition for a report
            </summary>
            <param name="Element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadBadge(AutomationTool.ScriptElement)">
            <summary>
            Reads the definition for a badge
            </summary>
            <param name="Element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadNode(AutomationTool.ScriptElement,AutomationTool.Agent,AutomationTool.ManualTrigger)">
            <summary>
            Reads the definition for a node, and adds it to the given agent
            </summary>
            <param name="Element">Xml element to read the definition from</param>
            <param name="ParentAgent">Agent for the node to be added to</param>
            <param name="ControllingTrigger">The controlling trigger for this node</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadNodeBody(System.Xml.XmlElement,AutomationTool.Node,AutomationTool.Agent,AutomationTool.ManualTrigger)">
            <summary>
            Reads the contents of a node element
            </summary>
            <param name="Element">Xml element to read the definition from</param>
            <param name="NewNode">The new node that has been created</param>
            <param name="ParentAgent">Agent for the node to be added to</param>
            <param name="ControllingTrigger">The controlling trigger for this node</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadBlock(AutomationTool.ScriptElement,System.Action{AutomationTool.ScriptElement})">
            <summary>
            Reads a block element
            </summary>
            <param name="Element">Xml element to read the definition from</param>
            <param name="ReadContents">Delegate to read the contents of the element, if the condition evaluates to true</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadSwitch(AutomationTool.ScriptElement,System.Action{AutomationTool.ScriptElement})">
            <summary>
            Reads a "Switch" element 
            </summary>
            <param name="Element">Xml element to read the definition from</param>
            <param name="ReadContents">Delegate to read the contents of the element, if the condition evaluates to true</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadForEach(AutomationTool.ScriptElement,System.Action{AutomationTool.ScriptElement})">
            <summary>
            Reads a "ForEach" element 
            </summary>
            <param name="Element">Xml element to read the definition from</param>
            <param name="ReadContents">Delegate to read the contents of the element, if the condition evaluates to true</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadTask(AutomationTool.ScriptElement,AutomationTool.Node)">
            <summary>
            Reads a task definition from the given element, and add it to the given list
            </summary>
            <param name="Element">Xml element to read the definition from</param>
            <param name="ParentNode">The node which owns this task</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadNotifier(AutomationTool.ScriptElement)">
            <summary>
            Reads the definition for an email notifier
            </summary>
            <param name="Element">Xml element to read the definition from</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadDiagnostic(AutomationTool.ScriptElement,UnrealBuildTool.LogEventType,AutomationTool.Node,AutomationTool.Agent,AutomationTool.ManualTrigger)">
            <summary>
            Reads a warning from the given element, evaluates the condition on it, and writes it to the log if the condition passes.
            </summary>
            <param name="Element">Xml element to read the definition from</param>
            <param name="EventType">The diagnostic event type</param>
            <param name="EnclosingNode">The node that this diagnostic is declared in, or null</param>
            <param name="EnclosingAgent">The agent that this diagnostic is declared in, or null</param>
            <param name="EnclosingTrigger">The trigger that this diagnostic is declared in, or null</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.CheckNameIsUnique(AutomationTool.ScriptElement,System.String)">
            <summary>
            Checks that the given name does not already used to refer to a node, and print an error if it is.
            </summary>
            <param name="Element">Xml element to read from</param>
            <param name="Name">Name of the alias</param>
            <returns>True if the name was registered correctly, false otherwise.</returns>
        </member>
        <member name="M:AutomationTool.ScriptReader.ResolveReferences(AutomationTool.ScriptElement,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Resolve a list of references to a set of nodes
            </summary>
            <param name="Element">Element used to locate any errors</param>
            <param name="ReferenceNames">Sequence of names to look up</param>
            <returns>Hashset of all the nodes included by the given names</returns>
        </member>
        <member name="M:AutomationTool.ScriptReader.ResolveInputReferences(AutomationTool.ScriptElement,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Resolve a list of references to a set of nodes
            </summary>
            <param name="Element">Element used to locate any errors</param>
            <param name="ReferenceNames">Sequence of names to look up</param>
            <returns>Set of all the nodes included by the given names</returns>
        </member>
        <member name="M:AutomationTool.ScriptReader.TryReadObjectName(AutomationTool.ScriptElement,System.String@)">
            <summary>
            Reads an object name from its defining element. Outputs an error if the name is missing.
            </summary>
            <param name="Element">Element to read the name for</param>
            <param name="Name">Output variable to receive the name of the object</param>
            <returns>True if the object had a valid name (assigned to the Name variable), false if the name was invalid or missing.</returns>
        </member>
        <member name="M:AutomationTool.ScriptReader.TryReadQualifiedObjectName(AutomationTool.ScriptElement,System.String[]@)">
            <summary>
            Reads an qualified object name from its defining element. Outputs an error if the name is missing.
            </summary>
            <param name="Element">Element to read the name for</param>
            <param name="QualifiedName">Output variable to receive the name of the object</param>
            <returns>True if the object had a valid name (assigned to the Name variable), false if the name was invalid or missing.</returns>
        </member>
        <member name="M:AutomationTool.ScriptReader.ValidateName(AutomationTool.ScriptElement,System.String)">
            <summary>
            Checks that the given name is valid syntax
            </summary>
            <param name="Element">The element that contains the name</param>
            <param name="Name">The name to check</param>
            <returns>True if the name is valid</returns>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadAttribute(AutomationTool.ScriptElement,System.String)">
            <summary>
            Expands any properties and reads an attribute.
            </summary>
            <param name="Element">Element to read the attribute from</param>
            <param name="Name">Name of the attribute</param>
            <returns>Array of names, with all leading and trailing whitespace removed</returns>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadListAttribute(AutomationTool.ScriptElement,System.String)">
            <summary>
            Expands any properties and reads a list of strings from an attribute, separated by semi-colon characters
            </summary>
            <param name="Element"></param>
            <param name="Name"></param>
            <returns>Array of names, with all leading and trailing whitespace removed</returns>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadBooleanAttribute(AutomationTool.ScriptElement,System.String,System.Boolean)">
            <summary>
            Reads an attribute from the given XML element, expands any properties in it, and parses it as a boolean.
            </summary>
            <param name="Element">Element to read the attribute from</param>
            <param name="Name">Name of the attribute</param>
            <param name="bDefaultValue">Default value if the attribute is missing</param>
            <returns>The value of the attribute field</returns>
        </member>
        <member name="M:AutomationTool.ScriptReader.ReadEnumAttribute``1(AutomationTool.ScriptElement,System.String,``0)">
            <summary>
            Reads an attribute from the given XML element, expands any properties in it, and parses it as an enum of the given type.
            </summary>
            <typeparam name="T">The enum type to parse the attribute as</typeparam>
            <param name="Element">Element to read the attribute from</param>
            <param name="Name">Name of the attribute</param>
            <param name="DefaultValue">Default value for the enum, if the attribute is missing</param>
            <returns>The value of the attribute field</returns>
        </member>
        <member name="M:AutomationTool.ScriptReader.LogError(AutomationTool.ScriptElement,System.String,System.Object[])">
            <summary>
            Outputs an error message to the log and increments the number of errors, referencing the file and line number of the element that caused it.
            </summary>
            <param name="Element">The script element causing the error</param>
            <param name="Format">Standard String.Format()-style format string</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.LogWarning(AutomationTool.ScriptElement,System.String,System.Object[])">
            <summary>
            Outputs a warning message to the log and increments the number of errors, referencing the file and line number of the element that caused it.
            </summary>
            <param name="Element">The script element causing the error</param>
            <param name="Format">Standard String.Format()-style format string</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="M:AutomationTool.ScriptReader.EvaluateCondition(AutomationTool.ScriptElement)">
            <summary>
            Evaluates the (optional) conditional expression on a given XML element via the If="..." attribute, and returns true if the element is enabled.
            </summary>
            <param name="Element">The element to check</param>
            <returns>True if the element's condition evaluates to true (or doesn't have a conditional expression), false otherwise</returns>
        </member>
        <member name="M:AutomationTool.ScriptReader.ExpandProperties(AutomationTool.ScriptElement,System.String)">
            <summary>
            Expand all the property references (of the form $(PropertyName)) in a string.
            </summary>
            <param name="Element">The element containing the string. Used for diagnostic messages.</param>
            <param name="Text">The input string to expand properties in</param>
            <returns>The expanded string</returns>
        </member>
        <member name="T:Win.Automation.AgeStoreTaskParameters">
            <summary>
            Parameters for a task that purges data from a symbol store after a given age
            </summary>
        </member>
        <member name="F:Win.Automation.AgeStoreTaskParameters.Platform">
            <summary>
            The target platform to age symbols for.
            </summary>
        </member>
        <member name="F:Win.Automation.AgeStoreTaskParameters.StoreDir">
            <summary>
            The symbol server directory.
            </summary>
        </member>
        <member name="F:Win.Automation.AgeStoreTaskParameters.Days">
            <summary>
            Number of days worth of symbols to keep.
            </summary>
        </member>
        <member name="F:Win.Automation.AgeStoreTaskParameters.Filter">
            <summary>
            A substring to match in directory file names before deleting symbols. This allows the "age store" task
            to avoid deleting symbols from other builds in the case where multiple builds share the same symbol server.
            Specific use of the filter value is determined by the symbol server structure defined by the platform tool chain.
            </summary>
        </member>
        <member name="T:Win.Automation.AgeStoreTask">
            <summary>
            Task which strips symbols from a set of files. This task is named after the AGESTORE utility that comes with the Microsoft debugger tools SDK, but is actually a separate implementation. The main
            difference is that it uses the last modified time rather than last access time to determine which files to delete.
            </summary>
        </member>
        <member name="F:Win.Automation.AgeStoreTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:Win.Automation.AgeStoreTask.#ctor(Win.Automation.AgeStoreTaskParameters)">
            <summary>
            Construct a spawn task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:Win.Automation.AgeStoreTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:Win.Automation.AgeStoreTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:Win.Automation.AgeStoreTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:Win.Automation.AgeStoreTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.CommandletTaskParameters">
            <summary>
            Parameters for a task which runs a UE4 commandlet
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandletTaskParameters.Name">
            <summary>
            The commandlet name to execute
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandletTaskParameters.Project">
            <summary>
            The project to run the editor with
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandletTaskParameters.Arguments">
            <summary>
            Arguments to be passed to the commandlet
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandletTaskParameters.EditorExe">
            <summary>
            The editor executable to use. Defaults to the development UE4Editor executable for the current platform.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.CommandletTask">
            <summary>
            Spawns the editor to run a commandlet.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CommandletTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CommandletTask.#ctor(AutomationTool.Tasks.CommandletTaskParameters)">
            <summary>
            Construct a new CommandletTask.
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.CommandletTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CommandletTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CommandletTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CommandletTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.CsCompileTaskParameters">
            <summary>
            Parameters for a task that compiles a C# project
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.Project">
            <summary>
            The C# project file to be compile. More than one project file can be specified by separating with semicolons.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.Configuration">
            <summary>
            The configuration to compile
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.Platform">
            <summary>
            The platform to compile
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.Arguments">
            <summary>
            Additional options to pass to the compiler
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.EnumerateOnly">
            <summary>
            Only enumerate build products; do not actually compile the projects.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTaskParameters.TagReferences">
            <summary>
            Tag to be applied to any non-private references the projects have
            (i.e. those that are external and not copied into the output dir)
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.CsCompileTask">
            <summary>
            Compiles C# project files, and their dependencies.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsCompileTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileTask.#ctor(AutomationTool.Tasks.CsCompileTaskParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileTask.FindBuildProducts(System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}@,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}@)">
            <summary>
            Find all the build products created by compiling the given project file
            </summary>
            <param name="ProjectFiles">Initial project file to read. All referenced projects will also be read.</param>
            <param name="InitialProperties">Mapping of property name to value</param>
            <param name="OutBuildProducts">Receives a set of build products on success</param>
            <param name="OutReferences">Receives a set of non-private references on success</param>
            <returns>True if the build products were found, false otherwise.</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CsCompileTask.ReadProjectsRecursively(UnrealBuildTool.FileReference,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{UnrealBuildTool.FileReference,AutomationTool.Tasks.CsProjectInfo})">
            <summary>
            Read a project file, plus all the project files it references.
            </summary>
            <param name="File">Project file to read</param>
            <param name="InitialProperties">Mapping of property name to value for the initial project</param>
            <param name="FileToProjectInfo"></param>
            <returns>True if the projects were read correctly, false (and prints an error to the log) if not</returns>
        </member>
        <member name="T:AutomationTool.Tasks.CsProjectInfo">
            <summary>
            Basic information from a preprocessed C# project file. Supports reading a project file, expanding simple conditions in it, parsing property values, assembly references and references to other projects.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsProjectInfo.Properties">
            <summary>
            Evaluated properties from the project file
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsProjectInfo.References">
            <summary>
            Mapping of referenced assemblies to their 'CopyLocal' (aka 'Private') setting.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.CsProjectInfo.ProjectReferences">
            <summary>
            Mapping of referenced projects to their 'CopyLocal' (aka 'Private') setting.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.CsProjectInfo.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Constructor
            </summary>
            <param name="InProperties">Initial mapping of property names to values</param>
        </member>
        <member name="M:AutomationTool.Tasks.CsProjectInfo.GetOutputDir(UnrealBuildTool.DirectoryReference)">
            <summary>
            Resolve the project's output directory
            </summary>
            <param name="BaseDirectory">Base directory to resolve relative paths to</param>
            <returns>The configured output directory</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CsProjectInfo.AddBuildProducts(UnrealBuildTool.DirectoryReference,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference})">
            <summary>
            Adds build products from the project to the given set.
            </summary>
            <param name="OutputDir">Output directory for the build products. May be different to the project's output directory in the case that we're copying local to another project.</param>
            <param name="BuildProducts">Set to receive the list of build products</param>
        </member>
        <member name="M:AutomationTool.Tasks.CsProjectInfo.AddOptionalBuildProduct(UnrealBuildTool.FileReference,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference})">
            <summary>
            Adds a build product to the output list if it exists
            </summary>
            <param name="BuildProduct">The build product to add</param>
            <param name="BuildProducts">List of output build products</param>
        </member>
        <member name="M:AutomationTool.Tasks.CsProjectInfo.TryRead(UnrealBuildTool.FileReference,System.Collections.Generic.Dictionary{System.String,System.String},AutomationTool.Tasks.CsProjectInfo@)">
            <summary>
            Attempts to read project information for the given file.
            </summary>
            <param name="File">The project file to read</param>
            <param name="Properties">Initial set of property values</param>
            <param name="OutProjectInfo">If successful, the parsed project info</param>
            <returns>True if the project was read successfully, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CsProjectInfo.ParsePropertyGroup(System.Xml.XmlElement,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Parses a 'PropertyGroup' element.
            </summary>
            <param name="ParentElement">The parent 'PropertyGroup' element</param>
            <param name="Properties">Dictionary mapping property names to values</param>
        </member>
        <member name="M:AutomationTool.Tasks.CsProjectInfo.ParseItemGroup(UnrealBuildTool.DirectoryReference,System.Xml.XmlElement,AutomationTool.Tasks.CsProjectInfo)">
            <summary>
            Parses an 'ItemGroup' element.
            </summary>
            <param name="BaseDirectory">Base directory to resolve relative paths against</param>
            <param name="ParentElement">The parent 'ItemGroup' element</param>
            <param name="ProjectInfo">Project info object to be updated</param>
        </member>
        <member name="M:AutomationTool.Tasks.CsProjectInfo.ParseReference(UnrealBuildTool.DirectoryReference,System.Xml.XmlElement,System.Collections.Generic.Dictionary{UnrealBuildTool.FileReference,System.Boolean})">
            <summary>
            Parses an assembly reference from a given 'Reference' element
            </summary>
            <param name="BaseDirectory">Directory to resolve relative paths against</param>
            <param name="ParentElement">The parent 'Reference' element</param>
            <param name="References">Dictionary of project files to a bool indicating whether the assembly should be copied locally to the referencing project.</param>
        </member>
        <member name="M:AutomationTool.Tasks.CsProjectInfo.ParseProjectReference(UnrealBuildTool.DirectoryReference,System.Xml.XmlElement,System.Collections.Generic.Dictionary{UnrealBuildTool.FileReference,System.Boolean})">
            <summary>
            Parses a project reference from a given 'ProjectReference' element
            </summary>
            <param name="BaseDirectory">Directory to resolve relative paths against</param>
            <param name="ParentElement">The parent 'ProjectReference' element</param>
            <param name="ProjectReferences">Dictionary of project files to a bool indicating whether the outputs of the project should be copied locally to the referencing project.</param>
        </member>
        <member name="M:AutomationTool.Tasks.CsProjectInfo.GetChildElementString(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Reads the inner text of a child XML element
            </summary>
            <param name="ParentElement">The parent element to check</param>
            <param name="Name">Name of the child element</param>
            <param name="DefaultValue">Default value to return if the child element is missing</param>
            <returns>The contents of the child element, or default value if it's not present</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CsProjectInfo.GetChildElementBoolean(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Read a child XML element with the given name, and parse it as a boolean.
            </summary>
            <param name="ParentElement">Parent element to check</param>
            <param name="Name">Name of the child element to look for</param>
            <param name="DefaultValue">Default value to return if the element is missing or not a valid bool</param>
            <returns>The parsed boolean, or the default value</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CsProjectInfo.EvaluateCondition(System.Xml.XmlElement,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Evaluate whether the optional MSBuild condition on an XML element evaluates to true. Currently only supports 'ABC' == 'DEF' style expressions, but can be expanded as needed.
            </summary>
            <param name="Element">The XML element to check</param>
            <param name="Properties">Dictionary mapping from property names to values.</param>
            <returns></returns>
        </member>
        <member name="M:AutomationTool.Tasks.CsProjectInfo.ExpandProperties(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Expand MSBuild properties within a string. If referenced properties are not in this dictionary, the process' environment variables are expanded. Unknown properties are expanded to an empty string.
            </summary>
            <param name="Text">The input string to expand</param>
            <param name="Properties">Dictionary mapping from property names to values.</param>
            <returns>String with all properties expanded.</returns>
        </member>
        <member name="M:AutomationTool.Tasks.CsProjectInfo.Tokenize(System.String)">
            <summary>
            Split an MSBuild condition into tokens
            </summary>
            <param name="Condition">The condition expression</param>
            <returns>Array of the parsed tokens</returns>
        </member>
        <member name="T:AutomationTool.SymStoreTaskParameters">
            <summary>
            Parameters for a task that uploads symbols to a symbol server
            </summary>
        </member>
        <member name="F:AutomationTool.SymStoreTaskParameters.Platform">
            <summary>
            The platform toolchain required to handle symbol files.
            </summary>
        </member>
        <member name="F:AutomationTool.SymStoreTaskParameters.Files">
            <summary>
            List of output files. PDBs will be extracted from this list.
            </summary>
        </member>
        <member name="F:AutomationTool.SymStoreTaskParameters.StoreDir">
            <summary>
            Output directory for the compressed symbols.
            </summary>
        </member>
        <member name="F:AutomationTool.SymStoreTaskParameters.Product">
            <summary>
            Name of the product for the symbol store records.
            </summary>
        </member>
        <member name="T:AutomationTool.SymStoreTask">
            <summary>
            Task which strips symbols from a set of files
            </summary>
        </member>
        <member name="F:AutomationTool.SymStoreTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:AutomationTool.SymStoreTask.#ctor(AutomationTool.SymStoreTaskParameters)">
            <summary>
            Construct a spawn task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:AutomationTool.SymStoreTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:AutomationTool.SymStoreTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.SymStoreTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.SymStoreTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.TagReceiptTaskParameters">
            <summary>
            Parameters for the Tag Receipt task.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.Files">
            <summary>
            Set of receipt files (*.target) to read, including wildcards and tag names, separated by semicolons.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.EngineDir">
            <summary>
            Path to the Engine folder, used to expand $(EngineDir) properties in receipt files. Defaults to the Engine directory for the current workspace.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.ProjectDir">
            <summary>
            Path to the project folder, used to expand $(ProjectDir) properties in receipt files. Defaults to the Engine directory for the current workspace.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.BuildProducts">
            <summary>
            Whether to tag the Build Products listed in receipts
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.BuildProductType">
            <summary>
            Which type of Build Products to tag (See TargetReceipt.cs - UnrealBuildTool.BuildProductType for valid values)
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.RuntimeDependencies">
            <summary>
            Whether to tag the Runtime Dependencies listed in receipts
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.StagedFileType">
            <summary>
            Which type of Runtime Dependencies to tag (See TargetReceipt.cs - UnrealBuildTool.StagedFileType for valid values)
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.PrecompiledBuildDependencies">
            <summary>
            Whether to tag the Precompiled Build Dependencies listed in receipts
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.PrecompiledRuntimeDependencies">
            <summary>
            Whether to tag the Precompiled Runtime Dependencies listed in receipts
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTaskParameters.With">
            <summary>
            Name of the tag to apply
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.TagReceiptTask">
            <summary>
            Task which tags build products and/or runtime dependencies by reading from *.target files.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagReceiptTask.Parameters">
            <summary>
            Parameters to this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.TagReceiptTask.#ctor(AutomationTool.Tasks.TagReceiptTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters to select which files to search</param>
        </member>
        <member name="M:AutomationTool.Tasks.TagReceiptTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:AutomationTool.Tasks.TagReceiptTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.TagReceiptTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are required by this task
            </summary>
            <returns>The tag names which are required by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.TagReceiptTask.FindProducedTagNames">
            <summary>
            Find all the referenced tags from tasks in this task
            </summary>
            <returns>The tag names which are produced/modified by this task</returns>
        </member>
        <member name="T:BuildGraph.Tasks.PakFileTaskParameters">
            <summary>
            Parameters for a task that runs the cooker
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.PakFileTaskParameters.Files">
            <summary>
            List of files, wildcards and tag sets to add to the pak file, separated by ';' characters.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.PakFileTaskParameters.Output">
            <summary>
            PAK file to output
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.PakFileTaskParameters.ResponseFile">
            <summary>
            Path to a Response File that contains a list of files to add to the pak file, instead of specifying them individually
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.PakFileTaskParameters.RebaseDir">
            <summary>
            Directories to rebase the files relative to. If specified, the shortest path under a listed directory will be used for each file.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.PakFileTaskParameters.Order">
            <summary>
            Script which gives the order of files
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.PakFileTaskParameters.Sign">
            <summary>
            Encryption keys for this pak file
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.PakFileTaskParameters.Compress">
            <summary>
            Whether to compress files
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.PakFileTaskParameters.Arguments">
            <summary>
            Additional arguments to be passed to UnrealPak
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.PakFileTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task
            </summary>
        </member>
        <member name="T:BuildGraph.Tasks.PakFileTask">
            <summary>
            Creates a PAK file from a given set of files.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.PakFileTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.PakFileTask.#ctor(BuildGraph.Tasks.PakFileTaskParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:BuildGraph.Tasks.PakFileTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:BuildGraph.Tasks.PakFileTask.FindShortestRelativePath(UnrealBuildTool.FileReference,System.Collections.Generic.IEnumerable{UnrealBuildTool.DirectoryReference})">
            <summary>
            Find the shortest relative path of the given file from a set of base directories.
            </summary>
            <param name="File">Full path to a file</param>
            <param name="RebaseDirs">Possible base directories</param>
            <returns>The shortest relative path, or null if the file is not under any of them</returns>
        </member>
        <member name="M:BuildGraph.Tasks.PakFileTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.PakFileTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:BuildGraph.Tasks.PakFileTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:BuildGraph.Tasks.RenameTaskParameters">
            <summary>
            Parameters for a copy task
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.RenameTaskParameters.Files">
            <summary>
            The file or files to rename
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.RenameTaskParameters.From">
            <summary>
            The current file name, or pattern to match (eg. *.txt). Should not include any path separators.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.RenameTaskParameters.To">
            <summary>
            The new name for the file(s). Should not include any path separators.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.RenameTaskParameters.Tag">
            <summary>
            Tag to be applied to the renamed files
            </summary>
        </member>
        <member name="T:BuildGraph.Tasks.RenameTask">
            <summary>
            Renames a file, or group of files.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.RenameTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.RenameTask.#ctor(BuildGraph.Tasks.RenameTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:BuildGraph.Tasks.RenameTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:BuildGraph.Tasks.RenameTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.RenameTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:BuildGraph.Tasks.RenameTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:BuildGraph.Tasks.SpawnTaskParameters">
            <summary>
            Parameters for a spawn task
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.SpawnTaskParameters.Exe">
            <summary>
            Executable to spawn
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.SpawnTaskParameters.Arguments">
            <summary>
            Arguments for the newly created process
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.SpawnTaskParameters.ErrorLevel">
            <summary>
            The minimum exit code which is treated as an error.
            </summary>
        </member>
        <member name="T:BuildGraph.Tasks.SpawnTask">
            <summary>
            Spawns an external executable and waits for it to complete.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.SpawnTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.SpawnTask.#ctor(BuildGraph.Tasks.SpawnTaskParameters)">
            <summary>
            Construct a spawn task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:BuildGraph.Tasks.SpawnTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:BuildGraph.Tasks.SpawnTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.SpawnTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:BuildGraph.Tasks.SpawnTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:BuildGraph.Tasks.LogTaskParameters">
            <summary>
            Parameters for the log task
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.LogTaskParameters.Message">
            <summary>
            Message to print out
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.LogTaskParameters.Files">
            <summary>
            If specified, causes the given list of files to be printed after the given message.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.LogTaskParameters.IncludeContents">
            <summary>
            If specified, causes the contents of the given files to be printed out.
            </summary>
        </member>
        <member name="T:BuildGraph.Tasks.LogTask">
            <summary>
            Print a message (and other optional diagnostic information) to the output log
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.LogTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.LogTask.#ctor(BuildGraph.Tasks.LogTaskParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:BuildGraph.Tasks.LogTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:BuildGraph.Tasks.LogTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.LogTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:BuildGraph.Tasks.LogTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.SubmitTaskParameters">
            <summary>
            Parameters for the submit task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.Description">
            <summary>
            The description for the submitted changelist
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.Files">
            <summary>
            The files to submit
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.FileType">
            <summary>
            The Perforce file type for the submitted files (eg. binary+FS32)
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.Workspace">
            <summary>
            The workspace name. If specified, a new workspace will be created using the given stream and root directory to submit the files. If not, the current workspace will be used.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.Stream">
            <summary>
            The stream for the workspace; defaults to the current stream. Ignored unless If the Workspace attribute is also specified.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTaskParameters.RootDir">
            <summary>
            Root directory for the stream. If not specified, defaults to the current root directory.
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.SubmitTask">
            <summary>
            Creates a new changelist and submits a set of files to a Perforce stream.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SubmitTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SubmitTask.#ctor(AutomationTool.Tasks.SubmitTaskParameters)">
            <summary>
            Construct a version task
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.SubmitTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:AutomationTool.Tasks.SubmitTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SubmitTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.SubmitTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.TagTaskParameters">
            <summary>
            Parameters for the Tag task.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagTaskParameters.BaseDir">
            <summary>
            Set the base directory to resolve relative paths and patterns against. If set, any absolute patterns (eg. /Engine/Build/...) are taken to be relative to this path. If not, they are taken to be truly absolute.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagTaskParameters.Files">
            <summary>
            Set of files to work from, including wildcards and tag names, separated by semicolons. Resolved relative to BaseDir if set, otherwise to the branch root directory.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagTaskParameters.Filter">
            <summary>
            Patterns to filter the list of files by, including tag names or wildcards. May include patterns that apply to the base directory if set. Defaults to all files if not specified.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagTaskParameters.Except">
            <summary>
            Set of patterns to exclude from the matched list. May include tag names of patterns that apply to the base directory.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagTaskParameters.With">
            <summary>
            Name of the tag to apply
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.TagTask">
            <summary>
            Applies a tag to a given set of files. The list of files is found by enumerating the tags and file specifications given by the 'Files' 
            parameter. From this list, any files not matched by the 'Filter' parameter are removed, followed by any files matched by the 'Except' parameter.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.TagTask.Parameters">
            <summary>
            Parameters to this task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.TagTask.#ctor(AutomationTool.Tasks.TagTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters to select which files to match</param>
        </member>
        <member name="M:AutomationTool.Tasks.TagTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:AutomationTool.Tasks.TagTask.ParseRules(UnrealBuildTool.DirectoryReference,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Add rules matching a given set of patterns to a file filter. Patterns are added as absolute paths from the root.
            </summary>
            <param name="BaseDir">The base directory for relative paths.</param>
            <param name="DelimitedPatterns">List of patterns to add, separated by semicolons.</param>
            <param name="TagNameToFileSet">Mapping of tag name to a set of files.</param>
            <returns>List of rules, suitable for adding to a FileFilter object</returns>
        </member>
        <member name="M:AutomationTool.Tasks.TagTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.TagTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.TagTask.FindProducedTagNames">
            <summary>
            Find all the referenced tags from tasks in this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:BuildGraph.Tasks.CommandTaskParameters">
            <summary>
            Parameters for a task which calls another UAT command
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CommandTaskParameters.Name">
            <summary>
            The command name to execute
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CommandTaskParameters.Arguments">
            <summary>
            Arguments to be passed to the command
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CommandTaskParameters.MergeTelemetryWithPrefix">
            <summary>
            If non-null, instructs telemetry from the command to be merged into the telemetry for this UAT instance with the given prefix. May be an empty (non-null) string.
            </summary>
        </member>
        <member name="T:BuildGraph.Tasks.CommandTask">
            <summary>
            Invokes an AutomationTool child process to run the given command.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CommandTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.CommandTask.#ctor(BuildGraph.Tasks.CommandTaskParameters)">
            <summary>
            Construct a new CommandTask.
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:BuildGraph.Tasks.CommandTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:BuildGraph.Tasks.CommandTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.CommandTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:BuildGraph.Tasks.CommandTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.CompileTaskParameters">
            <summary>
            Parameters for a compile task
            </summary>
        </member>
        <member name="F:AutomationTool.CompileTaskParameters.Target">
            <summary>
            The target to compile
            </summary>
        </member>
        <member name="F:AutomationTool.CompileTaskParameters.Configuration">
            <summary>
            The configuration to compile
            </summary>
        </member>
        <member name="F:AutomationTool.CompileTaskParameters.Platform">
            <summary>
            The platform to compile for
            </summary>
        </member>
        <member name="F:AutomationTool.CompileTaskParameters.Arguments">
            <summary>
            Additional arguments for UnrealBuildTool
            </summary>
        </member>
        <member name="F:AutomationTool.CompileTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task
            </summary>
        </member>
        <member name="T:AutomationTool.CompileTask">
            <summary>
            Compiles a target with UnrealBuildTool.
            </summary>
        </member>
        <member name="F:AutomationTool.CompileTask.Targets">
            <summary>
            List of targets to compile. As well as the target specifically added for this task, additional compile tasks may be merged with it.
            </summary>
        </member>
        <member name="F:AutomationTool.CompileTask.TargetToTagName">
            <summary>
            Mapping of receipt filename to its corresponding tag name
            </summary>
        </member>
        <member name="M:AutomationTool.CompileTask.#ctor(AutomationTool.CompileTaskParameters)">
            <summary>
            Construct a compile task
            </summary>
            <param name="Parameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.CompileTask.Merge(System.Collections.Generic.List{AutomationTool.CustomTask})">
            <summary>
            Allow this task to merge with other tasks within the same node. This can be useful to allow tasks to execute in parallel and reduce overheads.
            </summary>
            <param name="OtherTasks">Other tasks that this task can merge with. If a merge takes place, the other tasks should be removed from the list.</param>
        </member>
        <member name="M:AutomationTool.CompileTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:AutomationTool.CompileTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.CompileTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.CompileTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:BuildGraph.Tasks.CookTaskParameters">
            <summary>
            Parameters for a task that runs the cooker
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CookTaskParameters.Project">
            <summary>
            Project file to be cooked
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CookTaskParameters.Platform">
            <summary>
            The cook platform to target (eg. WindowsNoEditor)
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CookTaskParameters.Maps">
            <summary>
            List of maps to be cooked, separated by '+' characters
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CookTaskParameters.Versioned">
            <summary>
            Additional arguments to be passed to the cooker
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CookTaskParameters.Arguments">
            <summary>
            Additional arguments to be passed to the cooker
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CookTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task
            </summary>
        </member>
        <member name="T:BuildGraph.Tasks.CookTask">
            <summary>
            Cook a selection of maps for a certain platform
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CookTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.CookTask.#ctor(BuildGraph.Tasks.CookTaskParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:BuildGraph.Tasks.CookTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:BuildGraph.Tasks.CookTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.CookTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:BuildGraph.Tasks.CookTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:BuildGraph.Tasks.CopyTaskParameters">
            <summary>
            Parameters for a copy task
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CopyTaskParameters.Files">
            <summary>
            List of file specifications separated by semicolons (eg. *.cpp;Engine/.../*.bat), or the name of a tag set. Relative paths are based at FromDir.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CopyTaskParameters.FromDir">
            <summary>
            The base directory to copy from. 
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CopyTaskParameters.ToDir">
            <summary>
            The directory to copy to
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CopyTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task
            </summary>
        </member>
        <member name="T:BuildGraph.Tasks.CopyTask">
            <summary>
            Copies files from one directory to another.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.CopyTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.CopyTask.#ctor(BuildGraph.Tasks.CopyTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:BuildGraph.Tasks.CopyTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:BuildGraph.Tasks.CopyTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.CopyTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:BuildGraph.Tasks.CopyTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:BuildGraph.Tasks.DeleteTaskParameters">
            <summary>
            Parameters for a copy task
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.DeleteTaskParameters.Files">
            <summary>
            List of file specifications separated by semicolons (eg. *.cpp;Engine/.../*.bat), or the name of a tag set
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.DeleteTaskParameters.DeleteEmptyDirectories">
            <summary>
            Whether to delete empty directories after deleting the files. Defaults to true.
            </summary>
        </member>
        <member name="T:BuildGraph.Tasks.DeleteTask">
            <summary>
            Delete a set of files.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.DeleteTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.DeleteTask.#ctor(BuildGraph.Tasks.DeleteTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:BuildGraph.Tasks.DeleteTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:BuildGraph.Tasks.DeleteTask.TryDeleteEmptyDirectory(UnrealBuildTool.DirectoryReference)">
            <summary>
            Deletes a directory, if it's empty
            </summary>
            <param name="CandidateDirectory">The directory to check</param>
            <returns>True if the directory was deleted, false if not</returns>
        </member>
        <member name="M:BuildGraph.Tasks.DeleteTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.DeleteTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:BuildGraph.Tasks.DeleteTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:BuildGraph.Tasks.SignTaskParameters">
            <summary>
            Parameters for a task that strips symbols from a set of files
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.SignTaskParameters.Files">
            <summary>
            List of file specifications separated by semicolons (eg. *.cpp;Engine/.../*.bat), or the name of a tag set
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.SignTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task
            </summary>
        </member>
        <member name="T:BuildGraph.Tasks.SignTask">
            <summary>
            Signs a set of executable files with an installed certificate.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.SignTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.SignTask.#ctor(BuildGraph.Tasks.SignTaskParameters)">
            <summary>
            Construct a spawn task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:BuildGraph.Tasks.SignTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:BuildGraph.Tasks.SignTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.SignTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:BuildGraph.Tasks.SignTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:BuildGraph.Tasks.StageTaskParameters">
            <summary>
            Parameters for the staging task
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StageTaskParameters.Project">
            <summary>
            The project that this target belongs to
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StageTaskParameters.Target">
            <summary>
            Name of the target to stage
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StageTaskParameters.Platform">
            <summary>
            Platform to stage
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StageTaskParameters.Configuration">
            <summary>
            Configuration to be staged
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StageTaskParameters.Architecture">
            <summary>
            Architecture to be staged
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StageTaskParameters.ToDir">
            <summary>
            Directory the receipt files should be staged to
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StageTaskParameters.Overwrite">
            <summary>
            Whether to overwrite existing files
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StageTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task
            </summary>
        </member>
        <member name="T:BuildGraph.Tasks.StageTask">
            <summary>
            Stages files listed in a build receipt to an output directory.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StageTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.StageTask.#ctor(BuildGraph.Tasks.StageTaskParameters)">
            <summary>
            Constructor.
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:BuildGraph.Tasks.StageTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:BuildGraph.Tasks.StageTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.StageTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:BuildGraph.Tasks.StageTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:BuildGraph.Tasks.StripTaskParameters">
            <summary>
            Parameters for a task that strips symbols from a set of files
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StripTaskParameters.Platform">
            <summary>
            The platform toolchain to strip binaries
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StripTaskParameters.BaseDir">
            <summary>
            The directory to find files in
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StripTaskParameters.Files">
            <summary>
            List of file specifications separated by semicolons (eg. Engine/.../*.pdb), or the name of a tag set
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StripTaskParameters.OutputDir">
            <summary>
            Output directory for the stripped files. Defaults to the input path (overwriting the input files).
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StripTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task
            </summary>
        </member>
        <member name="T:BuildGraph.Tasks.StripTask">
            <summary>
            Strips debugging information from a set of files.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.StripTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.StripTask.#ctor(BuildGraph.Tasks.StripTaskParameters)">
            <summary>
            Construct a spawn task
            </summary>
            <param name="InParameters">Parameters for the task</param>
        </member>
        <member name="M:BuildGraph.Tasks.StripTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:BuildGraph.Tasks.StripTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.StripTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:BuildGraph.Tasks.StripTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.Tasks.SetVersionTaskParameters">
            <summary>
            Parameters for the version task
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.Change">
            <summary>
            The changelist to set in the version files
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.CompatibleChange">
            <summary>
            The engine compatible changelist to set in the version files
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.Branch">
            <summary>
            The branch string
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.Build">
            <summary>
            The build version string
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.Licensee">
            <summary>
            Whether to set the IS_LICENSEE_VERSION flag to true
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.SkipWrite">
            <summary>
            If set, don't actually write to the files - just return the version files that would be updated. Useful for local builds.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTaskParameters.Tag">
            <summary>
            Tag to be applied to build products of this task
            </summary>
        </member>
        <member name="T:AutomationTool.Tasks.SetVersionTask">
            <summary>
            Updates the local version files (Engine/Source/Runtime/Launch/Resources/Version.h, Engine/Build/Build.version, and Engine/Source/Programs/DotNETCommon/Metadata.cs) with the given version information.
            </summary>
        </member>
        <member name="F:AutomationTool.Tasks.SetVersionTask.Parameters">
            <summary>
            Parameters for the task
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SetVersionTask.#ctor(AutomationTool.Tasks.SetVersionTaskParameters)">
            <summary>
            Construct a version task
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:AutomationTool.Tasks.SetVersionTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:AutomationTool.Tasks.SetVersionTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:AutomationTool.Tasks.SetVersionTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:AutomationTool.Tasks.SetVersionTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:BuildGraph.Tasks.UnzipTaskParameters">
            <summary>
            Parameters for a zip task
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.UnzipTaskParameters.ZipFile">
            <summary>
            Path to the zip file to extract
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.UnzipTaskParameters.ToDir">
            <summary>
            Output directory for the extracted files
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.UnzipTaskParameters.Tag">
            <summary>
            Tag to be applied to the extracted files
            </summary>
        </member>
        <member name="T:BuildGraph.Tasks.UnzipTask">
            <summary>
            Extract files from a zip archive.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.UnzipTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.UnzipTask.#ctor(BuildGraph.Tasks.UnzipTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:BuildGraph.Tasks.UnzipTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:BuildGraph.Tasks.UnzipTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.UnzipTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:BuildGraph.Tasks.UnzipTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:BuildGraph.Tasks.ZipTaskParameters">
            <summary>
            Parameters for a zip task
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.ZipTaskParameters.FromDir">
            <summary>
            The directory to read compressed files from
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.ZipTaskParameters.Files">
            <summary>
            List of file specifications separated by semicolons (eg. *.cpp;Engine/.../*.bat), or the name of a tag set. Relative paths are taken from FromDir.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.ZipTaskParameters.ZipFile">
            <summary>
            The zip file to create
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.ZipTaskParameters.Tag">
            <summary>
            Tag to be applied to the created zip file
            </summary>
        </member>
        <member name="T:BuildGraph.Tasks.ZipTask">
            <summary>
            Compresses files into a zip archive.
            </summary>
        </member>
        <member name="F:BuildGraph.Tasks.ZipTask.Parameters">
            <summary>
            Parameters for this task
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.ZipTask.#ctor(BuildGraph.Tasks.ZipTaskParameters)">
            <summary>
            Constructor
            </summary>
            <param name="InParameters">Parameters for this task</param>
        </member>
        <member name="M:BuildGraph.Tasks.ZipTask.Execute(AutomationTool.JobContext,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{UnrealBuildTool.FileReference}})">
            <summary>
            Execute the task.
            </summary>
            <param name="Job">Information about the current job</param>
            <param name="BuildProducts">Set of build products produced by this node.</param>
            <param name="TagNameToFileSet">Mapping from tag names to the set of files they include</param>
            <returns>True if the task succeeded</returns>
        </member>
        <member name="M:BuildGraph.Tasks.ZipTask.Write(System.Xml.XmlWriter)">
            <summary>
            Output this task out to an XML writer.
            </summary>
        </member>
        <member name="M:BuildGraph.Tasks.ZipTask.FindConsumedTagNames">
            <summary>
            Find all the tags which are used as inputs to this task
            </summary>
            <returns>The tag names which are read by this task</returns>
        </member>
        <member name="M:BuildGraph.Tasks.ZipTask.FindProducedTagNames">
            <summary>
            Find all the tags which are modified by this task
            </summary>
            <returns>The tag names which are modified by this task</returns>
        </member>
        <member name="T:AutomationTool.TempStorageBlock">
            <summary>
            Stores the name of a temp storage block
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageBlock.NodeName">
            <summary>
            Name of the node
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageBlock.OutputName">
            <summary>
            Name of the output from this node
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageBlock.#ctor">
            <summary>
            Default constructor, for XML serialization.
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageBlock.#ctor(System.String,System.String)">
            <summary>
            Construct a temp storage block
            </summary>
            <param name="InNodeName">Name of the node</param>
            <param name="InOutputName">Name of the node's output</param>
        </member>
        <member name="M:AutomationTool.TempStorageBlock.Equals(System.Object)">
            <summary>
            Tests whether two temp storage blocks are equal
            </summary>
            <param name="Other">The object to compare against</param>
            <returns>True if the blocks are equivalent</returns>
        </member>
        <member name="M:AutomationTool.TempStorageBlock.GetHashCode">
            <summary>
            Returns a hash code for this block name
            </summary>
            <returns>Hash code for the block</returns>
        </member>
        <member name="M:AutomationTool.TempStorageBlock.ToString">
            <summary>
            Returns the name of this block for debugging purposes
            </summary>
            <returns>Name of this block as a string</returns>
        </member>
        <member name="T:AutomationTool.TempStorageFile">
            <summary>
            Information about a single file in temp storage
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFile.RelativePath">
            <summary>
            The path of the file, relative to the engine root. Stored using forward slashes.
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFile.LastWriteTimeUtcTicks">
            <summary>
            The last modified time of the file, in UTC ticks since the Epoch.
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFile.Length">
            <summary>
            Length of the file
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageFile.#ctor">
            <summary>
            Default constructor, for XML serialization.
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageFile.#ctor(System.IO.FileInfo,UnrealBuildTool.DirectoryReference)">
            <summary>
            Constructor
            </summary>
            <param name="FileInfo">File to be added</param>
            <param name="RootDir">Root directory to store paths relative to</param>
        </member>
        <member name="M:AutomationTool.TempStorageFile.Compare(UnrealBuildTool.DirectoryReference)">
            <summary>
            Compare stored for this file with the one on disk, and output an error if they differ.
            </summary>
            <param name="RootDir">Root directory for this branch</param>
            <returns>True if the files are identical, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.TempStorageFile.RequireMatchingTimestamps">
            <summary>
            Whether we should compare timestamps for this file. Some build products are harmlessly overwritten as part of the build process, so we flag those here.
            </summary>
            <returns>True if we should compare the file's timestamp, false otherwise</returns>
        </member>
        <member name="M:AutomationTool.TempStorageFile.ToFileReference(UnrealBuildTool.DirectoryReference)">
            <summary>
            Gets a local file reference for this file, given a root directory to base it from.
            </summary>
            <param name="RootDir">The local root directory</param>
            <returns>Reference to the file</returns>
        </member>
        <member name="T:AutomationTool.TempStorageZipFile">
            <summary>
            Information about a single file in temp storage
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageZipFile.Name">
            <summary>
            Name of this file, including extension
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageZipFile.Length">
            <summary>
            Length of the file in bytes
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageZipFile.#ctor">
            <summary>
            Default constructor, for XML serialization
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageZipFile.#ctor(System.IO.FileInfo)">
            <summary>
            Constructor
            </summary>
            <param name="Info">FileInfo for the zip file</param>
        </member>
        <member name="T:AutomationTool.TempStorageManifest">
            <summary>
            A manifest storing information about build products for a node's output
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageManifest.Files">
            <summary>
            List of output files
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageManifest.ZipFiles">
            <summary>
            List of compressed archives containing the given files
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageManifest.Serializer">
            <summary>
            Construct a static Xml serializer to avoid throwing an exception searching for the reflection info at runtime
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageManifest.#ctor">
            <summary>
            Construct an empty temp storage manifest
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageManifest.#ctor(System.IO.FileInfo[],UnrealBuildTool.DirectoryReference)">
            <summary>
            Creates a manifest from a flat list of files (in many folders) and a BaseFolder from which they are rooted.
            </summary>
            <param name="InFiles">List of full file paths</param>
            <param name="RootDir">Root folder for all the files. All files must be relative to this RootDir.</param>
        </member>
        <member name="M:AutomationTool.TempStorageManifest.GetTotalSize">
            <summary>
            Gets the total size of the files stored in this manifest
            </summary>
            <returns>The total size of all files</returns>
        </member>
        <member name="M:AutomationTool.TempStorageManifest.Load(UnrealBuildTool.FileReference)">
            <summary>
            Load a manifest from disk
            </summary>
            <param name="File">File to load</param>
        </member>
        <member name="M:AutomationTool.TempStorageManifest.Save(UnrealBuildTool.FileReference)">
            <summary>
            Saves a manifest to disk
            </summary>
            <param name="File">File to save</param>
        </member>
        <member name="T:AutomationTool.TempStorageFileList">
            <summary>
            Stores the contents of a tagged file set
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFileList.LocalFiles">
            <summary>
            List of files that are in this tag set, relative to the root directory
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFileList.ExternalFiles">
            <summary>
            List of files that are in this tag set, but not relative to the root directory
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFileList.Blocks">
            <summary>
            List of referenced storage blocks
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorageFileList.Serializer">
            <summary>
            Construct a static Xml serializer to avoid throwing an exception searching for the reflection info at runtime
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageFileList.#ctor">
            <summary>
            Construct an empty file list for deserialization
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageFileList.#ctor(System.Collections.Generic.IEnumerable{UnrealBuildTool.FileReference},UnrealBuildTool.DirectoryReference,System.Collections.Generic.IEnumerable{AutomationTool.TempStorageBlock})">
            <summary>
            Creates a manifest from a flat list of files (in many folders) and a BaseFolder from which they are rooted.
            </summary>
            <param name="InFiles">List of full file paths</param>
            <param name="RootDir">Root folder for all the files. All files must be relative to this RootDir.</param>
            <param name="InBlocks">Referenced storage blocks required for these files</param>
        </member>
        <member name="M:AutomationTool.TempStorageFileList.Load(UnrealBuildTool.FileReference)">
            <summary>
            Load this list of files from disk
            </summary>
            <param name="File">File to load</param>
        </member>
        <member name="M:AutomationTool.TempStorageFileList.Save(UnrealBuildTool.FileReference)">
            <summary>
            Saves this list of files to disk
            </summary>
            <param name="File">File to save</param>
        </member>
        <member name="M:AutomationTool.TempStorageFileList.ToFileSet(UnrealBuildTool.DirectoryReference)">
            <summary>
            Converts this file list into a set of FileReference objects
            </summary>
            <param name="RootDir">The root directory to rebase local files</param>
            <returns>Set of files</returns>
        </member>
        <member name="T:AutomationTool.TempStorage">
            <summary>
            Tracks the state of the current build job using the filesystem, allowing jobs to be restarted after a failure or expanded to include larger targets, and 
            providing a proxy for different machines executing parts of the build in parallel to transfer build products and share state as part of a build system.
            
            If a shared temp storage directory is provided - typically a mounted path on a network share - all build products potentially needed as inputs by another node
            are compressed and copied over, along with metadata for them (see TempStorageFile) and flags for build events that have occurred (see TempStorageEvent).
            
            The local temp storage directory contains the same information, with the exception of the archived build products. Metadata is still kept to detect modified 
            build products between runs. If data is not present in local temp storage, it's retrieved from shared temp storage and cached in local storage.
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorage.RootDir">
            <summary>
            Root directory for this branch.
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorage.LocalDir">
            <summary>
            The local temp storage directory (typically somewhere under /Engine/Saved directory).
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorage.SharedDir">
            <summary>
            The shared temp storage directory; typically a network location. May be null.
            </summary>
        </member>
        <member name="F:AutomationTool.TempStorage.bWriteToSharedStorage">
            <summary>
            Whether to allow writes to shared storage
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorage.#ctor(UnrealBuildTool.DirectoryReference,UnrealBuildTool.DirectoryReference,UnrealBuildTool.DirectoryReference,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="InRootDir">Root directory for this branch</param>
            <param name="InLocalDir">The local temp storage directory.</param>
            <param name="InSharedDir">The shared temp storage directory. May be null.</param>
            <param name="bInWriteToSharedStorage">Whether to write to shared storage, or only permit reads from it</param>
        </member>
        <member name="M:AutomationTool.TempStorage.CleanLocal">
            <summary>
            Cleans all cached local state. We never remove shared storage.
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorage.CleanLocalNode(System.String)">
            <summary>
            Cleans local build products for a given node. Does not modify shared storage.
            </summary>
            <param name="NodeName">Name of the node</param>
        </member>
        <member name="M:AutomationTool.TempStorage.IsComplete(System.String)">
            <summary>
            Check whether the given node is complete
            </summary>
            <param name="NodeName">Name of the node</param>
            <returns>True if the node is complete</returns>
        </member>
        <member name="M:AutomationTool.TempStorage.MarkAsComplete(System.String)">
            <summary>
            Mark the given node as complete
            </summary>
            <param name="NodeName">Name of the node</param>
        </member>
        <member name="M:AutomationTool.TempStorage.CheckLocalIntegrity(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks the integrity of the give node's local build products.
            </summary>
            <param name="NodeName">The node to retrieve build products for</param>
            <param name="TagNames">List of tag names from this node.</param>
            <returns>True if the node is complete and valid, false if not (and typically followed by a call to CleanNode()).</returns>
        </member>
        <member name="M:AutomationTool.TempStorage.ReadFileList(System.String,System.String)">
            <summary>
            Reads a set of tagged files from disk
            </summary>
            <param name="NodeName">Name of the node which produced the tag set</param>
            <param name="TagName">Name of the tag, with a '#' prefix</param>
            <returns>The set of files</returns>
        </member>
        <member name="M:AutomationTool.TempStorage.WriteFileList(System.String,System.String,System.Collections.Generic.IEnumerable{UnrealBuildTool.FileReference},System.Collections.Generic.IEnumerable{AutomationTool.TempStorageBlock})">
            <summary>
            Writes a list of tagged files to disk
            </summary>
            <param name="NodeName">Name of the node which produced the tag set</param>
            <param name="TagName">Name of the tag, with a '#' prefix</param>
            <param name="Files">List of files in this set</param>
            <param name="Blocks">List of referenced storage blocks</param>
            <returns>The set of files</returns>
        </member>
        <member name="M:AutomationTool.TempStorage.Archive(System.String,System.String,UnrealBuildTool.FileReference[],System.Boolean)">
            <summary>
            Saves the given files (that should be rooted at the branch root) to a shared temp storage manifest with the given temp storage node and game.
            </summary>
            <param name="NodeName">The node which created the storage block</param>
            <param name="BlockName">Name of the block to retrieve. May be null or empty.</param>
            <param name="BuildProducts">Array of build products to be archived</param>
            <param name="bPushToRemote">Allow skipping the copying of this manifest to shared storage, because it's not required by any other agent</param>
            <returns>The created manifest instance (which has already been saved to disk).</returns>
        </member>
        <member name="M:AutomationTool.TempStorage.Retreive(System.String,System.String)">
            <summary>
            Retrieve an output of the given node. Fetches and decompresses the files from shared storage if necessary, or validates the local files.
            </summary>
            <param name="NodeName">The node which created the storage block</param>
            <param name="OutputName">Name of the block to retrieve. May be null or empty.</param>
            <returns>Manifest of the files retrieved</returns>
        </member>
        <member name="M:AutomationTool.TempStorage.ParallelZipFiles(System.IO.FileInfo[],UnrealBuildTool.DirectoryReference,UnrealBuildTool.DirectoryReference,UnrealBuildTool.DirectoryReference,System.String)">
            <summary>
            Zips a set of files (that must be rooted at the given RootDir) to a set of zip files in the given OutputDir. The files will be prefixed with the given basename.
            </summary>
            <param name="InputFiles">Fully qualified list of files to zip (must be rooted at RootDir).</param>
            <param name="RootDir">Root Directory where all files will be extracted.</param>
            <param name="OutputDir">Location to place the set of zip files created.</param>
            <param name="StagingDir">Location to create zip files before copying them to the OutputDir. If the OutputDir is on a remote file share, staging may be more efficient. Use null to avoid using a staging copy.</param>
            <param name="ZipBaseName">The basename of the set of zip files.</param>
            <returns>Some metrics about the zip process.</returns>
            <remarks>
            This function tries to zip the files in parallel as fast as it can. It makes no guarantees about how many zip files will be created or which files will be in which zip,
            but it does try to reasonably balance the file sizes.
            </remarks>
        </member>
        <member name="M:AutomationTool.TempStorage.ParallelUnzipFiles(System.IO.FileInfo[],UnrealBuildTool.DirectoryReference)">
            <summary>
            Unzips a set of zip files with a given basename in a given folder to a given RootDir.
            </summary>
            <param name="ZipFiles">Files to extract</param>
            <param name="RootDir">Root Directory where all files will be extracted.</param>
            <returns>Some metrics about the unzip process.</returns>
            <remarks>
            The code is expected to be the used as the symmetrical inverse of <see cref="M:AutomationTool.TempStorage.ParallelZipFiles(System.IO.FileInfo[],UnrealBuildTool.DirectoryReference,UnrealBuildTool.DirectoryReference,UnrealBuildTool.DirectoryReference,System.String)"/>, but could be used independently, as long as the files in the zip do not overlap.
            </remarks>
        </member>
        <member name="M:AutomationTool.TempStorage.GetDirectoryForNode(UnrealBuildTool.DirectoryReference,System.String)">
            <summary>
            Gets the directory used to store data for the given node
            </summary>
            <param name="BaseDir">A local or shared temp storage root directory.</param>
            <param name="NodeName">Name of the node</param>
            <returns>Directory to contain a node's data</returns>
        </member>
        <member name="M:AutomationTool.TempStorage.GetManifestLocation(UnrealBuildTool.DirectoryReference,System.String,System.String)">
            <summary>
            Gets the path to the manifest created for a node's output.
            </summary>
            <param name="BaseDir">A local or shared temp storage root directory.</param>
            <param name="NodeName">Name of the node to get the file for</param>
            <param name="BlockName">Name of the output block to get the manifest for</param>
        </member>
        <member name="M:AutomationTool.TempStorage.GetTaggedFileListLocation(UnrealBuildTool.DirectoryReference,System.String,System.String)">
            <summary>
            Gets the path to the file created to store a tag manifest for a node
            </summary>
            <param name="BaseDir">A local or shared temp storage root directory.</param>
            <param name="NodeName">Name of the node to get the file for</param>
            <param name="TagName">Name of the tag to get the manifest for</param>
        </member>
        <member name="M:AutomationTool.TempStorage.GetCompleteMarkerFile(UnrealBuildTool.DirectoryReference,System.String)">
            <summary>
            Gets the path to a file created to indicate that a node is complete, under the given base directory.
            </summary>
            <param name="BaseDir">A local or shared temp storage root directory.</param>
            <param name="NodeName">Name of the node to get the file for</param>
        </member>
        <member name="T:AutomationTool.TempStorageTests">
            <summary>
            Automated tests for temp storage
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageTests.ExecuteBuild">
            <summary>
            Run the automated tests
            </summary>
        </member>
        <member name="M:AutomationTool.TempStorageTests.SelectFiles(UnrealBuildTool.DirectoryReference,System.Char,System.Char)">
            <summary>
            Enumerate all the files beginning with a letter within a certain range
            </summary>
            <param name="SourceDir">The directory to read from</param>
            <param name="CharRangeBegin">First character in the range to files to return</param>
            <param name="CharRangeEnd">Last character (inclusive) in the range of files to return</param>
            <returns>Mapping from filename to timestamp</returns>
        </member>
        <member name="M:AutomationTool.TempStorageTests.CheckManifest(UnrealBuildTool.DirectoryReference,AutomationTool.TempStorageManifest,System.Collections.Generic.Dictionary{UnrealBuildTool.FileReference,System.DateTime})">
            <summary>
            Checks that a manifest matches the files on disk
            </summary>
            <param name="RootDir">Root directory for relative paths in the manifest</param>
            <param name="Manifest">Manifest to check</param>
            <param name="Files">Mapping of filename to timestamp as expected in the manifest</param>
        </member>
        <member name="T:AutomationTool.CleanTempStorage">
            <summary>
            Commandlet to clean up all folders under a temp storage root that are older than a given number of days
            </summary>
        </member>
        <member name="M:AutomationTool.CleanTempStorage.ExecuteBuild">
            <summary>
            Entry point for the commandlet
            </summary>
        </member>
    </members>
</doc>
