#line 2 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.inl"

#line 4 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.inl"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE _mesa_hlsl_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via _mesa_hlsl_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void _mesa_hlsl_restart (FILE *input_file ,yyscan_t yyscanner );
void _mesa_hlsl__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_hlsl__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void _mesa_hlsl__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_hlsl__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_hlsl_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void _mesa_hlsl_pop_buffer_state (yyscan_t yyscanner );

static void _mesa_hlsl_ensure_buffer_stack (yyscan_t yyscanner );
static void _mesa_hlsl__load_buffer_state (yyscan_t yyscanner );
static void _mesa_hlsl__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER _mesa_hlsl__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE _mesa_hlsl__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_hlsl__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_hlsl__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *_mesa_hlsl_alloc (yy_size_t ,yyscan_t yyscanner );
void *_mesa_hlsl_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void _mesa_hlsl_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer _mesa_hlsl__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        _mesa_hlsl_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_hlsl__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        _mesa_hlsl_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_hlsl__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define _mesa_hlsl_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 226
#define YY_END_OF_BUFFER 227
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[930] =
    {   0,
        0,    0,   14,   14,    0,    0,  227,  225,    1,   19,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  126,
      124,  225,  225,  225,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  225,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  225,    1,  225,  226,   14,   18,  226,
       17,   15,   16,   12,   11,    1,  109,    0,  127,  117,
      110,  120,  114,  104,  116,  105,  123,  129,  115,  130,
      126,    0,    0,  132,  126,    0,  124,  124,  112,  106,
      108,  107,  113,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  121,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,   29,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,   33,  224,  224,
       67,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  122,  111,    1,    0,
        0,    2,    0,    0,   14,   13,   17,   16,    0,  129,
      128,    0,  130,    0,  131,  125,  118,  119,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      135,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
       32,  224,  224,  224,  224,  224,  224,  224,  224,   25,
      224,  224,  224,  224,  224,  224,   68,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,    0,    0,   13,    0,  129,    0,  128,
        0,  130,  131,  125,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,   21,  224,  193,
      190,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,   31,  138,  224,  224,  224,  224,  224,  224,  143,

      224,   24,  224,  224,  224,  224,   39,   40,   41,  224,
      224,   58,  154,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  141,
      224,  133,  224,  224,   26,  224,  224,  224,  224,  224,
      103,  224,  224,    0,    0,    0,  128,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
       36,   37,   38,   27,  224,  224,  136,  224,  224,   20,
      224,  224,  224,  224,  224,  134,  224,  157,   22,  224,
      224,  159,  160,  161,  224,  224,  224,   69,  224,  224,
      224,  224,  224,  224,  224,  224,  224,   57,  224,  224,

      224,  224,  155,  224,  224,  224,  224,  224,  224,  224,
      224,   42,   43,   44,  224,  137,  224,  192,  224,  224,
       30,    0,    0,   81,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  196,  224,  224,  224,  194,
      224,  224,  224,  156,  151,  198,  174,  175,  176,   23,
       45,   46,   47,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  146,  224,  224,  224,   75,  224,
      224,  224,  224,  142,  224,  149,   35,  224,  224,  189,
      150,  101,  144,  224,  224,  224,  224,  224,  224,  224,
      224,    0,    0,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  224,  102,  224,  224,  224,  145,   34,
      171,  172,  173,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  162,  163,  164,  165,  166,  167,  168,  169,
      170,  224,  224,  224,  224,  224,  199,  200,  201,  224,
      224,  224,  224,   60,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  139,  224,  224,  224,  224,  224,   70,
      224,   71,  224,    0,    0,    0,  224,  224,  224,  224,
       93,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,   72,  224,   28,  152,  177,  178,  179,  180,  181,
      182,  183,  184,  185,   48,   49,   50,   51,   52,   53,

       54,   55,   56,  224,  224,  203,  204,  205,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  147,
      224,  224,  224,  224,  224,  224,  224,  140,   59,  207,
      208,  209,  224,  224,  158,  148,    0,    4,    0,    0,
        0,   10,  224,  224,  224,  224,  224,  224,  224,  224,
      224,   82,   84,   88,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  202,  153,
       73,  191,  224,  224,  195,   79,  224,  224,  224,  224,
      224,  224,  224,  224,    0,    0,    0,    0,    0,   65,
       63,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  206,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  210,    0,    0,    0,
        0,    0,   66,   62,  224,  224,   96,   98,  100,  224,
      224,  224,  224,   86,   89,  224,  224,  224,   78,  224,
      224,  224,  224,  224,  224,  224,  221,  224,  224,  224,
      224,  224,   61,  224,  224,  224,    0,    3,    0,    0,
        0,  224,  224,  224,  224,  224,   91,  224,  224,  224,
      224,  224,   80,  224,  224,  224,  222,  211,  224,  212,
      224,  224,  224,  224,  224,  224,  224,  224,  223,    0,

        0,    0,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  213,  214,  224,  217,  224,  218,  224,
       76,  186,  187,  197,  215,  216,    0,    0,    0,  224,
      224,  224,  224,  224,   83,   85,  224,  224,   64,  224,
      224,  224,  224,  224,    0,    0,    0,    0,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,   74,  224,
        0,    0,    0,    0,  224,  224,   97,   99,  224,   87,
       90,   77,  224,  224,  224,    0,    0,    0,    0,  224,
      224,  224,  224,  224,  224,    0,    0,    0,    5,    0,
        0,  224,   94,  224,  219,  220,  224,    0,    0,    6,

        0,    0,   95,  224,  188,    0,    0,    0,  224,    0,
        0,    0,    7,  224,    0,    0,    8,   92,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    9,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,    1,   10,
       11,   12,   13,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   22,   22,   23,   23,   24,    1,   25,
       26,   27,    1,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   35,   35,   37,   38,   35,   39,   40,
       35,   41,   42,   43,   44,   35,   45,   46,   35,   35,
        1,    1,    1,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   35,   65,   66,   67,   68,   69,   70,   71,
       72,   73,    1,   74,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    4,    3,    3,
        3,    3,    3,    3,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1
    } ;

static yyconst flex_int16_t yy_base[939] =
    {   0,
        0,   73,   80,  154, 1274, 1273, 1275, 1278,   74, 1278,
     1248, 1267, 1246,   99, 1245,   96,   97,   95, 1244,  214,
      271,   94, 1243,  102,    0, 1200, 1205, 1209, 1197, 1201,
     1218, 1213,   68, 1235,   73,   14,   81,   79,   75,  133,
       80, 1211,  130,   90,   89, 1191,  134,  132,  149,  155,
      137,  137, 1202,  178,  205,  211, 1278,  146, 1278, 1241,
      221, 1278,    0, 1278, 1278,  147, 1278, 1250, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1278, 1278,  278, 1278,  323,
      177,  363,  299, 1278, 1278,    0,    0, 1278, 1229, 1278,
     1278, 1278, 1228,    0, 1199, 1188, 1189, 1183, 1192,  220,

     1187, 1176, 1189, 1278, 1178, 1183, 1180, 1189, 1175, 1172,
     1177, 1189,  164, 1183, 1170, 1167, 1168, 1165, 1165, 1171,
      150, 1167, 1164, 1165, 1160, 1163, 1165,    0, 1163, 1174,
      190, 1160, 1159, 1159,  158, 1152,  200, 1161, 1167, 1149,
     1145, 1153, 1150, 1139,   61, 1154, 1149, 1152,  188, 1144,
      127,  198, 1150, 1141,  209, 1148, 1278, 1278,  270,  303,
      305, 1278, 1147, 1138,  274,    0,  330,    0,  380, 1278,
      387,  408, 1278,  415,  425,  186, 1278, 1278, 1148, 1133,
     1147, 1135, 1136,  211, 1130, 1143, 1131, 1127, 1144, 1135,
        0, 1131, 1141,  217, 1135, 1121, 1121, 1118, 1124,  151,

     1135, 1132, 1132, 1128, 1119, 1126, 1112, 1110, 1123, 1126,
        0, 1124, 1110, 1104, 1117, 1121, 1114, 1111, 1099,  307,
     1117, 1112, 1109, 1110, 1100, 1108,    0, 1101, 1092, 1096,
     1097, 1088, 1107, 1090, 1088, 1099, 1084, 1082, 1082, 1084,
     1081, 1097, 1092, 1091, 1094, 1075,  260, 1084, 1078, 1067,
     1086, 1088, 1076, 1073, 1085,    0,  432,  442,  463, 1278,
      449,  470, 1278, 1278, 1080, 1065, 1089, 1062, 1062, 1074,
     1060, 1061, 1054, 1064, 1055, 1060, 1052,  314, 1061,    0,
        0, 1065, 1053, 1051, 1055, 1052, 1047, 1056, 1044, 1062,
     1050,    0,    0, 1044, 1055, 1054, 1054, 1038, 1055,    0,

     1039,  317, 1047, 1048, 1038, 1032,    0,    0,    0, 1033,
     1032, 1047,    0, 1029,  213, 1029, 1040, 1035, 1024, 1033,
     1024, 1027, 1027, 1019, 1022, 1027, 1032, 1031, 1021,    0,
     1018,    0, 1027, 1023,  338, 1014, 1014, 1020, 1019, 1016,
        0, 1005, 1018, 1017, 1014,  487,  494, 1003, 1027,  999,
      998, 1022, 1009, 1009,  993,  993, 1006,  993, 1002, 1003,
        0,    0,    0,    0, 1002,  991,    0,  991,  990,    0,
      989,  990,  984,  995,  985,    0,  981,  351,  369,  985,
      978,  972,  971,  970,  987,  394,  986,    0,  984,  980,
      309,  972,  978,  981,  967,  980,  964,    0,  979,  967,

      979,  974,    0,  972,  974,  957,  967,  973,  966,  967,
      966,    0,    0,    0,  953,    0,  955,    0,  954,  958,
        0, 1012,  952,    0,  963,  946,  970,  942,  955,  979,
      955,  937,  939,  950,  942,    0,  936,  943,  951,    0,
      930,  930,  944,  478,  946,    0,  923,  922,  921,    0,
      920,  919,  918,  928,  931,  481,  499,  502,  510,  955,
      954,  953,  915,  914,    0,  932,  931,  921,    0,  929,
      915,  911,  911,    0,  917,    0,    0,  915,  907,    0,
        0,    0,    0,  904,  910,  915,  513,  907,  914,  911,
      905,  532,  915,  896,  909,  912,  895,  894,  906,  890,

      891,  324,  517,  902,    0,  902,  892,  899,    0,    0,
        0,    0,    0,  891,  525,  537,  540,  543,  546,  549,
      878,  900,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  917,  916,  915,  877,  876,  543,  544,    0,  889,
      892,  890,  878,    0,  888,  885,  873,  883,  872,  871,
      554,  880,  879,    0,  900,  899,  898,  860,  859,    0,
      874,    0,  872,  573,  579,  922,  872,  873,  854,  867,
        0,  867,  850,  864,  853,  848,  883,  882,  881,  843,
      868,    0,  860,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  857,  842,  878,  877,    0,  850,  853,
      837,  845,  835,  843,  844,  844,  843,  828,  841,    0,
      830,  841,  829,  825,  858,  857,  819,    0,  837,  857,
      856,    0,  829,  832,    0,    0,  601, 1278,  603,    0,
      609,  606,  825,  819,  828,  829,  812,  811,  559,  814,
      825,  845,  605,    0,  822,  804,  812,  806,  815,  802,
      801,  811,  811,  798,  813,  796,  811,  806,    0,    0,
        0,    0,  798,  790,    0,    0,  815,  814,  800,  801,
      787,  786,  796,  796,  842,  327,  804,  793,  781,    0,
        0,  788,  782,  789,  788,  809,  808,  807,  773,  769,

      770,  769,  791,  779,  766,  767,  773,  776,  762,  761,
      772,    0,  775,  771,  773,  769,  755,  770,  761,  764,
      763,  761,  756,  748,  745,  753,    0,  792,  607,  756,
      736,  718,    0,    0,  718,  730,  753,  752,    0,  730,
      724,  711,  710,  746,  745,  719,  706,  717,    0,  720,
      718,  701,  693,  701,  691,  699,    0,  694,  691,  708,
      706,  702,    0,  705,  704,  687,  612, 1278,  227,  213,
      230,  236,  280,  297,  299,  303,    0,  324,  326,  314,
      326,  343,    0,  346,  343,  346,    0,  397,  386,  415,
      403,  417,  425,  427,  428,  460,  454,  466,    0,  504,

      525,  523,  558,  520,  524,  551,  560,  562,  563,  571,
      572,  577,  586,    0,    0,  584,    0,  585,    0,  579,
        0,  603,    0,    0,    0,    0,  644,  645,  592,  582,
      597,  603,  604,  588,    0,    0,  607,  608,    0,  597,
      611,  612,  600,  607,  662,  663,  664,  594,  614,  616,
      599,  600,  611,  603,  604,  610,  626,  627,    0,  631,
      619,  680,  629,  631,  631,  633,    0,    0,  625,    0,
        0,    0,  625,  626,  638,  623,  639,  692,  694,  642,
      632,  656,  629,  630,  638,  653,  703,  704, 1278,  706,
      705,  644,    0,  643,    0,    0,  641,  647,  711, 1278,

      715,  664,    0,  671,    0,  664,  669,  722,  658,  679,
      727,  728, 1278,  678,  670,  733, 1278,    0,  667,  735,
      738,  734,  739,  682,  686,  745,  747, 1278, 1278,  788,
      792,  796,  798,  800,  747,  804,  748,  808
    } ;

static yyconst flex_int16_t yy_def[939] =
    {   0,
      929,    1,  930,  930,  931,  931,  929,  929,  929,  929,
      929,  932,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  929,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  934,  929,  929,  929,  929,  932,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
       20,  929,  929,  929,  929,  935,   21,  929,  929,  929,
      929,  929,  929,  933,  933,  933,  933,  933,  933,  933,

      933,  933,  933,  929,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  936,  929,  934,  929,  929,
      929,  929,  929,  929,  929,  935,  929,  929,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,

      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  929,  929,  936,  929,  929,  929,  929,
      929,  929,  929,  929,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,

      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  929,  929,  929,  929,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,

      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  929,  929,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  929,  929,  933,  933,  933,  933,  933,  933,  933,

      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  929,  929,  929,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,

      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  929,  929,  929,  937,
      929,  929,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  938,  937,  929,  929,  929,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,

      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  938,  938,  929,
      929,  929,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  938,  929,  929,  929,
      929,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  929,

      929,  929,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  929,  929,  929,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  929,  929,  929,  929,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      929,  929,  929,  929,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  929,  929,  929,  929,  933,
      933,  933,  933,  933,  933,  929,  929,  929,  929,  929,
      929,  933,  933,  933,  933,  933,  933,  929,  929,  929,

      929,  929,  933,  933,  933,  929,  929,  929,  933,  929,
      929,  929,  929,  933,  929,  929,  929,  933,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,    0,  929,
      929,  929,  929,  929,  929,  929,  929,  929
    } ;

static yyconst flex_int16_t yy_nxt[1353] =
    {   0,
        8,    9,   10,    9,   11,   12,    8,   13,   14,    8,
        8,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,    8,   22,   23,   24,   25,   26,   25,
       25,   25,   25,   25,   25,   27,   28,   25,   29,   30,
       31,   32,   33,   25,   25,   25,   34,   25,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   25,   25,   44,
       25,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       25,   25,   25,   54,   55,   66,  107,   66,  108,   56,
       57,   58,   59,   58,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   60,   57,   61,   61,   61,

       61,   61,   61,   62,   57,   57,   57,   71,   74,  237,
       76,   78,   78,   78,   78,   78,   78,   78,   89,   90,
      102,   75,   77,  105,   72,  238,   57,   92,   93,  109,
      110,  114,  103,  111,  117,  115,  118,  134,  106,  124,
      112,  116,  125,  113,  126,  119,  132,  165,   66,  165,
       66,  135,  133,   57,   57,   58,   59,   58,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   60,
       57,   61,   61,   61,   61,   61,   61,   62,   57,   57,
       57,  120,  137,  128,  140,  154,  129,  245,  246,  121,
      130,  131,  122,  151,  141,  123,  138,  142,  152,  155,

       57,  139,  153,  157,  143,  144,  159,  147,   66,  208,
      148,  160,  161,  162,  225,  145,  287,  288,  146,  149,
      209,  226,  929,  198,  199,  200,  150,   57,   80,  264,
       81,   81,   81,   81,   81,   81,   82,  167,  167,  167,
      167,  167,  167,  167,  242,   83,   84,  929,  184,  218,
      228,  158,  219,  264,  247,  243,  220,   85,  221,   86,
      800,  185,  186,  248,  229,  251,   83,   84,  252,  280,
      163,  159,  393,   66,  164,  165,  160,  165,  270,  394,
      801,   85,  271,  281,   86,   80,  802,   87,   87,   87,
       87,   87,   87,   87,   78,   78,   78,   78,   78,   78,

       78,  803,   83,   84,  161,  162,  161,  162,  804,  169,
      170,  174,  174,  336,   88,  175,  175,  175,  175,  175,
      175,  175,  337,   83,   84,  307,  308,  309,  637,  638,
      169,  170,  361,  362,  363,  382,  383,  384,   88,  171,
      171,  171,  171,  171,  171,  171,  167,  167,  167,  167,
      167,  167,  167,  575,  172,  173,  412,  413,  414,  310,
      468,  805,  163,  806,  163,  576,  164,  807,  164,  447,
      448,  449,  808,  469,  809,  172,  173,   80,  810,   82,
       82,   82,   82,   82,   82,   82,  450,  451,  452,  453,
      811,  812,  257,  257,   83,   84,  258,  258,  258,  258,

      258,  258,  258,  171,  171,  171,  171,  171,  171,  171,
      813,  460,  461,  462,  814,   83,   84,  815,  259,  260,
      261,  261,  463,  464,  262,  262,  262,  262,  262,  262,
      262,  175,  175,  175,  175,  175,  175,  175,  816,  259,
      260,  175,  175,  175,  175,  175,  175,  175,  258,  258,
      258,  258,  258,  258,  258,  817,  818,  263,  258,  258,
      258,  258,  258,  258,  258,  262,  262,  262,  262,  262,
      262,  262,  819,  820,  170,  346,  346,  821,  263,  347,
      347,  347,  347,  347,  347,  347,  262,  262,  262,  262,
      262,  262,  262,  822,  823,  170,  511,  512,  513,  523,

      524,  525,  173,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  526,  527,  528,
      529,  530,  531,  173,  824,  825,  260,  532,  533,  534,
      555,  556,  557,  492,  577,  578,  579,  826,  535,  536,
      827,  558,  559,  586,  587,  588,  580,  260,  564,  565,
      565,  565,  565,  565,  565,  589,  590,  591,  592,  593,
      594,  595,  596,  597,  598,  599,  600,  601,  602,  603,
      611,  613,  625,  626,  637,  638,  696,  697,  698,  828,
      637,  638,  627,  829,  612,  614,  830,  831,  832,  639,
      639,  639,  639,  639,  639,  641,  641,  641,  641,  641,

      641,  641,  637,  638,  637,  638,  685,  642,  767,  768,
      637,  638,  729,  767,  768,  833,  834,  729,  640,  639,
      639,  639,  639,  639,  639,  641,  641,  641,  641,  641,
      641,  641,  702,  835,  836,  837,  838,  839,  840,  841,
      842,  843,  703,  640,  844,  845,  846,  687,  848,  849,
      850,  851,  852,  853,  847,  854,  855,  688,  856,  857,
      858,  859,  860,  845,  846,  862,  864,  865,  689,  866,
      867,  868,  847,  869,  870,  871,  872,  873,  874,  875,
      876,  862,  877,  879,  880,  881,  882,  883,  884,  885,
      878,  886,  887,  888,  892,  890,  893,  894,  895,  896,

      897,  898,  889,  891,  899,  888,  901,  890,  903,  904,
      905,  906,  899,  900,  889,  891,  901,  907,  861,  909,
      910,  900,  911,  912,  914,  908,  863,  915,  916,  912,
      918,  919,  913,  920,  916,  923,  921,  917,  913,  921,
      923,  925,  863,  917,  922,  926,  927,  922,  927,  176,
      686,  799,  798,  797,  796,  928,  795,  928,  794,  793,
      792,  791,  790,  789,  788,  787,  786,  902,  785,  784,
      783,  782,  781,  780,  779,  778,  777,  902,  776,  775,
      774,  773,  924,  772,  771,  770,  769,  924,   63,   63,
       63,   63,   64,   64,   64,   64,   68,  729,   68,   68,

       94,   94,  168,  168,  256,  766,  256,  256,  728,  765,
      728,  728,  764,  763,  762,  761,  760,  759,  758,  757,
      756,  755,  754,  753,  752,  751,  750,  749,  748,  747,
      746,  745,  744,  743,  742,  741,  740,  739,  738,  737,
      736,  735,  734,  733,  732,  731,  730,  729,  727,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  716,
      715,  714,  713,  712,  711,  710,  709,  708,  707,  706,
      705,  704,  701,  700,  699,  695,  694,  693,  692,  691,
      690,  684,  683,  682,  681,  680,  679,  678,  677,  676,
      675,  674,  673,  672,  671,  670,  669,  668,  667,  666,

      665,  664,  663,  662,  661,  660,  659,  658,  657,  656,
      655,  654,  653,  652,  651,  650,  649,  648,  647,  646,
      645,  644,  643,  642,  636,  635,  634,  633,  632,  631,
      630,  629,  628,  624,  623,  622,  621,  620,  619,  618,
      617,  616,  615,  610,  609,  608,  607,  606,  605,  604,
      585,  584,  583,  582,  581,  574,  573,  572,  571,  570,
      569,  568,  567,  566,  563,  562,  561,  560,  554,  553,
      552,  551,  550,  549,  548,  547,  546,  545,  544,  543,
      542,  541,  540,  539,  538,  537,  522,  521,  520,  519,
      518,  517,  516,  515,  514,  510,  509,  508,  507,  506,

      505,  504,  503,  502,  501,  500,  499,  498,  497,  496,
      495,  494,  493,  492,  491,  490,  489,  488,  487,  486,
      485,  484,  483,  482,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  467,  466,  465,  459,
      458,  457,  456,  455,  454,  446,  445,  444,  443,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  418,  417,  416,  415,  411,  410,  409,
      408,  407,  406,  405,  404,  403,  402,  401,  400,  399,
      398,  397,  396,  395,  392,  391,  390,  389,  388,  387,

      386,  385,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,
      360,  359,  358,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  345,  344,  343,  342,  341,  340,  339,
      338,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      316,  315,  314,  313,  312,  311,  306,  305,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  286,  285,  284,  283,  282,  279,
      278,  277,  276,  275,  274,  273,  272,  269,  268,  267,

      266,  265,  255,  254,  253,  250,  249,  244,  241,  240,
      239,  236,  235,  234,  233,  232,  231,  230,  227,  224,
      223,  222,  217,  216,  215,  214,  213,  212,  211,  210,
      207,  206,  205,  204,  203,  202,  201,  197,  196,  195,
      194,  193,  192,  191,  190,  189,  188,  187,  183,  182,
      181,  180,  179,  178,  177,   69,  166,  156,  136,  127,
      104,  101,  100,   99,   98,   97,   96,   95,   91,   79,
       73,   70,   69,   67,  929,   65,   65,    7,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,

      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929
    } ;

static yyconst flex_int16_t yy_chk[1353] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    9,   36,    9,   36,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,   14,   16,  145,
       17,   18,   18,   18,   18,   18,   18,   18,   22,   22,
       33,   16,   17,   35,   14,  145,    3,   24,   24,   37,
       37,   38,   33,   37,   39,   38,   39,   45,   35,   41,
       37,   38,   41,   37,   41,   39,   44,   58,   66,   58,
       66,   45,   44,    3,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,   40,   47,   43,   48,   52,   43,  151,  151,   40,
       43,   43,   40,   51,   48,   40,   47,   49,   51,   52,

        4,   47,   51,   54,   49,   49,   55,   50,   55,  121,
       50,   55,   56,   56,  135,   49,  200,  200,   49,   50,
      121,  135,   81,  113,  113,  113,   50,    4,   20,  176,
       20,   20,   20,   20,   20,   20,   20,   61,   61,   61,
       61,   61,   61,   61,  149,   20,   20,   81,  100,  131,
      137,   54,  131,  176,  152,  149,  131,   20,  131,   20,
      769,  100,  100,  152,  137,  155,   20,   20,  155,  194,
       56,  159,  315,  159,   56,  165,  159,  165,  184,  315,
      770,   20,  184,  194,   20,   21,  771,   21,   21,   21,
       21,   21,   21,   21,   78,   78,   78,   78,   78,   78,

       78,  772,   21,   21,  160,  160,  161,  161,  773,   78,
       78,   83,   83,  247,   21,   83,   83,   83,   83,   83,
       83,   83,  247,   21,   21,  220,  220,  220,  686,  686,
       78,   78,  278,  278,  278,  302,  302,  302,   21,   80,
       80,   80,   80,   80,   80,   80,  167,  167,  167,  167,
      167,  167,  167,  502,   80,   80,  335,  335,  335,  220,
      391,  774,  160,  775,  161,  502,  160,  776,  161,  378,
      378,  378,  778,  391,  779,   80,   80,   82,  780,   82,
       82,   82,   82,   82,   82,   82,  379,  379,  379,  379,
      781,  782,  169,  169,   82,   82,  169,  169,  169,  169,

      169,  169,  169,  171,  171,  171,  171,  171,  171,  171,
      784,  386,  386,  386,  785,   82,   82,  786,  171,  171,
      172,  172,  386,  386,  172,  172,  172,  172,  172,  172,
      172,  174,  174,  174,  174,  174,  174,  174,  788,  171,
      171,  175,  175,  175,  175,  175,  175,  175,  257,  257,
      257,  257,  257,  257,  257,  789,  790,  175,  258,  258,
      258,  258,  258,  258,  258,  261,  261,  261,  261,  261,
      261,  261,  791,  792,  258,  259,  259,  793,  175,  259,
      259,  259,  259,  259,  259,  259,  262,  262,  262,  262,
      262,  262,  262,  794,  795,  258,  444,  444,  444,  456,

      456,  456,  262,  346,  346,  346,  346,  346,  346,  346,
      347,  347,  347,  347,  347,  347,  347,  457,  457,  457,
      458,  458,  458,  262,  796,  797,  347,  459,  459,  459,
      487,  487,  487,  492,  503,  503,  503,  798,  459,  459,
      800,  487,  487,  515,  515,  515,  503,  347,  492,  492,
      492,  492,  492,  492,  492,  516,  516,  516,  517,  517,
      517,  518,  518,  518,  519,  519,  519,  520,  520,  520,
      537,  538,  551,  551,  564,  564,  649,  649,  649,  801,
      565,  565,  551,  802,  537,  538,  803,  804,  805,  564,
      564,  564,  564,  564,  564,  565,  565,  565,  565,  565,

      565,  565,  637,  637,  639,  639,  637,  642,  729,  729,
      641,  641,  729,  767,  767,  806,  807,  767,  564,  639,
      639,  639,  639,  639,  639,  641,  641,  641,  641,  641,
      641,  641,  653,  808,  809,  810,  811,  812,  813,  816,
      818,  820,  653,  564,  822,  827,  828,  642,  829,  830,
      831,  832,  833,  834,  828,  837,  838,  642,  840,  841,
      842,  843,  844,  845,  846,  847,  848,  849,  642,  850,
      851,  852,  846,  853,  854,  855,  856,  857,  858,  860,
      861,  862,  863,  864,  865,  866,  869,  873,  874,  875,
      863,  876,  877,  878,  880,  879,  881,  882,  883,  884,

      885,  886,  878,  879,  887,  888,  891,  890,  892,  894,
      897,  898,  899,  887,  888,  890,  901,  902,  845,  904,
      906,  899,  907,  908,  909,  902,  847,  910,  911,  912,
      914,  915,  908,  919,  916,  922,  920,  911,  912,  921,
      923,  924,  862,  916,  920,  925,  926,  921,  927,  935,
      937,  766,  765,  764,  762,  926,  761,  927,  760,  759,
      758,  756,  755,  754,  753,  752,  751,  891,  750,  748,
      747,  746,  745,  744,  743,  742,  741,  901,  740,  738,
      737,  736,  922,  735,  732,  731,  730,  923,  930,  930,
      930,  930,  931,  931,  931,  931,  932,  728,  932,  932,

      933,  933,  934,  934,  936,  726,  936,  936,  938,  725,
      938,  938,  724,  723,  722,  721,  720,  719,  718,  717,
      716,  715,  714,  713,  711,  710,  709,  708,  707,  706,
      705,  704,  703,  702,  701,  700,  699,  698,  697,  696,
      695,  694,  693,  692,  689,  688,  687,  685,  684,  683,
      682,  681,  680,  679,  678,  677,  674,  673,  668,  667,
      666,  665,  664,  663,  662,  661,  660,  659,  658,  657,
      656,  655,  652,  651,  650,  648,  647,  646,  645,  644,
      643,  634,  633,  631,  630,  629,  627,  626,  625,  624,
      623,  622,  621,  619,  618,  617,  616,  615,  614,  613,

      612,  611,  610,  609,  607,  606,  605,  604,  583,  581,
      580,  579,  578,  577,  576,  575,  574,  573,  572,  570,
      569,  568,  567,  566,  563,  561,  559,  558,  557,  556,
      555,  553,  552,  550,  549,  548,  547,  546,  545,  543,
      542,  541,  540,  536,  535,  534,  533,  532,  522,  521,
      514,  508,  507,  506,  504,  501,  500,  499,  498,  497,
      496,  495,  494,  493,  491,  490,  489,  488,  486,  485,
      484,  479,  478,  475,  473,  472,  471,  470,  468,  467,
      466,  464,  463,  462,  461,  460,  455,  454,  453,  452,
      451,  449,  448,  447,  445,  443,  442,  441,  439,  438,

      437,  435,  434,  433,  432,  431,  430,  429,  428,  427,
      426,  425,  423,  422,  420,  419,  417,  415,  411,  410,
      409,  408,  407,  406,  405,  404,  402,  401,  400,  399,
      397,  396,  395,  394,  393,  392,  390,  389,  387,  385,
      384,  383,  382,  381,  380,  377,  375,  374,  373,  372,
      371,  369,  368,  366,  365,  360,  359,  358,  357,  356,
      355,  354,  353,  352,  351,  350,  349,  348,  345,  344,
      343,  342,  340,  339,  338,  337,  336,  334,  333,  331,
      329,  328,  327,  326,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  314,  312,  311,  310,  306,  305,

      304,  303,  301,  299,  298,  297,  296,  295,  294,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  279,
      277,  276,  275,  274,  273,  272,  271,  270,  269,  268,
      267,  266,  265,  255,  254,  253,  252,  251,  250,  249,
      248,  246,  245,  244,  243,  242,  241,  240,  239,  238,
      237,  236,  235,  234,  233,  232,  231,  230,  229,  228,
      226,  225,  224,  223,  222,  221,  219,  218,  217,  216,
      215,  214,  213,  212,  210,  209,  208,  207,  206,  205,
      204,  203,  202,  201,  199,  198,  197,  196,  195,  193,
      192,  190,  189,  188,  187,  186,  185,  183,  182,  181,

      180,  179,  164,  163,  156,  154,  153,  150,  148,  147,
      146,  144,  143,  142,  141,  140,  139,  138,  136,  134,
      133,  132,  130,  129,  127,  126,  125,  124,  123,  122,
      120,  119,  118,  117,  116,  115,  114,  112,  111,  110,
      109,  108,  107,  106,  105,  103,  102,  101,   99,   98,
       97,   96,   95,   93,   89,   68,   60,   53,   46,   42,
       34,   32,   31,   30,   29,   28,   27,   26,   23,   19,
       15,   13,   12,   11,    7,    6,    5,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,

      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
#line 2 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.

// This code is modified from that in the Mesa3D Graphics library available at
// http://mesa3d.org/
// The license for the original code follows:

/*
 * Copyright © 2008, 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include "ShaderCompilerCommon.h"
#include "strtod.h"
#include "ast.h"
#include "glsl_parser_extras.h"
#include "hlsl_parser.h"

static int classify_identifier(struct _mesa_glsl_parse_state *, const char *);

#ifdef _MSC_VER
#define YY_NO_UNISTD_H
#endif

#define YY_USER_ACTION						\
   do {								\
	  yylloc->source_file = yyextra->current_source_file; \
	  yylloc->first_column = yycolumn + 1;			\
	  yylloc->first_line = yylineno + 1;			\
	  yycolumn += yyleng;					\
   } while(0);

#define YY_USER_INIT yylineno = 0; yycolumn = 0;

/* A macro for handling reserved words and keywords across language versions.
 *
 * Certain words start out as identifiers, become reserved words in
 * later language revisions, and finally become language keywords.
 *
 * For example, consider the following lexer rule:
 * samplerBuffer       KEYWORD(130, 140, SAMPLERBUFFER)
 *
 * This means that "samplerBuffer" will be treated as:
 * - a keyword (SAMPLERBUFFER token)         ...in GLSL >= 1.40
 * - a reserved word - error                 ...in GLSL >= 1.30
 * - an identifier                           ...in GLSL <  1.30
 */
#define KEYWORD(reserved_version, allowed_version, token)		\
   do {									\
	  if (yyextra->language_version >= allowed_version) {		\
	 return token;							\
	  } else if (yyextra->language_version >= reserved_version) {	\
	 _mesa_glsl_error(yylloc, yyextra,				\
			  "Illegal use of reserved word '%s'", yytext);	\
	 return ERROR_TOK;						\
	  } else {								\
	 yylval->identifier = strdup(yytext);				\
	 return classify_identifier(yyextra, yytext);			\
	  }									\
   } while (0)

/* The ES macro can be used in KEYWORD checks:
 *
 *    word      KEYWORD(110 || ES, 400, TOKEN)
 * ...means the word is reserved in GLSL ES 1.00, while
 *
 *    word      KEYWORD(110, 130 || ES, TOKEN)
 * ...means the word is a legal keyword in GLSL ES 1.00.
 */
#define ES 1

static int
literal_integer(char *text, int len, struct _mesa_glsl_parse_state *state,
		YYSTYPE *lval, YYLTYPE *lloc, int base)
{
   bool is_uint = (text[len - 1] == 'u' ||
		   text[len - 1] == 'U');
   const char *digits = text;

   /* Skip "0x" */
   if (base == 16)
	  digits += 2;

#ifdef _MSC_VER
   unsigned __int64 value = _strtoui64(digits, NULL, base);
#else
   unsigned long long value = strtoull(digits, NULL, base);
#endif

   lval->n = (int)value;

   if (value > UINT_MAX) {
	  /* Note that signed 0xffffffff is valid, not out of range! */
	  if (state->language_version >= 130) {
	 _mesa_glsl_error(lloc, state,
			  "Literal value '%s' out of range", text);
	  } else {
	 _mesa_glsl_warning(lloc, state,
				"Literal value '%s' out of range", text);
	  }
   } else if (base == 10 && !is_uint && (unsigned)value > (unsigned)INT_MAX + 1) {
	  /* Tries to catch unintentionally providing a negative value.
	   * Note that -2147483648 is parsed as -(2147483648), so we don't
	   * want to warn for INT_MAX.
	   */
	  _mesa_glsl_warning(lloc, state,
			 "Signed literal value '%s' is interpreted as %d",
			 text, lval->n);
   }
   return is_uint ? UINTCONSTANT : INTCONSTANT;
}

#define LITERAL_INTEGER(base) \
   literal_integer(yytext, yyleng, yyextra, yylval, yylloc, base)


#line 1174 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.inl"

#define INITIAL 0
#define PP 1
#define PRAGMA 2

#define YY_EXTRA_TYPE struct _mesa_glsl_parse_state *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int _mesa_hlsl_lex_init (yyscan_t* scanner);

int _mesa_hlsl_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int _mesa_hlsl_lex_destroy (yyscan_t yyscanner );

int _mesa_hlsl_get_debug (yyscan_t yyscanner );

void _mesa_hlsl_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE _mesa_hlsl_get_extra (yyscan_t yyscanner );

void _mesa_hlsl_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *_mesa_hlsl_get_in (yyscan_t yyscanner );

void _mesa_hlsl_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *_mesa_hlsl_get_out (yyscan_t yyscanner );

void _mesa_hlsl_set_out  (FILE * out_str ,yyscan_t yyscanner );

int _mesa_hlsl_get_leng (yyscan_t yyscanner );

char *_mesa_hlsl_get_text (yyscan_t yyscanner );

int _mesa_hlsl_get_lineno (yyscan_t yyscanner );

void _mesa_hlsl_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * _mesa_hlsl_get_lval (yyscan_t yyscanner );

void _mesa_hlsl_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *_mesa_hlsl_get_lloc (yyscan_t yyscanner );
    
        void _mesa_hlsl_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int _mesa_hlsl_wrap (yyscan_t yyscanner );
#else
extern int _mesa_hlsl_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int _mesa_hlsl_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int _mesa_hlsl_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 151 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"


#line 1411 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.inl"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			_mesa_hlsl_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				_mesa_hlsl__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		_mesa_hlsl__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 930 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 929 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 153 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
;
	YY_BREAK
/* Preprocessor tokens. */ 
case 2:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 156 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
;
	YY_BREAK
case 3:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 157 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				   /* Eat characters until the first digit is
					* encountered
					*/
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
					  ptr++;

				   yylineno = strtol(ptr, &ptr, 0) - 2;

				   while (*ptr != '\"')
					   ptr++;
				   char *filename = ++ptr;
				   while (*ptr != '\"')
					   ptr++;

				   struct _mesa_glsl_parse_state *state = yyextra;
				   void *ctx = state;
				   state->current_source_file = ralloc_strndup(ctx, filename, ptr - filename);
				}
	YY_BREAK
case 4:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 177 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				   /* Eat characters until the first digit is
					* encountered
					*/
				   char *ptr = yytext;
				   while (!isdigit(*ptr))
					  ptr++;

				   yylineno = strtol(ptr, &ptr, 0) - 2;
				   yyextra->current_source_file = 0;
				}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 188 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_ON;
				}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 192 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_DEBUG_OFF;
				}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 196 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_ON;
				}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 200 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_OPTIMIZE_OFF;
				}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 204 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				  BEGIN PP;
				  return PRAGMA_INVARIANT_ALL;
				}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 208 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{ BEGIN PRAGMA; }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 210 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 211 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{ }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 213 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{ }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 214 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{ }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 215 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return COLON;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 216 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				   yylval->identifier = strdup(yytext);
				   return IDENTIFIER;
				}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 220 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
					yylval->n = strtol(yytext, NULL, 10);
					return INTCONSTANT;
				}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 224 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{ BEGIN 0; yylineno++; yycolumn = 0; return EOL; }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 226 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{ yylineno++; yycolumn = 0; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 228 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return CONST_TOK;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 229 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return BOOL_TOK;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 230 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return FLOAT_TOK;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 231 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return FLOAT_TOK;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 232 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return HALF_TOK;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 233 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return INT_TOK;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 234 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 130, UINT_TOK);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 236 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return BREAK;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 237 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return CONTINUE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 238 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return DO;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 239 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return WHILE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 240 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return ELSE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 241 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return FOR;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 242 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return IF;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 243 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return DISCARD;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 244 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return RETURN;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 246 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return BVEC2;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 247 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return BVEC3;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 248 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return BVEC4;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 249 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return IVEC2;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 250 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return IVEC3;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 251 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return IVEC4;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 252 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 130, UVEC2);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 253 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 130, UVEC3);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 254 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 130, UVEC4);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 255 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return VEC2;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 256 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return VEC3;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 257 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return VEC4;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 258 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, MAT2X2);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 259 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, MAT2X3);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 260 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, MAT2X4);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 261 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, MAT3X2);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 262 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, MAT3X3);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 263 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, MAT3X4);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 264 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, MAT4X2);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 265 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, MAT4X3);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 266 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, MAT4X4);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 268 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return POINT_TOK;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 269 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return LINE_TOK;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 270 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return TRIANGLE_TOK;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 271 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return LINEADJ_TOK;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 272 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return TRIANGLEADJ_TOK;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 273 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return POINTSTREAM;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 274 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return LINESTREAM;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 275 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return TRIANGLESTREAM;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 277 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return INPUTPATCH;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 278 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return OUTPUTPATCH;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 280 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return IN_TOK;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 281 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return OUT_TOK;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 282 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return INOUT_TOK;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 283 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return UNIFORM;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 284 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return VARYING;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 285 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, CENTROID);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 286 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120 || ES, 120 || ES, INVARIANT);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 287 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130 || ES, 130, NOINTERPOLATION);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 288 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 130, LINEAR);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 289 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 130, NOPERSPECTIVE);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 290 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(100, 310, GLOBALLYCOHERENT);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 291 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(100, 310, SHARED);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 293 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return ROW_MAJOR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 294 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return COLUMN_MAJOR;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 296 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return BUFFER;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 297 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return TEXTURE1D;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 298 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return TEXTURE1D_ARRAY;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 299 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return TEXTURE2D;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 300 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return TEXTURE2D_ARRAY;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 301 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return TEXTURE2DMS;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 302 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return TEXTURE2DMS_ARRAY;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 303 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return TEXTURE3D;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 304 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return TEXTURECUBE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 305 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(100, 310, TEXTURECUBE_ARRAY);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 306 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return SAMPLERSTATE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 307 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return SAMPLERSTATE_CMP;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 309 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(100, 310, RWBUFFER);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 310 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(100, 430, RWSTRUCTUREDBUFFER);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 311 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(100, 430, RWBYTEADDRESSBUFFER);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 312 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(100, 310, RWTEXTURE1D);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 313 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(100, 310, RWTEXTURE1D_ARRAY);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 314 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(100, 310, RWTEXTURE2D);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 315 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(100, 310, RWTEXTURE2D_ARRAY);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 316 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(100, 310, RWTEXTURE3D);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 318 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return STRUCT;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 319 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return CBUFFER;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 320 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return VOID_TOK;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 322 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return INC_OP;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 323 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return DEC_OP;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 324 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return LE_OP;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 325 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return GE_OP;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 326 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return EQ_OP;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 327 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return NE_OP;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 328 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return AND_OP;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 329 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return OR_OP;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 330 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return LEFT_OP;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 331 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return RIGHT_OP;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 333 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return MUL_ASSIGN;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 334 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return DIV_ASSIGN;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 335 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return ADD_ASSIGN;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 336 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return MOD_ASSIGN;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 337 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return LEFT_ASSIGN;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 338 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return RIGHT_ASSIGN;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 339 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return AND_ASSIGN;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 340 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return XOR_ASSIGN;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 341 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return OR_ASSIGN;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 342 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return SUB_ASSIGN;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 344 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				return LITERAL_INTEGER(10);
			}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 347 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				return LITERAL_INTEGER(16);
			}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 350 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				return LITERAL_INTEGER(8);
			}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 354 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				struct _mesa_glsl_parse_state *state = yyextra;
				void *ctx = state;	
				yylval->string_literal = ralloc_strdup(ctx, yytext);
				return STRINGCONSTANT;
			}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 361 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				yylval->real = glsl_strtod(yytext, NULL);
				return FLOATCONSTANT;
			}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 365 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				yylval->real = glsl_strtod(yytext, NULL);
				return FLOATCONSTANT;
			}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 369 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				yylval->real = glsl_strtod(yytext, NULL);
				return FLOATCONSTANT;
			}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 373 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				yylval->real = glsl_strtod(yytext, NULL);
				return FLOATCONSTANT;
			}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 377 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				yylval->real = glsl_strtod(yytext, NULL);
				return FLOATCONSTANT;
			}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 382 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				yylval->n = 1;
				return BOOLCONSTANT;
			}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 386 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				yylval->n = 0;
				return BOOLCONSTANT;
			}
	YY_BREAK
/* Reserved words in GLSL 1.10. */
case 135:
YY_RULE_SETUP
#line 393 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, ASM);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 394 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, CLASS);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 395 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, UNION);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 396 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, ENUM);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 397 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, TYPEDEF);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 398 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, TEMPLATE);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 399 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, THIS);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 400 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, PACKED_TOK);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 401 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, GOTO);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 402 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 130, SWITCH);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 403 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 130, DEFAULT);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 404 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return INLINE_TOK;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 405 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, NOINLINE);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 406 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, VOLATILE);
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 407 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, PUBLIC_TOK);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 408 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return STATIC;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 409 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, EXTERN);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 410 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, EXTERNAL);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 411 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, INTERFACE);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 412 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, LONG_TOK);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 413 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, SHORT_TOK);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 414 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 400, DOUBLE_TOK);
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 415 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 110, FIXED_TOK);
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 416 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, UNSIGNED);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 417 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 150, HVEC2);
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 418 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 150, HVEC3);
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 419 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 150, HVEC4);
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 420 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, HMAT2X2);
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 421 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, HMAT2X3);
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 422 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, HMAT2X4);
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 423 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, HMAT3X2);
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 424 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, HMAT3X3);
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 425 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, HMAT3X4);
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 426 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, HMAT4X2);
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 427 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, HMAT4X3);
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 428 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(120, 120, HMAT4X4);
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 429 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 400, DVEC2);
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 430 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 400, DVEC3);
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 431 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 400, DVEC4);
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 432 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 110, FVEC2);
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 433 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 110, FVEC3);
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 434 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 110, FVEC4);
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 435 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 110, FMAT2X2);
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 436 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 110, FMAT2X3);
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 437 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 110, FMAT2X4);
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 438 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 110, FMAT3X2);
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 439 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 110, FMAT3X3);
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 440 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 110, FMAT3X4);
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 441 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 110, FMAT4X2);
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 442 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 110, FMAT4X3);
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 443 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 110, FMAT4X4);
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 444 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return SAMPLER2DRECT;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 445 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, SAMPLER3DRECT);
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 446 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
return SAMPLER2DRECTSHADOW;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 447 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, SIZEOF);
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 448 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, CAST);
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 449 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, NAMESPACE);
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 450 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(110 || ES, 999, USING);
	YY_BREAK
/* Additional reserved words in GLSL 1.30. */
case 193:
YY_RULE_SETUP
#line 453 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 130, CASE);
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 454 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, COMMON);
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 455 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, PARTITION);
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 456 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, ACTIVE);
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 457 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 140, SAMPLERBUFFER);
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 458 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, FILTER);
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 459 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IMAGE1D);
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 460 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IMAGE2D);
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 461 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IMAGE3D);
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 462 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IMAGECUBE);
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 463 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IIMAGE1D);
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 464 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IIMAGE2D);
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 465 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IIMAGE3D);
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 466 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IIMAGECUBE);
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 467 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, UIMAGE1D);
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 468 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, UIMAGE2D);
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 469 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, UIMAGE3D);
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 470 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, UIMAGECUBE);
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 471 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IMAGE1DARRAY);
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 472 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IMAGE2DARRAY);
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 473 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IIMAGE1DARRAY);
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 474 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IIMAGE2DARRAY);
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 475 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, UIMAGE1DARRAY);
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 476 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, UIMAGE2DARRAY);
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 477 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IMAGE1DSHADOW);
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 478 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IMAGE2DSHADOW);
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 479 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IMAGE1DARRAYSHADOW);
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 480 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IMAGE2DARRAYSHADOW);
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 481 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IMAGEBUFFER);
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 482 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, IIMAGEBUFFER);
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 483 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
KEYWORD(130, 999, UIMAGEBUFFER);
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 485 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{
				struct _mesa_glsl_parse_state *state = yyextra;
				void *ctx = state;	
				yylval->identifier = ralloc_strdup(ctx, yytext);
				return classify_identifier(state, yytext);
			}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 492 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 494 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"
ECHO;
	YY_BREAK
#line 2727 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.inl"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PRAGMA):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * _mesa_hlsl_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( _mesa_hlsl_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of _mesa_hlsl_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					_mesa_hlsl_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			_mesa_hlsl_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _mesa_hlsl_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 930 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 930 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 929);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					_mesa_hlsl_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( _mesa_hlsl_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void _mesa_hlsl_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        _mesa_hlsl_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            _mesa_hlsl__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	_mesa_hlsl__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	_mesa_hlsl__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void _mesa_hlsl__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		_mesa_hlsl_pop_buffer_state();
	 *		_mesa_hlsl_push_buffer_state(new_buffer);
     */
	_mesa_hlsl_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	_mesa_hlsl__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (_mesa_hlsl_wrap()) processing, but the only time this flag
	 * is looked at is after _mesa_hlsl_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void _mesa_hlsl__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE _mesa_hlsl__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) _mesa_hlsl_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_hlsl__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) _mesa_hlsl_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_hlsl__create_buffer()" );

	b->yy_is_our_buffer = 1;

	_mesa_hlsl__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with _mesa_hlsl__create_buffer()
 * @param yyscanner The scanner object.
 */
    void _mesa_hlsl__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		_mesa_hlsl_free((void *) b->yy_ch_buf ,yyscanner );

	_mesa_hlsl_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a _mesa_hlsl_restart() or at EOF.
 */
    static void _mesa_hlsl__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	_mesa_hlsl__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then _mesa_hlsl__init_buffer was _probably_
     * called from _mesa_hlsl_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void _mesa_hlsl__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		_mesa_hlsl__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void _mesa_hlsl_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	_mesa_hlsl_ensure_buffer_stack(yyscanner);

	/* This block is copied from _mesa_hlsl__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from _mesa_hlsl__switch_to_buffer. */
	_mesa_hlsl__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void _mesa_hlsl_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	_mesa_hlsl__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		_mesa_hlsl__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void _mesa_hlsl_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_hlsl_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_hlsl_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_hlsl_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_hlsl_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE _mesa_hlsl__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) _mesa_hlsl_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_hlsl__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	_mesa_hlsl__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to _mesa_hlsl_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       _mesa_hlsl__scan_bytes() instead.
 */
YY_BUFFER_STATE _mesa_hlsl__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return _mesa_hlsl__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to _mesa_hlsl_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE _mesa_hlsl__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) _mesa_hlsl_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_hlsl__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = _mesa_hlsl__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in _mesa_hlsl__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE _mesa_hlsl_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int _mesa_hlsl_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int _mesa_hlsl_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_hlsl_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *_mesa_hlsl_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int _mesa_hlsl_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *_mesa_hlsl_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void _mesa_hlsl_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_hlsl_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "_mesa_hlsl_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void _mesa_hlsl_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "_mesa_hlsl_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see _mesa_hlsl__switch_to_buffer
 */
void _mesa_hlsl_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void _mesa_hlsl_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int _mesa_hlsl_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void _mesa_hlsl_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * _mesa_hlsl_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void _mesa_hlsl_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *_mesa_hlsl_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void _mesa_hlsl_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* _mesa_hlsl_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int _mesa_hlsl_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) _mesa_hlsl_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* _mesa_hlsl_lex_init_extra has the same functionality as _mesa_hlsl_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to _mesa_hlsl_alloc in
 * the yyextra field.
 */

int _mesa_hlsl_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    _mesa_hlsl_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) _mesa_hlsl_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    _mesa_hlsl_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from _mesa_hlsl_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * _mesa_hlsl_lex_init()
     */
    return 0;
}

/* _mesa_hlsl_lex_destroy is for both reentrant and non-reentrant scanners. */
int _mesa_hlsl_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		_mesa_hlsl__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		_mesa_hlsl_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	_mesa_hlsl_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        _mesa_hlsl_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * _mesa_hlsl_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    _mesa_hlsl_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *_mesa_hlsl_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *_mesa_hlsl_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void _mesa_hlsl_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see _mesa_hlsl_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 494 "../../../Source/ThirdParty/hlslcc/hlslcc/src/hlslcc_lib/hlsl_lexer.ll"



int
classify_identifier(struct _mesa_glsl_parse_state *state, const char *name)
{
   if (state->symbols->get_variable(name) || state->symbols->get_function(name))
	  return IDENTIFIER;
   else if (state->symbols->get_type(name))
	  return TYPE_IDENTIFIER;
   else
	  return NEW_IDENTIFIER;
}

void
_mesa_hlsl_lexer_ctor(struct _mesa_glsl_parse_state *state, const char *string)
{
   _mesa_hlsl_lex_init_extra(state,& state->scanner);
   _mesa_hlsl__scan_string(string,state->scanner);
}

void
_mesa_hlsl_lexer_dtor(struct _mesa_glsl_parse_state *state)
{
   _mesa_hlsl_lex_destroy(state->scanner);
}

